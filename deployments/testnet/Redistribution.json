{
  "address": "0x66eb6c5bE83851B0Ec5131580d7C5D1220B20626",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staking",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "postageContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "oracleContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "multisig",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyClaimed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyCommited",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyRevealed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "BalanceValidationFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BelowMinimumStake",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "BucketDiffers",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CommitRoundNotStarted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CommitRoundOver",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FirstRevealDone",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "InclusionProofFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "IndexOutsideSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignatureLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LastElementCheckFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MustStake2Rounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoCommitsReceived",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoMatchingCommit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoReveals",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotClaimPhase",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotCommitPhase",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotMatchingOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotRevealPhase",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyPauser",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OutOfDepth",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "OutOfDepthClaim",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "OutOfDepthReveal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PhaseLastBlock",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RandomElementCheckFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReserveCheckFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "SigRecoveryFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "SocCalcNotMatching",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "SocVerificationFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongPhase",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "validChunkCount",
          "type": "uint256"
        }
      ],
      "name": "ChunkCount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roundNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "overlay",
          "type": "bytes32"
        }
      ],
      "name": "Committed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "CountCommits",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "CountReveals",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roundNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "anchor",
          "type": "bytes32"
        }
      ],
      "name": "CurrentRevealAnchor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roundNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "overlay",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeDensity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "reserveCommitment",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "depth",
          "type": "uint8"
        }
      ],
      "name": "Revealed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "depth",
          "type": "uint8"
        }
      ],
      "name": "TruthSelected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "overlay",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "depth",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeDensity",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            }
          ],
          "indexed": false,
          "internalType": "struct Redistribution.Reveal",
          "name": "winner",
          "type": "tuple"
        }
      ],
      "name": "WinnerSelected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "indexInRC",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "chunkAddress",
          "type": "bytes32"
        }
      ],
      "name": "transformedChunkAddressFromInclusionProof",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OracleContract",
      "outputs": [
        {
          "internalType": "contract IPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PostageContract",
      "outputs": [
        {
          "internalType": "contract IPostageStamp",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Stakes",
      "outputs": [
        {
          "internalType": "contract IStakeRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32[]",
              "name": "proofSegments",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32",
              "name": "proveSegment",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32[]",
              "name": "proofSegments2",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32",
              "name": "proveSegment2",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "chunkSpan",
              "type": "uint64"
            },
            {
              "internalType": "bytes32[]",
              "name": "proofSegments3",
              "type": "bytes32[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes32",
                  "name": "postageId",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "index",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "timeStamp",
                  "type": "uint64"
                }
              ],
              "internalType": "struct Redistribution.PostageProof",
              "name": "postageProof",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "signer",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes32",
                  "name": "identifier",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "chunkAddr",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct Redistribution.SOCProof[]",
              "name": "socProof",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Redistribution.ChunkInclusionProof",
          "name": "entryProof1",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32[]",
              "name": "proofSegments",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32",
              "name": "proveSegment",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32[]",
              "name": "proofSegments2",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32",
              "name": "proveSegment2",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "chunkSpan",
              "type": "uint64"
            },
            {
              "internalType": "bytes32[]",
              "name": "proofSegments3",
              "type": "bytes32[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes32",
                  "name": "postageId",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "index",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "timeStamp",
                  "type": "uint64"
                }
              ],
              "internalType": "struct Redistribution.PostageProof",
              "name": "postageProof",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "signer",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes32",
                  "name": "identifier",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "chunkAddr",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct Redistribution.SOCProof[]",
              "name": "socProof",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Redistribution.ChunkInclusionProof",
          "name": "entryProof2",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32[]",
              "name": "proofSegments",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32",
              "name": "proveSegment",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32[]",
              "name": "proofSegments2",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32",
              "name": "proveSegment2",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "chunkSpan",
              "type": "uint64"
            },
            {
              "internalType": "bytes32[]",
              "name": "proofSegments3",
              "type": "bytes32[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes32",
                  "name": "postageId",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "index",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "timeStamp",
                  "type": "uint64"
                }
              ],
              "internalType": "struct Redistribution.PostageProof",
              "name": "postageProof",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "signer",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes32",
                  "name": "identifier",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "chunkAddr",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct Redistribution.SOCProof[]",
              "name": "socProof",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Redistribution.ChunkInclusionProof",
          "name": "entryProofLast",
          "type": "tuple"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_obfuscatedHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_overlay",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_roundNumber",
          "type": "uint64"
        }
      ],
      "name": "commit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentClaimRound",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentCommitRound",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "currentCommits",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "overlay",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "revealed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "obfuscatedHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "revealIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentMinimumDepth",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPhaseClaim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPhaseCommit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPhaseReveal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRevealRound",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "currentReveals",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "overlay",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "depth",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeDensity",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRound",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRoundAnchor",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "returnVal",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRoundReveals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "overlay",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "depth",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeDensity",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Redistribution.Reveal[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentSeed",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "A",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "B",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "minimum",
          "type": "uint8"
        }
      ],
      "name": "inProximity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "overlay",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "depth",
          "type": "uint8"
        }
      ],
      "name": "isParticipatingInUpcomingRound",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_overlay",
          "type": "bytes32"
        }
      ],
      "name": "isWinner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextSeed",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_overlay",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "_depth",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_revealNonce",
          "type": "bytes32"
        }
      ],
      "name": "reveal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_penaltyMultiplierDisagreement",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_penaltyMultiplierNonRevealed",
          "type": "uint8"
        }
      ],
      "name": "setFreezingParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winner",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "overlay",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "depth",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeDensity",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_overlay",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "_depth",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "revealNonce",
          "type": "bytes32"
        }
      ],
      "name": "wrapCommit",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x6e466fa69fb29941eda3c48279a631e93255a4ec232821a6ea9f231f76ff72d7",
  "receipt": {
    "to": null,
    "from": "0xb1C7F17Ed88189Abf269Bf68A3B2Ed83C5276aAe",
    "contractAddress": "0x66eb6c5bE83851B0Ec5131580d7C5D1220B20626",
    "transactionIndex": 46,
    "gasUsed": "4217601",
    "logsBloom": "0x
    "blockHash": "0x34094fc2e49638822b58f41f696ef0674bd29985fef5088cbbc113e632b6bd77",
    "transactionHash": "0x6e466fa69fb29941eda3c48279a631e93255a4ec232821a6ea9f231f76ff72d7",
    "logs": [
      {
        "transactionIndex": 46,
        "blockNumber": 9882684,
        "transactionHash": "0x6e466fa69fb29941eda3c48279a631e93255a4ec232821a6ea9f231f76ff72d7",
        "address": "0x66eb6c5bE83851B0Ec5131580d7C5D1220B20626",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b1c7f17ed88189abf269bf68a3b2ed83c5276aae",
          "0x000000000000000000000000b1c7f17ed88189abf269bf68a3b2ed83c5276aae"
        ],
        "data": "0x",
        "logIndex": 90,
        "blockHash": "0x34094fc2e49638822b58f41f696ef0674bd29985fef5088cbbc113e632b6bd77"
      },
      {
        "transactionIndex": 46,
        "blockNumber": 9882684,
        "transactionHash": "0x6e466fa69fb29941eda3c48279a631e93255a4ec232821a6ea9f231f76ff72d7",
        "address": "0x66eb6c5bE83851B0Ec5131580d7C5D1220B20626",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
          "0x000000000000000000000000b1c7f17ed88189abf269bf68a3b2ed83c5276aae",
          "0x000000000000000000000000b1c7f17ed88189abf269bf68a3b2ed83c5276aae"
        ],
        "data": "0x",
        "logIndex": 91,
        "blockHash": "0x34094fc2e49638822b58f41f696ef0674bd29985fef5088cbbc113e632b6bd77"
      }
    ],
    "blockNumber": 9882684,
    "cumulativeGasUsed": "29565525",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xEA744438b61269EC83A790860E10C1a55081bBD8",
    "0x35A00b2Ce2bf100e4C2dc04FbA72d71c214EEF89",
    "0x5b1C7001C2b1a4462E40d705236033dE2b71AB38",
    "0xb1C7F17Ed88189Abf269Bf68A3B2Ed83C5276aAe"
  ],
  "numDeployments": 1,
  "solcInputHash": "966c96a7df81c4f3d9cb298c62a38164",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"postageContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multisig\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyCommited\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyRevealed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"BalanceValidationFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BelowMinimumStake\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"BucketDiffers\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CommitRoundNotStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CommitRoundOver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FirstRevealDone\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"InclusionProofFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"IndexOutsideSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LastElementCheckFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustStake2Rounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoCommitsReceived\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoMatchingCommit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoReveals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotClaimPhase\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCommitPhase\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotMatchingOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotRevealPhase\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPauser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OutOfDepth\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"OutOfDepthClaim\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"OutOfDepthReveal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PhaseLastBlock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RandomElementCheckFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReserveCheckFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"SigRecoveryFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"SocCalcNotMatching\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"SocVerificationFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongPhase\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validChunkCount\",\"type\":\"uint256\"}],\"name\":\"ChunkCount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"overlay\",\"type\":\"bytes32\"}],\"name\":\"Committed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"CountCommits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"CountReveals\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"anchor\",\"type\":\"bytes32\"}],\"name\":\"CurrentRevealAnchor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"overlay\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeDensity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"reserveCommitment\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"depth\",\"type\":\"uint8\"}],\"name\":\"Revealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"depth\",\"type\":\"uint8\"}],\"name\":\"TruthSelected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"overlay\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"depth\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeDensity\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct Redistribution.Reveal\",\"name\":\"winner\",\"type\":\"tuple\"}],\"name\":\"WinnerSelected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"indexInRC\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"chunkAddress\",\"type\":\"bytes32\"}],\"name\":\"transformedChunkAddressFromInclusionProof\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OracleContract\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PostageContract\",\"outputs\":[{\"internalType\":\"contract IPostageStamp\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Stakes\",\"outputs\":[{\"internalType\":\"contract IStakeRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"proofSegments\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"proveSegment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proofSegments2\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"proveSegment2\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"chunkSpan\",\"type\":\"uint64\"},{\"internalType\":\"bytes32[]\",\"name\":\"proofSegments3\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"postageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"timeStamp\",\"type\":\"uint64\"}],\"internalType\":\"struct Redistribution.PostageProof\",\"name\":\"postageProof\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"chunkAddr\",\"type\":\"bytes32\"}],\"internalType\":\"struct Redistribution.SOCProof[]\",\"name\":\"socProof\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Redistribution.ChunkInclusionProof\",\"name\":\"entryProof1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"proofSegments\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"proveSegment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proofSegments2\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"proveSegment2\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"chunkSpan\",\"type\":\"uint64\"},{\"internalType\":\"bytes32[]\",\"name\":\"proofSegments3\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"postageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"timeStamp\",\"type\":\"uint64\"}],\"internalType\":\"struct Redistribution.PostageProof\",\"name\":\"postageProof\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"chunkAddr\",\"type\":\"bytes32\"}],\"internalType\":\"struct Redistribution.SOCProof[]\",\"name\":\"socProof\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Redistribution.ChunkInclusionProof\",\"name\":\"entryProof2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"proofSegments\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"proveSegment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proofSegments2\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"proveSegment2\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"chunkSpan\",\"type\":\"uint64\"},{\"internalType\":\"bytes32[]\",\"name\":\"proofSegments3\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"postageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"timeStamp\",\"type\":\"uint64\"}],\"internalType\":\"struct Redistribution.PostageProof\",\"name\":\"postageProof\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"chunkAddr\",\"type\":\"bytes32\"}],\"internalType\":\"struct Redistribution.SOCProof[]\",\"name\":\"socProof\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Redistribution.ChunkInclusionProof\",\"name\":\"entryProofLast\",\"type\":\"tuple\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_obfuscatedHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_overlay\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_roundNumber\",\"type\":\"uint64\"}],\"name\":\"commit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentClaimRound\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentCommitRound\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentCommits\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"overlay\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revealed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"obfuscatedHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"revealIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentMinimumDepth\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPhaseClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPhaseCommit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPhaseReveal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRevealRound\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentReveals\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"overlay\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"depth\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeDensity\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRoundAnchor\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"returnVal\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRoundReveals\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"overlay\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"depth\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeDensity\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct Redistribution.Reveal[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSeed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"A\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"B\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"minimum\",\"type\":\"uint8\"}],\"name\":\"inProximity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"overlay\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"depth\",\"type\":\"uint8\"}],\"name\":\"isParticipatingInUpcomingRound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_overlay\",\"type\":\"bytes32\"}],\"name\":\"isWinner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextSeed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_overlay\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_depth\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_revealNonce\",\"type\":\"bytes32\"}],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_penaltyMultiplierDisagreement\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_penaltyMultiplierNonRevealed\",\"type\":\"uint8\"}],\"name\":\"setFreezingParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winner\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"overlay\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"depth\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeDensity\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_overlay\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_depth\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"revealNonce\",\"type\":\"bytes32\"}],\"name\":\"wrapCommit\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"The Swarm Authors\",\"details\":\"Implements a Schelling Co-ordination game to form consensus around the Reserve Commitment hash. This takes place in three phases: _commit_, _reveal_ and _claim_. A node, upon establishing that it _isParticipatingInUpcomingRound_, i.e. it's overlay falls within proximity order of its reported depth with the _currentRoundAnchor_, prepares a \\\"reserve commitment hash\\\" using the chunks it currently stores in its reserve and calculates the \\\"storage depth\\\" (see Bee for details). These values, if calculated honestly, and with the right chunks stored, should be the same for every node in a neighbourhood. This is the Schelling point. Each eligible node can then use these values, together with a random, single use, secret  _revealNonce_ and their _overlay_ as the pre-image values for the obsfucated _commit_, using the _wrapCommit_ method. Once the _commit_ round has elapsed, participating nodes must provide the values used to calculate their obsfucated _commit_ hash, which, once verified for correctness and proximity to the anchor are retained in the _currentReveals_. Nodes that have commited but do not reveal the correct values used to create the pre-image will have their stake \\\"frozen\\\" for a period of rounds proportional to their reported depth. During the _reveal_ round, randomness is updated after every successful reveal. Once the reveal round is concluded, the _currentRoundAnchor_ is updated and users can determine if they will be eligible their overlay will be eligible for the next commit phase using _isParticipatingInUpcomingRound_. When the _reveal_ phase has been concluded, the claim phase can begin. At this point, the truth teller and winner are already determined. By calling _isWinner_, an applicant node can run the relevant logic to determine if they have been selected as the beneficiary of this round. When calling _claim_, the current pot from the PostageStamp contract is withdrawn and transferred to that beneficiaries address. Nodes that have revealed values that differ from the truth, have their stakes \\\"frozen\\\" for a period of rounds proportional to their reported depth.\",\"events\":{\"ChunkCount(uint256)\":{\"details\":\"Emit from Postagestamp contract valid chunk count at the end of claim\"},\"Committed(uint256,bytes32)\":{\"details\":\"Logs that an overlay has committed\"},\"CountCommits(uint256)\":{\"details\":\"Emits the number of commits being processed by the claim phase.\"},\"CountReveals(uint256)\":{\"details\":\"Emits the number of reveals being processed by the claim phase.\"},\"CurrentRevealAnchor(uint256,bytes32)\":{\"details\":\"Bytes32 anhor of current reveal round\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Revealed(uint256,bytes32,uint256,uint256,bytes32,uint8)\":{\"details\":\"Logs that an overlay has revealed\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"TruthSelected(bytes32,uint8)\":{\"details\":\"Emitted when the truth oracle of a round is selected in the claim phase.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"WinnerSelected((bytes32,address,uint8,uint256,uint256,bytes32))\":{\"details\":\"Emitted when the winner of a round is selected in the claim phase\"},\"transformedChunkAddressFromInclusionProof(uint256,bytes32)\":{\"details\":\"Logs for inclusion proof\"}},\"kind\":\"dev\",\"methods\":{\"commit(bytes32,bytes32,uint64)\":{\"details\":\"If a node's overlay is _inProximity_(_depth_) of the _currentRoundAnchor_, that node may compute an _obfuscatedHash_ by providing their _overlay_, reported storage _depth_, reserve commitment _hash_ and a randomly generated, and secret _revealNonce_ to the _wrapCommit_ method.\",\"params\":{\"_obfuscatedHash\":\"The calculated hash resultant of the required pre-image values.\",\"_overlay\":\"The overlay referenced in the pre-image. Must be staked by at least the minimum value, and be derived from the same key pair as the message sender.\"}},\"constructor\":{\"params\":{\"oracleContract\":\"the address of the linked PriceOracle contract.\",\"postageContract\":\"the address of the linked PostageStamp contract.\",\"staking\":\"the address of the linked Staking contract.\"}},\"currentRoundAnchor()\":{\"details\":\"A node must be within proximity order of less than or equal to the storage depth they intend to report.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"inProximity(bytes32,bytes32,uint8)\":{\"params\":{\"A\":\"An overlay address to compare.\",\"B\":\"An overlay address to compare.\",\"minimum\":\"Minimum proximity order.\"}},\"isParticipatingInUpcomingRound(bytes32,uint8)\":{\"params\":{\"depth\":\"The storage depth the applicant intends to report.\",\"overlay\":\"The overlay address of the applicant.\"}},\"isWinner(bytes32)\":{\"params\":{\"_overlay\":\"The overlay address of the applicant.\"}},\"pause()\":{\"details\":\"Pause the contract. The contract is provably stopped by renouncing the pauser role and the admin role after pausing, can only be called by the `PAUSER`\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"reveal(bytes32,uint8,bytes32,bytes32)\":{\"params\":{\"_depth\":\"The reported depth.\",\"_hash\":\"The reserve commitment hash.\",\"_overlay\":\"The overlay address of the applicant.\",\"_revealNonce\":\"The nonce used to generate the commit that is being revealed.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unPause()\":{\"details\":\"Unpause the contract, can only be called by the pauser when paused\"},\"wrapCommit(bytes32,uint8,bytes32,bytes32)\":{\"details\":\"_revealNonce_ must be randomly generated, used once and kept secret until the reveal phase.\",\"params\":{\"_depth\":\"The reported depth.\",\"_hash\":\"The reserve commitment hash.\",\"_overlay\":\"The overlay address of the applicant.\",\"revealNonce\":\"A random, single use, secret nonce.\"}}},\"title\":\"Redistribution contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim((bytes32[],bytes32,bytes32[],bytes32,uint64,bytes32[],(bytes,bytes32,uint64,uint64),(address,bytes,bytes32,bytes32)[]),(bytes32[],bytes32,bytes32[],bytes32,uint64,bytes32[],(bytes,bytes32,uint64,uint64),(address,bytes,bytes32,bytes32)[]),(bytes32[],bytes32,bytes32[],bytes32,uint64,bytes32[],(bytes,bytes32,uint64,uint64),(address,bytes,bytes32,bytes32)[]))\":{\"notice\":\"Helper function to get this round truth\"},\"commit(bytes32,bytes32,uint64)\":{\"notice\":\"Begin application for a round if eligible. Commit a hashed value for which the pre-image will be subsequently revealed.\"},\"currentMinimumDepth()\":{\"notice\":\"Returns minimum depth reveal has to have to participate in this round\"},\"currentPhaseClaim()\":{\"notice\":\"Returns true if current block is during claim phase.\"},\"currentPhaseCommit()\":{\"notice\":\"Returns true if current block is during commit phase.\"},\"currentPhaseReveal()\":{\"notice\":\"Returns true if current block is during reveal phase.\"},\"currentRound()\":{\"notice\":\"The number of the current round.\"},\"currentRoundAnchor()\":{\"notice\":\"The anchor used to determine eligibility for the current round.\"},\"currentRoundReveals()\":{\"notice\":\"Returns true if current block is during reveal phase.\"},\"currentSeed()\":{\"notice\":\"Returns the current random seed which is used to determine later utilised random numbers. If rounds have elapsed without reveals, hash the seed with an incremented nonce to produce a new random seed and hence a new round anchor.\"},\"inProximity(bytes32,bytes32,uint8)\":{\"notice\":\"Returns true if an overlay address _A_ is within proximity order _minimum_ of _B_.\"},\"isParticipatingInUpcomingRound(bytes32,uint8)\":{\"notice\":\"Determine if a the owner of a given overlay can participate in the upcoming round.\"},\"isWinner(bytes32)\":{\"notice\":\"Determine if a the owner of a given overlay will be the beneficiary of the claim phase.\"},\"nextSeed()\":{\"notice\":\"Returns the seed which will become current once the next commit phase begins. Used to determine what the next round's anchor will be.\"},\"reveal(bytes32,uint8,bytes32,bytes32)\":{\"notice\":\"Reveal the pre-image values used to generate commit provided during this round's commit phase.\"},\"setFreezingParams(uint8,uint8)\":{\"notice\":\"Set freezing parameters\"},\"wrapCommit(bytes32,uint8,bytes32,bytes32)\":{\"notice\":\"Hash the pre-image values to the obsfucated hash.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Redistribution.sol\":\"Redistribution\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"src/Redistribution.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.19;\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./Util/TransformedChunkProof.sol\\\";\\nimport \\\"./Util/ChunkProof.sol\\\";\\nimport \\\"./Util/Signatures.sol\\\";\\nimport \\\"./interface/IPostageStamp.sol\\\";\\n\\ninterface IPriceOracle {\\n    function adjustPrice(uint16 redundancy) external;\\n}\\n\\ninterface IStakeRegistry {\\n    function freezeDeposit(bytes32 overlay, uint256 time) external;\\n\\n    function lastUpdatedBlockNumberOfOverlay(bytes32 overlay) external view returns (uint256);\\n\\n    function ownerOfOverlay(bytes32 overlay) external view returns (address);\\n\\n    function stakeOfOverlay(bytes32 overlay) external view returns (uint256);\\n}\\n\\n/**\\n * @title Redistribution contract\\n * @author The Swarm Authors\\n * @dev Implements a Schelling Co-ordination game to form consensus around the Reserve Commitment hash. This takes\\n * place in three phases: _commit_, _reveal_ and _claim_.\\n *\\n * A node, upon establishing that it _isParticipatingInUpcomingRound_, i.e. it's overlay falls within proximity order\\n * of its reported depth with the _currentRoundAnchor_, prepares a \\\"reserve commitment hash\\\" using the chunks\\n * it currently stores in its reserve and calculates the \\\"storage depth\\\" (see Bee for details). These values, if calculated\\n * honestly, and with the right chunks stored, should be the same for every node in a neighbourhood. This is the Schelling point.\\n * Each eligible node can then use these values, together with a random, single use, secret  _revealNonce_ and their\\n * _overlay_ as the pre-image values for the obsfucated _commit_, using the _wrapCommit_ method.\\n *\\n * Once the _commit_ round has elapsed, participating nodes must provide the values used to calculate their obsfucated\\n * _commit_ hash, which, once verified for correctness and proximity to the anchor are retained in the _currentReveals_.\\n * Nodes that have commited but do not reveal the correct values used to create the pre-image will have their stake\\n * \\\"frozen\\\" for a period of rounds proportional to their reported depth.\\n *\\n * During the _reveal_ round, randomness is updated after every successful reveal. Once the reveal round is concluded,\\n * the _currentRoundAnchor_ is updated and users can determine if they will be eligible their overlay will be eligible\\n * for the next commit phase using _isParticipatingInUpcomingRound_.\\n *\\n * When the _reveal_ phase has been concluded, the claim phase can begin. At this point, the truth teller and winner\\n * are already determined. By calling _isWinner_, an applicant node can run the relevant logic to determine if they have\\n * been selected as the beneficiary of this round. When calling _claim_, the current pot from the PostageStamp contract\\n * is withdrawn and transferred to that beneficiaries address. Nodes that have revealed values that differ from the truth,\\n * have their stakes \\\"frozen\\\" for a period of rounds proportional to their reported depth.\\n */\\n\\ncontract Redistribution is AccessControl, Pausable {\\n    // ----------------------------- Type declarations ------------------------------\\n\\n    // An eligible user may commit to an _obfuscatedHash_ during the commit phase...\\n    struct Commit {\\n        bytes32 overlay;\\n        address owner;\\n        bool revealed;\\n        uint256 stake;\\n        bytes32 obfuscatedHash;\\n        uint256 revealIndex;\\n    }\\n    // ...then provide the actual values that are the constituents of the pre-image of the _obfuscatedHash_\\n    // during the reveal phase.\\n    struct Reveal {\\n        bytes32 overlay;\\n        address owner;\\n        uint8 depth;\\n        uint256 stake;\\n        uint256 stakeDensity;\\n        bytes32 hash;\\n    }\\n\\n    struct ChunkInclusionProof {\\n        bytes32[] proofSegments;\\n        bytes32 proveSegment;\\n        // _RCspan is known for RC 32*32\\n\\n        // Inclusion proof of transformed address\\n        bytes32[] proofSegments2;\\n        bytes32 proveSegment2;\\n        // proveSegmentIndex2 known from deterministic random selection;\\n        uint64 chunkSpan;\\n        bytes32[] proofSegments3;\\n        //  _proveSegment3 known, is equal _proveSegment2\\n        // proveSegmentIndex3 know, is equal _proveSegmentIndex2;\\n        // chunkSpan2 is equal to chunkSpan (as the data is the same)\\n        //\\n        PostageProof postageProof;\\n        SOCProof[] socProof;\\n    }\\n\\n    struct SOCProof {\\n        address signer; // signer Ethereum address to check against\\n        bytes signature;\\n        bytes32 identifier; //\\n        bytes32 chunkAddr; // wrapped chunk address\\n    }\\n\\n    struct PostageProof {\\n        bytes signature;\\n        bytes32 postageId;\\n        uint64 index;\\n        uint64 timeStamp;\\n        // address signer; it is provided by the postage stamp contract\\n        // bytes32 chunkAddr; it equals to the proveSegment argument\\n    }\\n\\n    // The address of the linked PostageStamp contract.\\n    IPostageStamp public PostageContract;\\n    // The address of the linked PriceOracle contract.\\n    IPriceOracle public OracleContract;\\n    // The address of the linked Staking contract.\\n    IStakeRegistry public Stakes;\\n\\n    // Commits for the current round.\\n    Commit[] public currentCommits;\\n    // Reveals for the current round.\\n    Reveal[] public currentReveals;\\n\\n    // The current anchor that being processed for the reveal and claim phases of the round.\\n    bytes32 private currentRevealRoundAnchor;\\n\\n    // The current random value from which we will random.\\n    // inputs for selection of the truth teller and beneficiary.\\n    bytes32 private seed;\\n\\n    // The number of the currently active round phases.\\n    uint64 public currentCommitRound;\\n    uint64 public currentRevealRound;\\n    uint64 public currentClaimRound;\\n\\n    // Settings for slashing and freezing\\n    uint8 private penaltyMultiplierDisagreement = 1;\\n    uint8 private penaltyMultiplierNonRevealed = 2;\\n\\n    // The reveal of the winner of the last round.\\n    Reveal public winner;\\n\\n    // The length of a round in blocks.\\n    uint256 private constant ROUND_LENGTH = 152;\\n\\n    // The miniumum stake allowed to be staked using the Staking contract.\\n    uint64 private constant MIN_STAKE = 100000000000000000;\\n\\n    // alpha=0.097612 beta=0.0716570 k=16\\n    uint256 private constant SAMPLE_MAX_VALUE =\\n        1284401000000000000000000000000000000000000000000000000000000000000000000;\\n\\n    // Maximum value of the keccack256 hash.\\n    bytes32 private constant MAX_H = 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff;\\n\\n    // Role allowed to pause.\\n    bytes32 private immutable PAUSER_ROLE;\\n\\n    // ----------------------------- Events ------------------------------\\n\\n    /**\\n     * @dev Emitted when the winner of a round is selected in the claim phase\\n     */\\n    event WinnerSelected(Reveal winner);\\n\\n    /**\\n     * @dev Emitted when the truth oracle of a round is selected in the claim phase.\\n     */\\n    event TruthSelected(bytes32 hash, uint8 depth);\\n\\n    // Next two events to be removed after testing phase pending some other usefulness being found.\\n    /**\\n     * @dev Emits the number of commits being processed by the claim phase.\\n     */\\n    event CountCommits(uint256 _count);\\n\\n    /**\\n     * @dev Emits the number of reveals being processed by the claim phase.\\n     */\\n    event CountReveals(uint256 _count);\\n\\n    /**\\n     * @dev Logs that an overlay has committed\\n     */\\n    event Committed(uint256 roundNumber, bytes32 overlay);\\n    /**\\n     * @dev Emit from Postagestamp contract valid chunk count at the end of claim\\n     */\\n    event ChunkCount(uint256 validChunkCount);\\n\\n    /**\\n     * @dev Bytes32 anhor of current reveal round\\n     */\\n    event CurrentRevealAnchor(uint256 roundNumber, bytes32 anchor);\\n\\n    /**\\n     * @dev Logs that an overlay has revealed\\n     */\\n    event Revealed(\\n        uint256 roundNumber,\\n        bytes32 overlay,\\n        uint256 stake,\\n        uint256 stakeDensity,\\n        bytes32 reserveCommitment,\\n        uint8 depth\\n    );\\n\\n    /**\\n     * @dev Logs for inclusion proof\\n     */\\n    event transformedChunkAddressFromInclusionProof(uint256 indexInRC, bytes32 chunkAddress);\\n\\n    // ----------------------------- Errors ------------------------------\\n\\n    error NotCommitPhase(); // Game is not in commit phase\\n    error NoCommitsReceived(); // Round didn't receive any commits\\n    error PhaseLastBlock(); // We don't permit commits in last block of the phase\\n    error BelowMinimumStake(); // Node participating in game has stake below minimum treshold\\n    error CommitRoundOver(); // Commit phase in this round is over\\n    error CommitRoundNotStarted(); // Commit phase in this round has not started yet\\n    error NotMatchingOwner(); // Sender of commit is not matching the overlay address\\n    error MustStake2Rounds(); // Before entering the game node must stake 2 rounds prior\\n    error WrongPhase(); // Checking in wrong phase, need to check duing claim phase of current round for next round or commit in current round\\n    error AlreadyCommited(); // Node already commited in this round\\n    error NotRevealPhase(); // Game is not in reveal phase\\n    error OutOfDepthReveal(bytes32); // Anchor is out of reported depth in Reveal phase, anchor data available as argument\\n    error OutOfDepthClaim(uint8); // Anchor is out of reported depth in Claim phase, entryProof index is argument\\n    error OutOfDepth(); // Anchor is out of reported depth\\n    error AlreadyRevealed(); // Node already revealed\\n    error NoMatchingCommit(); // No matching commit and hash\\n    error NotClaimPhase(); // Game is not in the claim phase\\n    error NoReveals(); // Round did not receive any reveals\\n    error FirstRevealDone(); // We don't want to return value after first reveal\\n    error AlreadyClaimed(); // This round was already claimed\\n    error NotAdmin(); // Caller of trx is not admin\\n    error OnlyPauser(); // Only account with pauser role can call pause/unpause\\n    error SocVerificationFailed(bytes32); // Soc verification failed for this element\\n    error SocCalcNotMatching(bytes32); // Soc address calculation does not match with the witness\\n    error IndexOutsideSet(bytes32); // Stamp available: index resides outside of the valid index set\\n    error SigRecoveryFailed(bytes32); // Stamp authorized: signature recovery failed for element\\n    error BalanceValidationFailed(bytes32); // Stamp alive: batch remaining balance validation failed for attached stamp\\n    error BucketDiffers(bytes32); // Stamp aligned: postage bucket differs from address bucket\\n    error InclusionProofFailed(uint8, bytes32);\\n    // 1 = RC inclusion proof failed for element\\n    // 2 = First sister segment in data must match,\\n    // 3 = Inclusion proof failed for original address of element\\n    // 4 = Inclusion proof failed for transformed address of element\\n    error RandomElementCheckFailed(); // Random element order check failed\\n    error LastElementCheckFailed(); // Last element order check failed\\n    error ReserveCheckFailed(); // Reserve size estimation check failed\\n\\n    // ----------------------------- CONSTRUCTOR ------------------------------\\n\\n    /**\\n     * @param staking the address of the linked Staking contract.\\n     * @param postageContract the address of the linked PostageStamp contract.\\n     * @param oracleContract the address of the linked PriceOracle contract.\\n     */\\n    constructor(address staking, address postageContract, address oracleContract, address multisig) {\\n        Stakes = IStakeRegistry(staking);\\n        PostageContract = IPostageStamp(postageContract);\\n        OracleContract = IPriceOracle(oracleContract);\\n        PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, multisig);\\n        _setupRole(PAUSER_ROLE, msg.sender);\\n    }\\n\\n    ////////////////////////////////////////\\n    //           STATE CHANGING           //\\n    ////////////////////////////////////////\\n\\n    /**\\n     * @notice Begin application for a round if eligible. Commit a hashed value for which the pre-image will be\\n     * subsequently revealed.\\n     * @dev If a node's overlay is _inProximity_(_depth_) of the _currentRoundAnchor_, that node may compute an\\n     * _obfuscatedHash_ by providing their _overlay_, reported storage _depth_, reserve commitment _hash_ and a\\n     * randomly generated, and secret _revealNonce_ to the _wrapCommit_ method.\\n     * @param _obfuscatedHash The calculated hash resultant of the required pre-image values.\\n     * @param _overlay The overlay referenced in the pre-image. Must be staked by at least the minimum value,\\n     * and be derived from the same key pair as the message sender.\\n     */\\n    function commit(bytes32 _obfuscatedHash, bytes32 _overlay, uint64 _roundNumber) external whenNotPaused {\\n        uint64 cr = currentRound();\\n        uint256 nstake = Stakes.stakeOfOverlay(_overlay);\\n\\n        if (!currentPhaseCommit()) {\\n            revert NotCommitPhase();\\n        }\\n        if (block.number % ROUND_LENGTH == (ROUND_LENGTH / 4) - 1) {\\n            revert PhaseLastBlock();\\n        }\\n\\n        if (cr > _roundNumber) {\\n            revert CommitRoundOver();\\n        }\\n\\n        if (cr < _roundNumber) {\\n            revert CommitRoundNotStarted();\\n        }\\n\\n        if (nstake < MIN_STAKE) {\\n            revert BelowMinimumStake();\\n        }\\n\\n        if (Stakes.ownerOfOverlay(_overlay) != msg.sender) {\\n            revert NotMatchingOwner();\\n        }\\n\\n        if (Stakes.lastUpdatedBlockNumberOfOverlay(_overlay) >= block.number - 2 * ROUND_LENGTH) {\\n            revert MustStake2Rounds();\\n        }\\n\\n        // if we are in a new commit phase, reset the array of commits and\\n        // set the currentCommitRound to be the current one\\n        if (cr != currentCommitRound) {\\n            delete currentCommits;\\n            currentCommitRound = cr;\\n        }\\n\\n        uint256 commitsArrayLength = currentCommits.length;\\n\\n        for (uint256 i = 0; i < commitsArrayLength; ) {\\n            if (currentCommits[i].overlay == _overlay) {\\n                revert AlreadyCommited();\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        currentCommits.push(\\n            Commit({\\n                overlay: _overlay,\\n                owner: msg.sender,\\n                revealed: false,\\n                stake: nstake,\\n                obfuscatedHash: _obfuscatedHash,\\n                revealIndex: 0\\n            })\\n        );\\n\\n        emit Committed(_roundNumber, _overlay);\\n    }\\n\\n    /**\\n     * @notice Reveal the pre-image values used to generate commit provided during this round's commit phase.\\n     * @param _overlay The overlay address of the applicant.\\n     * @param _depth The reported depth.\\n     * @param _hash The reserve commitment hash.\\n     * @param _revealNonce The nonce used to generate the commit that is being revealed.\\n     */\\n    function reveal(bytes32 _overlay, uint8 _depth, bytes32 _hash, bytes32 _revealNonce) external whenNotPaused {\\n        uint64 cr = currentRound();\\n\\n        if (_depth < currentMinimumDepth()) {\\n            revert OutOfDepth();\\n        }\\n\\n        if (!currentPhaseReveal()) {\\n            revert NotRevealPhase();\\n        }\\n\\n        if (cr != currentCommitRound) {\\n            revert NoCommitsReceived();\\n        }\\n\\n        if (cr != currentRevealRound) {\\n            currentRevealRoundAnchor = currentRoundAnchor();\\n            delete currentReveals;\\n            // We set currentRevealRound ONLY after we set current anchor\\n            currentRevealRound = cr;\\n            emit CurrentRevealAnchor(cr, currentRevealRoundAnchor);\\n            updateRandomness();\\n        }\\n\\n        bytes32 obfuscatedHash = wrapCommit(_overlay, _depth, _hash, _revealNonce);\\n        uint256 id = findCommit(_overlay, obfuscatedHash);\\n        Commit memory revealedCommit = currentCommits[id];\\n\\n        // Check that commit is in proximity of the current anchor\\n        if (!inProximity(revealedCommit.overlay, currentRevealRoundAnchor, _depth)) {\\n            revert OutOfDepthReveal(currentRevealRoundAnchor);\\n        }\\n        // Check that the commit has not already been revealed\\n        if (revealedCommit.revealed) {\\n            revert AlreadyRevealed();\\n        }\\n\\n        currentCommits[id].revealed = true;\\n        currentCommits[id].revealIndex = currentReveals.length;\\n\\n        currentReveals.push(\\n            Reveal({\\n                overlay: revealedCommit.overlay,\\n                owner: revealedCommit.owner,\\n                depth: _depth,\\n                stake: revealedCommit.stake,\\n                stakeDensity: revealedCommit.stake * uint256(2 ** _depth),\\n                hash: _hash\\n            })\\n        );\\n\\n        emit Revealed(\\n            cr,\\n            revealedCommit.overlay,\\n            revealedCommit.stake,\\n            revealedCommit.stake * uint256(2 ** _depth),\\n            _hash,\\n            _depth\\n        );\\n    }\\n\\n    /**\\n     * @notice Helper function to get this round truth\\n     * @dev\\n     */\\n    function claim(\\n        ChunkInclusionProof calldata entryProof1,\\n        ChunkInclusionProof calldata entryProof2,\\n        ChunkInclusionProof calldata entryProofLast\\n    ) external whenNotPaused {\\n        winnerSelection();\\n\\n        Reveal memory winnerSelected = winner;\\n        uint256 indexInRC1;\\n        uint256 indexInRC2;\\n        bytes32 _currentRevealRoundAnchor = currentRevealRoundAnchor;\\n        bytes32 _seed = seed;\\n\\n        // rand(14)\\n        indexInRC1 = uint256(_seed) % 15;\\n        // rand(13)\\n        indexInRC2 = uint256(_seed) % 14;\\n        if (indexInRC2 >= indexInRC1) {\\n            indexInRC2++;\\n        }\\n\\n        if (!inProximity(entryProofLast.proveSegment, _currentRevealRoundAnchor, winnerSelected.depth)) {\\n            revert OutOfDepthClaim(3);\\n        }\\n\\n        inclusionFunction(entryProofLast, 30);\\n        stampFunction(entryProofLast);\\n        socFunction(entryProofLast);\\n\\n        if (!inProximity(entryProof1.proveSegment, _currentRevealRoundAnchor, winnerSelected.depth)) {\\n            revert OutOfDepthClaim(2);\\n        }\\n\\n        inclusionFunction(entryProof1, indexInRC1 * 2);\\n        stampFunction(entryProof1);\\n        socFunction(entryProof1);\\n\\n        if (!inProximity(entryProof2.proveSegment, _currentRevealRoundAnchor, winnerSelected.depth)) {\\n            revert OutOfDepthClaim(1);\\n        }\\n\\n        inclusionFunction(entryProof2, indexInRC2 * 2);\\n        stampFunction(entryProof2);\\n        socFunction(entryProof2);\\n\\n        checkOrder(\\n            indexInRC1,\\n            indexInRC2,\\n            entryProof1.proofSegments[0],\\n            entryProof2.proofSegments[0],\\n            entryProofLast.proofSegments[0]\\n        );\\n\\n        PostageContract.withdraw(winnerSelected.owner);\\n        emit WinnerSelected(winnerSelected);\\n        emit ChunkCount(PostageContract.validChunkCount());\\n    }\\n\\n    function winnerSelection() internal {\\n        uint64 cr = currentRound();\\n\\n        if (!currentPhaseClaim()) {\\n            revert NotClaimPhase();\\n        }\\n\\n        if (cr != currentRevealRound) {\\n            revert NoReveals();\\n        }\\n\\n        if (cr <= currentClaimRound) {\\n            revert AlreadyClaimed();\\n        }\\n\\n        uint256 currentWinnerSelectionSum = 0;\\n        uint256 redundancyCount = 0;\\n        bytes32 randomNumber;\\n        uint256 randomNumberTrunc;\\n\\n        bytes32 truthRevealedHash;\\n        uint8 truthRevealedDepth;\\n        uint256 currentCommitsLength = currentCommits.length;\\n\\n        emit CountCommits(currentCommitsLength);\\n        emit CountReveals(currentReveals.length);\\n\\n        (truthRevealedHash, truthRevealedDepth) = getCurrentTruth();\\n        emit TruthSelected(truthRevealedHash, truthRevealedDepth);\\n        string memory winnerSelectionAnchor = currentWinnerSelectionAnchor();\\n\\n        for (uint256 i = 0; i < currentCommitsLength; ) {\\n            Commit memory currentCommit = currentCommits[i];\\n            uint256 revIndex = currentCommit.revealIndex;\\n            Reveal memory currentReveal = currentReveals[revIndex];\\n\\n            // Select winner with valid truth\\n            if (\\n                currentCommit.revealed &&\\n                truthRevealedHash == currentReveal.hash &&\\n                truthRevealedDepth == currentReveal.depth\\n            ) {\\n                currentWinnerSelectionSum += currentReveal.stakeDensity;\\n                randomNumber = keccak256(abi.encodePacked(winnerSelectionAnchor, redundancyCount));\\n                randomNumberTrunc = uint256(randomNumber & MAX_H);\\n\\n                if (randomNumberTrunc * currentWinnerSelectionSum < currentReveal.stakeDensity * (uint256(MAX_H) + 1)) {\\n                    winner = currentReveal;\\n                }\\n\\n                redundancyCount++;\\n            }\\n\\n            // Freeze deposit if any truth is false\\n            if (\\n                currentCommit.revealed &&\\n                (truthRevealedHash != currentReveal.hash || truthRevealedDepth != currentReveal.depth)\\n            ) {\\n                Stakes.freezeDeposit(\\n                    currentReveal.overlay,\\n                    penaltyMultiplierDisagreement * ROUND_LENGTH * uint256(2 ** truthRevealedDepth)\\n                );\\n            }\\n\\n            // Slash deposits if revealed is false\\n            if (!currentCommit.revealed) {\\n                // slash in later phase (ph5)\\n                // Stakes.slashDeposit(currentCommits[i].overlay, currentCommits[i].stake);\\n                Stakes.freezeDeposit(\\n                    currentCommit.overlay,\\n                    penaltyMultiplierNonRevealed * ROUND_LENGTH * uint256(2 ** truthRevealedDepth)\\n                );\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        OracleContract.adjustPrice(uint16(redundancyCount));\\n        currentClaimRound = cr;\\n    }\\n\\n    function inclusionFunction(ChunkInclusionProof calldata entryProof, uint256 indexInRC) internal {\\n        uint256 randomChunkSegmentIndex = uint256(seed) % 128;\\n        bytes32 calculatedTransformedAddr = TransformedBMTChunk.transformedChunkAddressFromInclusionProof(\\n            entryProof.proofSegments3,\\n            entryProof.proveSegment2,\\n            randomChunkSegmentIndex,\\n            entryProof.chunkSpan,\\n            currentRevealRoundAnchor\\n        );\\n\\n        emit transformedChunkAddressFromInclusionProof(indexInRC, calculatedTransformedAddr);\\n\\n        if (\\n            winner.hash !=\\n            BMTChunk.chunkAddressFromInclusionProof(\\n                entryProof.proofSegments,\\n                entryProof.proveSegment,\\n                indexInRC,\\n                32 * 32\\n            )\\n        ) {\\n            revert InclusionProofFailed(1, calculatedTransformedAddr);\\n        }\\n\\n        if (entryProof.proofSegments2[0] != entryProof.proofSegments3[0]) {\\n            revert InclusionProofFailed(2, calculatedTransformedAddr);\\n        }\\n\\n        bytes32 originalAddress = entryProof.socProof.length > 0\\n            ? entryProof.socProof[0].chunkAddr // soc attestation in socFunction\\n            : entryProof.proveSegment;\\n\\n        if (\\n            originalAddress !=\\n            BMTChunk.chunkAddressFromInclusionProof(\\n                entryProof.proofSegments2,\\n                entryProof.proveSegment2,\\n                randomChunkSegmentIndex,\\n                entryProof.chunkSpan\\n            )\\n        ) {\\n            revert InclusionProofFailed(3, calculatedTransformedAddr);\\n        }\\n\\n        // In case of SOC, the transformed address is hashed together with its address in the sample\\n        if (entryProof.socProof.length > 0) {\\n            calculatedTransformedAddr = keccak256(\\n                abi.encode(\\n                    entryProof.proveSegment, // SOC address\\n                    calculatedTransformedAddr\\n                )\\n            );\\n        }\\n\\n        if (entryProof.proofSegments[0] != calculatedTransformedAddr) {\\n            revert InclusionProofFailed(4, calculatedTransformedAddr);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set freezing parameters\\n     */\\n    function setFreezingParams(uint8 _penaltyMultiplierDisagreement, uint8 _penaltyMultiplierNonRevealed) external {\\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) {\\n            revert NotAdmin();\\n        }\\n\\n        penaltyMultiplierDisagreement = _penaltyMultiplierDisagreement;\\n        penaltyMultiplierNonRevealed = _penaltyMultiplierNonRevealed;\\n    }\\n\\n    /**\\n     * @notice Updates the source of randomness. Uses block.difficulty in pre-merge chains, this is substituted\\n     * to block.prevrandao in post merge chains.\\n     */\\n    function updateRandomness() private {\\n        seed = keccak256(abi.encode(seed, block.prevrandao));\\n    }\\n\\n    /**\\n    * @dev Pause the contract. The contract is provably stopped by renouncing\\n     the pauser role and the admin role after pausing, can only be called by the `PAUSER`\\n     */\\n    function pause() public {\\n        if (!hasRole(PAUSER_ROLE, msg.sender)) {\\n            revert OnlyPauser();\\n        }\\n\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpause the contract, can only be called by the pauser when paused\\n     */\\n    function unPause() public {\\n        if (!hasRole(PAUSER_ROLE, msg.sender)) {\\n            revert OnlyPauser();\\n        }\\n        _unpause();\\n    }\\n\\n    ////////////////////////////////////////\\n    //            STATE READING           //\\n    ////////////////////////////////////////\\n\\n    // ----------------------------- Anchor calculations ------------------------------\\n\\n    /**\\n     * @notice Returns the current random seed which is used to determine later utilised random numbers.\\n     * If rounds have elapsed without reveals, hash the seed with an incremented nonce to produce a new\\n     * random seed and hence a new round anchor.\\n     */\\n    function currentSeed() public view returns (bytes32) {\\n        uint64 cr = currentRound();\\n        bytes32 currentSeedValue = seed;\\n\\n        if (cr > currentRevealRound + 1) {\\n            uint256 difference = cr - currentRevealRound - 1;\\n            currentSeedValue = keccak256(abi.encodePacked(currentSeedValue, difference));\\n        }\\n\\n        return currentSeedValue;\\n    }\\n\\n    /**\\n     * @notice Returns the seed which will become current once the next commit phase begins.\\n     * Used to determine what the next round's anchor will be.\\n     */\\n    function nextSeed() public view returns (bytes32) {\\n        uint64 cr = currentRound() + 1;\\n        bytes32 currentSeedValue = seed;\\n\\n        if (cr > currentRevealRound + 1) {\\n            uint256 difference = cr - currentRevealRound - 1;\\n            currentSeedValue = keccak256(abi.encodePacked(currentSeedValue, difference));\\n        }\\n\\n        return currentSeedValue;\\n    }\\n\\n    /**\\n     * @notice The random value used to choose the selected truth teller.\\n     */\\n    function currentTruthSelectionAnchor() private view returns (string memory) {\\n        if (!currentPhaseClaim()) {\\n            revert NotClaimPhase();\\n        }\\n\\n        uint64 cr = currentRound();\\n        if (cr != currentRevealRound) {\\n            revert NoReveals();\\n        }\\n\\n        return string(abi.encodePacked(seed, \\\"0\\\"));\\n    }\\n\\n    /**\\n     * @notice The random value used to choose the selected beneficiary.\\n     */\\n    function currentWinnerSelectionAnchor() private view returns (string memory) {\\n        if (!currentPhaseClaim()) {\\n            revert NotClaimPhase();\\n        }\\n        uint64 cr = currentRound();\\n        if (cr != currentRevealRound) {\\n            revert NoReveals();\\n        }\\n\\n        return string(abi.encodePacked(seed, \\\"1\\\"));\\n    }\\n\\n    /**\\n     * @notice The anchor used to determine eligibility for the current round.\\n     * @dev A node must be within proximity order of less than or equal to the storage depth they intend to report.\\n     */\\n    function currentRoundAnchor() public view returns (bytes32 returnVal) {\\n        // This will be called in reveal phase and set as currentRevealRoundAnchor or in\\n        // commit phase when checking eligibility for next round by isParticipatingInUpcomingRound\\n        if (currentPhaseCommit() || (currentRound() > currentRevealRound && !currentPhaseClaim())) {\\n            return currentSeed();\\n        }\\n\\n        // This will be called by isParticipatingInUpcomingRound check in claim phase\\n        if (currentPhaseClaim()) {\\n            return nextSeed();\\n        }\\n\\n        // Without this, this function will output 0x0 after first reveal which is value and we prefere it reverts\\n        if (currentPhaseReveal() && currentRound() == currentRevealRound) {\\n            revert FirstRevealDone();\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns true if an overlay address _A_ is within proximity order _minimum_ of _B_.\\n     * @param A An overlay address to compare.\\n     * @param B An overlay address to compare.\\n     * @param minimum Minimum proximity order.\\n     */\\n    function inProximity(bytes32 A, bytes32 B, uint8 minimum) public pure returns (bool) {\\n        if (minimum == 0) {\\n            return true;\\n        }\\n        return uint256(A ^ B) < uint256(2 ** (256 - minimum));\\n    }\\n\\n    // ----------------------------- Commit ------------------------------\\n\\n    /**\\n     * @notice The number of the current round.\\n     */\\n    function currentRound() public view returns (uint64) {\\n        return uint64(block.number / ROUND_LENGTH);\\n    }\\n\\n    /**\\n     * @notice Returns true if current block is during commit phase.\\n     */\\n    function currentPhaseCommit() public view returns (bool) {\\n        if (block.number % ROUND_LENGTH < ROUND_LENGTH / 4) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Determine if a the owner of a given overlay can participate in the upcoming round.\\n     * @param overlay The overlay address of the applicant.\\n     * @param depth The storage depth the applicant intends to report.\\n     */\\n    function isParticipatingInUpcomingRound(bytes32 overlay, uint8 depth) public view returns (bool) {\\n        if (currentPhaseReveal()) {\\n            revert WrongPhase();\\n        }\\n\\n        if (Stakes.lastUpdatedBlockNumberOfOverlay(overlay) >= block.number - 2 * ROUND_LENGTH) {\\n            revert MustStake2Rounds();\\n        }\\n\\n        if (Stakes.stakeOfOverlay(overlay) < MIN_STAKE) {\\n            revert BelowMinimumStake();\\n        }\\n\\n        return inProximity(overlay, currentRoundAnchor(), depth);\\n    }\\n\\n    // ----------------------------- Reveal ------------------------------\\n\\n    /**\\n     * @notice Returns minimum depth reveal has to have to participate in this round\\n     */\\n    function currentMinimumDepth() public view returns (uint8) {\\n        // We are checking value in reveal phase, as the currentCommitRound is set to the current round\\n        // but the currentClaimRound is still set to the last time claim was made\\n        // We add 1 to ensure that for the next round the minimum depth is the same as last winner depth\\n\\n        uint256 difference = currentCommitRound - currentClaimRound;\\n        uint8 skippedRounds = uint8(difference > 254 ? 254 : difference) + 1;\\n\\n        uint8 lastWinnerDepth = winner.depth;\\n\\n        // We ensure that skippedRounds is not bigger than lastWinnerDepth, because of overflow\\n        return skippedRounds >= lastWinnerDepth ? 0 : lastWinnerDepth - skippedRounds;\\n    }\\n\\n    /**\\n     * @notice Helper function to get this node reveal in commits\\n     * @dev\\n     */\\n    function findCommit(bytes32 _overlay, bytes32 _obfuscatedHash) internal view returns (uint256) {\\n        for (uint256 i = 0; i < currentCommits.length; ) {\\n            if (currentCommits[i].overlay == _overlay && _obfuscatedHash == currentCommits[i].obfuscatedHash) {\\n                return i;\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        revert NoMatchingCommit();\\n    }\\n\\n    /**\\n     * @notice Hash the pre-image values to the obsfucated hash.\\n     * @dev _revealNonce_ must be randomly generated, used once and kept secret until the reveal phase.\\n     * @param _overlay The overlay address of the applicant.\\n     * @param _depth The reported depth.\\n     * @param _hash The reserve commitment hash.\\n     * @param revealNonce A random, single use, secret nonce.\\n     */\\n    function wrapCommit(\\n        bytes32 _overlay,\\n        uint8 _depth,\\n        bytes32 _hash,\\n        bytes32 revealNonce\\n    ) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_overlay, _depth, _hash, revealNonce));\\n    }\\n\\n    /**\\n     * @notice Returns true if current block is during reveal phase.\\n     */\\n    function currentPhaseReveal() public view returns (bool) {\\n        uint256 number = block.number % ROUND_LENGTH;\\n        if (number >= ROUND_LENGTH / 4 && number < ROUND_LENGTH / 2) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Returns true if current block is during reveal phase.\\n     */\\n    function currentRoundReveals() public view returns (Reveal[] memory) {\\n        if (!currentPhaseClaim()) {\\n            revert NotClaimPhase();\\n        }\\n        uint64 cr = currentRound();\\n        if (cr != currentRevealRound) {\\n            revert NoReveals();\\n        }\\n\\n        return currentReveals;\\n    }\\n\\n    // ----------------------------- Claim  ------------------------------\\n\\n    /**\\n     * @notice Returns true if current block is during claim phase.\\n     */\\n    function currentPhaseClaim() public view returns (bool) {\\n        if (block.number % ROUND_LENGTH >= ROUND_LENGTH / 2) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function getCurrentTruth() internal view returns (bytes32 Hash, uint8 Depth) {\\n        uint256 currentSum;\\n        bytes32 randomNumber;\\n        uint256 randomNumberTrunc;\\n\\n        bytes32 truthRevealedHash;\\n        uint8 truthRevealedDepth;\\n        uint256 revIndex;\\n        string memory truthSelectionAnchor = currentTruthSelectionAnchor();\\n        uint256 commitsArrayLength = currentCommits.length;\\n\\n        for (uint256 i = 0; i < commitsArrayLength; ) {\\n            if (currentCommits[i].revealed) {\\n                revIndex = currentCommits[i].revealIndex;\\n                currentSum += currentReveals[revIndex].stakeDensity;\\n                randomNumber = keccak256(abi.encodePacked(truthSelectionAnchor, i));\\n                randomNumberTrunc = uint256(randomNumber & MAX_H);\\n\\n                // question is whether randomNumber / MAX_H < probability\\n                // where probability is stakeDensity / currentSum\\n                // to avoid resorting to floating points all divisions should be\\n                // simplified with multiplying both sides (as long as divisor > 0)\\n                // randomNumber / (MAX_H + 1) < stakeDensity / currentSum\\n                // ( randomNumber / (MAX_H + 1) ) * currentSum < stakeDensity\\n                // randomNumber * currentSum < stakeDensity * (MAX_H + 1)\\n                if (randomNumberTrunc * currentSum < currentReveals[revIndex].stakeDensity * (uint256(MAX_H) + 1)) {\\n                    truthRevealedHash = currentReveals[revIndex].hash;\\n                    truthRevealedDepth = currentReveals[revIndex].depth;\\n                }\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return (truthRevealedHash, truthRevealedDepth);\\n    }\\n\\n    /**\\n     * @notice Determine if a the owner of a given overlay will be the beneficiary of the claim phase.\\n     * @param _overlay The overlay address of the applicant.\\n     */\\n    function isWinner(bytes32 _overlay) public view returns (bool) {\\n        if (!currentPhaseClaim()) {\\n            revert NotClaimPhase();\\n        }\\n\\n        uint64 cr = currentRound();\\n        if (cr != currentRevealRound) {\\n            revert NoReveals();\\n        }\\n\\n        if (cr <= currentClaimRound) {\\n            revert AlreadyClaimed();\\n        }\\n\\n        uint256 currentWinnerSelectionSum;\\n        bytes32 winnerIs;\\n        bytes32 randomNumber;\\n        uint256 randomNumberTrunc;\\n        bytes32 truthRevealedHash;\\n        uint8 truthRevealedDepth;\\n        uint256 revIndex;\\n        string memory winnerSelectionAnchor = currentWinnerSelectionAnchor();\\n        uint256 redundancyCount = 0;\\n\\n        // Get current truth\\n        (truthRevealedHash, truthRevealedDepth) = getCurrentTruth();\\n        uint256 commitsArrayLength = currentCommits.length;\\n\\n        for (uint256 i = 0; i < commitsArrayLength; ) {\\n            revIndex = currentCommits[i].revealIndex;\\n\\n            // Deterministically read winner\\n            if (\\n                currentCommits[i].revealed &&\\n                truthRevealedHash == currentReveals[revIndex].hash &&\\n                truthRevealedDepth == currentReveals[revIndex].depth\\n            ) {\\n                currentWinnerSelectionSum += currentReveals[revIndex].stakeDensity;\\n                randomNumber = keccak256(abi.encodePacked(winnerSelectionAnchor, redundancyCount));\\n                randomNumberTrunc = uint256(randomNumber & MAX_H);\\n\\n                if (\\n                    randomNumberTrunc * currentWinnerSelectionSum <\\n                    currentReveals[revIndex].stakeDensity * (uint256(MAX_H) + 1)\\n                ) {\\n                    winnerIs = currentReveals[revIndex].overlay;\\n                }\\n\\n                redundancyCount++;\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return (winnerIs == _overlay);\\n    }\\n\\n    // ----------------------------- Claim verifications  ------------------------------\\n\\n    function socFunction(ChunkInclusionProof calldata entryProof) internal pure {\\n        if (entryProof.socProof.length == 0) return;\\n\\n        if (\\n            !Signatures.socVerify(\\n                entryProof.socProof[0].signer, // signer Ethereum address to check against\\n                entryProof.socProof[0].signature,\\n                entryProof.socProof[0].identifier,\\n                entryProof.socProof[0].chunkAddr\\n            )\\n        ) {\\n            revert SocVerificationFailed(entryProof.socProof[0].chunkAddr);\\n        }\\n\\n        if (\\n            calculateSocAddress(entryProof.socProof[0].identifier, entryProof.socProof[0].signer) !=\\n            entryProof.proveSegment\\n        ) {\\n            revert SocCalcNotMatching(entryProof.socProof[0].chunkAddr);\\n        }\\n    }\\n\\n    function stampFunction(ChunkInclusionProof calldata entryProof) internal view {\\n        (address batchOwner, uint8 batchDepth, uint8 bucketDepth, , , ) = PostageContract.batches(\\n            entryProof.postageProof.postageId\\n        );\\n        // authentic\\n        uint32 postageIndex = getPostageIndex(entryProof.postageProof.index);\\n        uint256 maxPostageIndex = postageStampIndexCount(batchDepth, bucketDepth);\\n        // available\\n        if (postageIndex >= maxPostageIndex) {\\n            revert IndexOutsideSet(entryProof.postageProof.postageId);\\n        }\\n\\n        // alive\\n        if (\\n            PostageContract.remainingBalance(entryProof.postageProof.postageId) <\\n            PostageContract.minimumInitialBalancePerChunk()\\n        ) {\\n            revert BalanceValidationFailed(entryProof.postageProof.postageId);\\n        }\\n\\n        // aligned\\n        uint64 postageBucket = getPostageBucket(entryProof.postageProof.index);\\n        uint64 addressBucket = addressToBucket(entryProof.proveSegment, bucketDepth);\\n        if (postageBucket != addressBucket) {\\n            revert BucketDiffers(entryProof.postageProof.postageId);\\n        }\\n\\n        // authorized\\n        if (\\n            !Signatures.postageVerify(\\n                batchOwner,\\n                entryProof.postageProof.signature,\\n                entryProof.proveSegment,\\n                entryProof.postageProof.postageId,\\n                entryProof.postageProof.index,\\n                entryProof.postageProof.timeStamp\\n            )\\n        ) {\\n            revert SigRecoveryFailed(entryProof.postageProof.postageId);\\n        }\\n    }\\n\\n    function addressToBucket(bytes32 swarmAddress, uint8 bucketDepth) internal pure returns (uint32) {\\n        uint32 prefix = uint32(uint256(swarmAddress) >> (256 - 32));\\n        return prefix >> (32 - bucketDepth);\\n    }\\n\\n    function postageStampIndexCount(uint8 postageDepth, uint8 bucketDepth) internal pure returns (uint256) {\\n        return 1 << (postageDepth - bucketDepth);\\n    }\\n\\n    function getPostageIndex(uint64 signedIndex) internal pure returns (uint32) {\\n        return uint32(signedIndex);\\n    }\\n\\n    function getPostageBucket(uint64 signedIndex) internal pure returns (uint64) {\\n        return uint32(signedIndex >> 32);\\n    }\\n\\n    function calculateSocAddress(bytes32 identifier, address signer) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(identifier, signer));\\n    }\\n\\n    function checkOrder(uint256 a, uint256 b, bytes32 trA1, bytes32 trA2, bytes32 trALast) internal pure {\\n        if (a < b) {\\n            if (uint256(trA1) >= uint256(trA2)) {\\n                revert RandomElementCheckFailed();\\n            }\\n            if (uint256(trA2) >= uint256(trALast)) {\\n                revert LastElementCheckFailed();\\n            }\\n        } else {\\n            if (uint256(trA2) >= uint256(trA1)) {\\n                revert RandomElementCheckFailed();\\n            }\\n            if (uint256(trA1) >= uint256(trALast)) {\\n                revert LastElementCheckFailed();\\n            }\\n        }\\n\\n        estimateSize(trALast);\\n    }\\n\\n    function estimateSize(bytes32 trALast) internal pure {\\n        if (uint256(trALast) >= SAMPLE_MAX_VALUE) {\\n            revert ReserveCheckFailed();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x01445bcc44bd87449511b0fc805705fd3ac0baa450ea3b2f29aa81690e1db22f\",\"license\":\"BSD-3-Clause\"},\"src/Util/ChunkProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nlibrary BMTChunk {\\n    // max chunk payload size\\n    uint256 public constant MAX_CHUNK_PAYLOAD_SIZE = 4096;\\n    // segment byte size\\n    uint256 public constant SEGMENT_SIZE = 32;\\n\\n    /**\\n     * @notice          Changes the endianness of a uint64.\\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n     * @param _b        The unsigned integer to reverse\\n     * @return          v - The reversed value\\n     */\\n    function reverseUint64(uint64 _b) public pure returns (uint64) {\\n        uint256 v = _b;\\n\\n        // swap bytes\\n        v =\\n            ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\n            ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n        // swap 2-byte long pairs\\n        v =\\n            ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\n            ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n        // swap 4-byte long pairs\\n        v =\\n            ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\n            ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n\\n        return uint64(v);\\n    }\\n\\n    /** Calculates the root hash from the provided inclusion proof segments and its corresponding segment index\\n     * @param _proofSegments Proof segments.\\n     * @param _proveSegment Segment to prove.\\n     * @param _proveSegmentIndex Prove segment index\\n     * @return _calculatedHash chunk hash\\n     */\\n    function rootHashFromInclusionProof(\\n        bytes32[] memory _proofSegments,\\n        bytes32 _proveSegment,\\n        uint256 _proveSegmentIndex\\n    ) internal pure returns (bytes32 _calculatedHash) {\\n        _calculatedHash = _proveSegment;\\n        for (uint256 i = 0; i < _proofSegments.length; i++) {\\n            bool mergeFromRight = _proveSegmentIndex % 2 == 0;\\n            _calculatedHash = mergeSegment(_calculatedHash, _proofSegments[i], mergeFromRight);\\n            _proveSegmentIndex >>= 1;\\n        }\\n        return _calculatedHash;\\n    }\\n\\n    /**\\n     * Calculate the chunk address from the Binary Merkle Tree of the chunk data\\n     *\\n     * The BMT chunk address is the hash of the 8 byte span and the root\\n     * hash of a binary Merkle tree (BMT) built on the 32-byte segments\\n     * of the underlying data.\\n     * @param _proofSegments Proof segments.\\n     * @param _proveSegment Segment to prove.\\n     * @param _proveSegmentIndex Prove segment index\\n     * @param _chunkSpan chunk bytes length\\n     * @return _chunkHash chunk hash\\n     */\\n    function chunkAddressFromInclusionProof(\\n        bytes32[] memory _proofSegments,\\n        bytes32 _proveSegment,\\n        uint256 _proveSegmentIndex,\\n        uint64 _chunkSpan\\n    ) internal pure returns (bytes32) {\\n        bytes32 rootHash = rootHashFromInclusionProof(_proofSegments, _proveSegment, _proveSegmentIndex);\\n        return keccak256(abi.encodePacked(reverseUint64(_chunkSpan), rootHash));\\n    }\\n\\n    function mergeSegment(\\n        bytes32 _calculatedHash,\\n        bytes32 _proofSegment,\\n        bool mergeFromRight\\n    ) internal pure returns (bytes32 res) {\\n        if (mergeFromRight) {\\n            res = keccak256(abi.encode(_calculatedHash, _proofSegment));\\n        } else {\\n            res = keccak256(abi.encode(_proofSegment, _calculatedHash));\\n        }\\n        return res;\\n    }\\n}\\n\",\"keccak256\":\"0xe4a86f2002b8b8fc4c955537d6b80ba42fb04a816e783ddbd05f0484b013938a\",\"license\":\"MIT\"},\"src/Util/Signatures.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nlibrary Signatures {\\n    error InvalidSignatureLength();\\n\\n    /** Hash of the message to sign */\\n    function getPostageMessageHash(\\n        bytes32 _chunkAddr,\\n        bytes32 _batchId,\\n        uint64 _index,\\n        uint64 _timeStamp\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_chunkAddr, _batchId, _index, _timeStamp));\\n    }\\n\\n    function postageVerify(\\n        address _signer, // signer Ethereum address to check against\\n        bytes memory _signature,\\n        bytes32 _chunkAddr,\\n        bytes32 _postageId,\\n        uint64 _index,\\n        uint64 _timeStamp\\n    ) internal pure returns (bool) {\\n        bytes32 messageHash = getPostageMessageHash(_chunkAddr, _postageId, _index, _timeStamp);\\n        bytes32 ethMessageHash = getEthSignedMessageHash(messageHash);\\n\\n        return recoverSigner(ethMessageHash, _signature) == _signer;\\n    }\\n\\n    function getEthSignedMessageHash(bytes32 _messageHash) internal pure returns (bytes32) {\\n        /*\\n        Signature is produced by signing a keccak256 hash with the following format:\\n        \\\"\\\\x19Ethereum Signed Message\\\\n\\\" + len(msg) + msg\\n        */\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _messageHash));\\n    }\\n\\n    function recoverSigner(\\n        bytes32 _ethSignedMessageHash, // it has to be prefixed message: https://ethereum.stackexchange.com/questions/19582/does-ecrecover-in-solidity-expects-the-x19ethereum-signed-message-n-prefix/21037\\n        bytes memory _signature\\n    ) internal pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\\n\\n        return ecrecover(_ethSignedMessageHash, v, r, s);\\n    }\\n\\n    function splitSignature(bytes memory sig) internal pure returns (bytes32 r_, bytes32 s_, uint8 v_) {\\n        if (sig.length != 65) {\\n            revert InvalidSignatureLength();\\n        }\\n\\n        assembly {\\n            /*\\n            verbose explanation: https://ethereum.stackexchange.com/questions/135591/split-signature-function-in-solidity-by-example-docs\\n            First 32 bytes stores the length of the signature\\n            add(sig, 32) = pointer of sig + 32\\n            effectively, skips first 32 bytes of signature\\n            mload(p) loads next 32 bytes starting at the memory address p into memory\\n            */\\n\\n            // first 32 bytes, after the length prefix\\n            r_ := mload(add(sig, 32))\\n            // second 32 bytes\\n            s_ := mload(add(sig, 64))\\n            // final byte (first byte of the next 32 bytes)\\n            v_ := byte(0, mload(add(sig, 96)))\\n        }\\n\\n        // implicitly return (r, s, v)\\n    }\\n\\n    function getSocMessageHash(bytes32 _identifier, bytes32 _chunkAddr) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_identifier, _chunkAddr));\\n    }\\n\\n    function socVerify(\\n        address _signer, // signer Ethereum address to check against\\n        bytes memory _signature,\\n        bytes32 _identifier,\\n        bytes32 _chunkAddr\\n    ) internal pure returns (bool) {\\n        bytes32 messageHash = getSocMessageHash(_identifier, _chunkAddr);\\n        bytes32 ethMessageHash = getEthSignedMessageHash(messageHash);\\n\\n        return recoverSigner(ethMessageHash, _signature) == _signer;\\n    }\\n}\\n\",\"keccak256\":\"0x11762639cfa5bd2ea21922f762254c776ce890ab9e4085b3e3d45dbe21867ac8\",\"license\":\"MIT\"},\"src/Util/TransformedChunkProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nlibrary TransformedBMTChunk {\\n    // max chunk payload size\\n    uint256 public constant MAX_CHUNK_PAYLOAD_SIZE = 4096;\\n    // segment byte size\\n    uint256 public constant SEGMENT_SIZE = 32;\\n\\n    /** Calculates the root hash from the provided inclusion proof segments and its corresponding segment index\\n     * @param _proofSegments Proof segments.\\n     * @param _proveSegment Segment to prove.\\n     * @param _proveSegmentIndex Prove segment index\\n     * @return _calculatedHash chunk hash\\n     */\\n    function transformedRootHashFromInclusionProof(\\n        bytes32[] memory _proofSegments,\\n        bytes32 _proveSegment,\\n        uint256 _proveSegmentIndex,\\n        bytes32 key\\n    ) internal pure returns (bytes32 _calculatedHash) {\\n        _calculatedHash = _proveSegment;\\n        for (uint256 i = 0; i < _proofSegments.length; i++) {\\n            bool mergeFromRight = _proveSegmentIndex % 2 == 0 ? true : false;\\n            _calculatedHash = transformedMergeSegment(_calculatedHash, _proofSegments[i], mergeFromRight, key);\\n            _proveSegmentIndex >>= 1;\\n        }\\n\\n        return _calculatedHash;\\n    }\\n\\n    /**\\n     * @notice          Changes the endianness of a uint64.\\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n     * @param _b        The unsigned integer to reverse\\n     * @return          v - The reversed value\\n     */\\n    function reverseUint64(uint64 _b) public pure returns (uint64) {\\n        uint256 v = _b;\\n\\n        // swap bytes\\n        v =\\n            ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\n            ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n        // swap 2-byte long pairs\\n        v =\\n            ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\n            ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n        // swap 4-byte long pairs\\n        v =\\n            ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\n            ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n\\n        return uint64(v);\\n    }\\n\\n    /**\\n     * Calculate the chunk address from the Binary Merkle Tree of the chunk data\\n     *\\n     * The BMT chunk address is the hash of the 8 byte span and the root\\n     * hash of a binary Merkle tree (BMT) built on the 32-byte segments\\n     * of the underlying data.\\n     * @param _proofSegments Proof segments.\\n     * @param _proveSegment Segment to prove.\\n     * @param _proveSegmentIndex Prove segment index\\n     * @param _chunkSpan chunk bytes length\\n     * @return _chunkHash chunk hash\\n     */\\n    function transformedChunkAddressFromInclusionProof(\\n        bytes32[] memory _proofSegments,\\n        bytes32 _proveSegment,\\n        uint256 _proveSegmentIndex,\\n        uint64 _chunkSpan,\\n        bytes32 key\\n    ) internal pure returns (bytes32) {\\n        bytes32 rootHash = transformedRootHashFromInclusionProof(\\n            _proofSegments,\\n            _proveSegment,\\n            _proveSegmentIndex,\\n            key\\n        );\\n        return keccak256(abi.encodePacked(key, reverseUint64(_chunkSpan), rootHash));\\n    }\\n\\n    function transformedMergeSegment(\\n        bytes32 _calculatedHash,\\n        bytes32 _proofSegment,\\n        bool mergeFromRight,\\n        bytes32 key\\n    ) internal pure returns (bytes32 res) {\\n        if (mergeFromRight) {\\n            res = keccak256(abi.encode(key, _calculatedHash, _proofSegment));\\n        } else {\\n            res = keccak256(abi.encode(key, _proofSegment, _calculatedHash));\\n        }\\n        return res;\\n    }\\n}\\n\",\"keccak256\":\"0xf36473af0bec0de80c769b139a09bc0329807cb5c3b6234473601081da14350c\",\"license\":\"MIT\"},\"src/interface/IPostageStamp.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.19;\\n\\ninterface IPostageStamp {\\n    function withdraw(address beneficiary) external;\\n\\n    function validChunkCount() external view returns (uint256);\\n\\n    function batchOwner(bytes32 _batchId) external view returns (address);\\n\\n    function batchDepth(bytes32 _batchId) external view returns (uint8);\\n\\n    function batchBucketDepth(bytes32 _batchId) external view returns (uint8);\\n\\n    function remainingBalance(bytes32 _batchId) external view returns (uint256);\\n\\n    function minimumInitialBalancePerChunk() external view returns (uint256);\\n\\n    function setPrice(uint256 _price) external;\\n\\n    function batches(\\n        bytes32\\n    )\\n        external\\n        view\\n        returns (\\n            address owner,\\n            uint8 depth,\\n            uint8 bucketDepth,\\n            bool immutableFlag,\\n            uint256 normalisedBalance,\\n            uint256 lastUpdatedBlockNumber\\n        );\\n}\\n\",\"keccak256\":\"0xc018ff96e75e773e76e6245a930acc3679667250e345415a38196f1e2ad1de76\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x60a06040526008805461ffff60c01b191661020160c01b1790553480156200002657600080fd5b5060405162004b0e38038062004b0e8339810160408190526200004991620001ad565b60018054600380546001600160a01b03199081166001600160a01b03898116919091179092556001600160a81b03199092166101008783160217909255600280549091169184169190911790557f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a608052620000c7600082620000e0565b608051620000d69033620000e0565b505050506200020a565b620000ec8282620000f0565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620000ec576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556200014c3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b80516001600160a01b0381168114620001a857600080fd5b919050565b60008060008060808587031215620001c457600080fd5b620001cf8562000190565b9350620001df6020860162000190565b9250620001ef6040860162000190565b9150620001ff6060860162000190565b905092959194509250565b6080516148e16200022d600039600081816110910152611f1a01526148e16000f3fe608060405234801561001057600080fd5b506004361061025c5760003560e01c806382b39b1b11610145578063b78a52a7116100bd578063d1e8b63d1161008c578063dfbf53ae11610071578063dfbf53ae1461058a578063f7b188a5146105ba578063fb00f2f3146105c257600080fd5b8063d1e8b63d1461056f578063d547741f1461057757600080fd5b8063b78a52a71461051c578063c1d810d51461052f578063c46b402914610542578063ce9877451461055c57600080fd5b80638d8b64281161011457806391d14854116100f957806391d14854146104ca578063a217fddf14610501578063aeace9dc1461050957600080fd5b80638d8b6428146104af57806391276bec146104b757600080fd5b806382b39b1b1461044757806383220626146104975780638456cb591461049f5780638a19c8bc146104a757600080fd5b806362fd29ae116101d857806369da9114116101a757806372286cba1161018c57806372286cba146103cb57806377c75d10146104195780637fe019c61461042c57600080fd5b806369da91141461039d5780636f94aaf2146103b057600080fd5b806362fd29ae1461034d57806363f5cf7c1461035557806364c34a851461036857806369bfac011461037057600080fd5b80632f2ff15d1161022f57806336568abe1161021457806336568abe1461031c5780635c975abb1461032f5780635d4844ea1461033a57600080fd5b80632f2ff15d146102ff5780632f3906da1461031457600080fd5b806301ffc9a7146102615780631835009614610289578063248a9ca3146102b95780632a4e6249146102ea575b600080fd5b61027461026f36600461405c565b6105d5565b60405190151581526020015b60405180910390f35b6001546102a19061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610280565b6102dc6102c7366004614086565b60009081526020819052604090206001015490565b604051908152602001610280565b6102f261063e565b604051610280919061409f565b61031261030d366004614143565b61074b565b005b610274610775565b61031261032a366004614143565b6107bf565b60015460ff16610274565b6003546102a1906001600160a01b031681565b6102dc610850565b61031261036336600461418c565b61091c565b6102dc610c8d565b6008546103849067ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610280565b6002546102a1906001600160a01b031681565b60085461038490600160801b900467ffffffffffffffff1681565b6103de6103d9366004614086565b610d6d565b604080519687526001600160a01b039095166020870152921515938501939093526060840152608083019190915260a082015260c001610280565b610274610427366004614086565b610dc4565b60085461038490600160401b900467ffffffffffffffff1681565b61045a610455366004614086565b611074565b604080519687526001600160a01b03909516602087015260ff909316938501939093526060840152608083019190915260a082015260c001610280565b6102dc611084565b61031261108f565b6103846110f2565b6102746110ff565b6103126104c5366004614231565b611129565b6102746104d8366004614143565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6102dc600081565b610312610517366004614275565b6116af565b61027461052a3660046142a3565b611780565b61031261053d3660046142c8565b61190f565b61054a611dda565b60405160ff9091168152602001610280565b6102dc61056a3660046142c8565b611e5f565b610274611ece565b610312610585366004614143565b611ef3565b600954600a54600b54600c54600d5461045a94936001600160a01b03811693600160a01b90910460ff1692909186565b610312611f18565b6102746105d0366004614305565b611f79565b60006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061063857507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b60606106486110ff565b61066557604051633788c6c160e11b815260040160405180910390fd5b600061066f6110f2565b60085490915067ffffffffffffffff808316600160401b90920416146106a857604051636fbabc7760e01b815260040160405180910390fd5b6005805480602002602001604051908101604052809291908181526020016000905b828210156107415760008481526020908190206040805160c08101825260058602909201805483526001808201546001600160a01b03811685870152600160a01b900460ff169284019290925260028101546060840152600381015460808401526004015460a083015290835290920191016106ca565b5050505091505090565b60008281526020819052604090206001015461076681611fb5565b6107708383611fc2565b505050565b600080610783609843614354565b90506107916004609861437e565b81101580156107aa57506107a76002609861437e565b81105b156107b757600191505090565b600091505090565b6001600160a01b03811633146108425760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b61084c8282612060565b5050565b60008061085b6110f2565b610866906001614392565b6007546008549192509061088c90600160401b900467ffffffffffffffff166001614392565b67ffffffffffffffff168267ffffffffffffffff161115610638576008546000906001906108cb90600160401b900467ffffffffffffffff16856143ba565b6108d591906143ba565b67ffffffffffffffff16905081816040516020016108fd929190918252602082015260400190565b6040516020818303038152906040528051906020012091505092915050565b6109246120df565b61092c612132565b6040805160c0810182526009548152600a546001600160a01b0381166020830152600160a01b900460ff1691810191909152600b546060820152600c546080820152600d5460a0820152600654600754600091829161098c600f82614354565b9350610999600e82614354565b92508383106109b057826109ac816143db565b9350505b6109c38660200135838760400151611f79565b6109e357604051633b5f43a360e01b815260036004820152602401610839565b6109ee86601e612707565b6109f786612a19565b610a0086612e19565b610a138860200135838760400151611f79565b610a3357604051633b5f43a360e01b815260026004820152602401610839565b610a4788610a428660026143f4565b612707565b610a5088612a19565b610a5988612e19565b610a6c8760200135838760400151611f79565b610a8c57604051633b5f43a360e01b815260016004820152602401610839565b610a9b87610a428560026143f4565b610aa487612a19565b610aad87612e19565b610b238484610abc8b8061440b565b6000818110610acd57610acd61445c565b60200291909101359050610ae18b8061440b565b6000818110610af257610af261445c565b60200291909101359050610b068b8061440b565b6000818110610b1757610b1761445c565b905060200201356130ad565b60015460208601516040517f51cff8d90000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015261010090920416906351cff8d990602401600060405180830381600087803b158015610b8c57600080fd5b505af1158015610ba0573d6000803e3d6000fd5b505050507f788e77979e6e6a8a6a5d2c19c58b1ff9671298f54c85ac6f6aa30379aed5861a85604051610bd39190614472565b60405180910390a17fbee3fc8a3523c1a65fa9308ce1f2b8fd90c24975b141b754603194597846e4dd60018054906101000a90046001600160a01b03166001600160a01b0316638a5e8e326040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7191906144c1565b6040519081526020015b60405180910390a15050505050505050565b6000610c97611ece565b80610cd55750600854600160401b900467ffffffffffffffff16610cb96110f2565b67ffffffffffffffff16118015610cd55750610cd36110ff565b155b15610ce757610ce2611084565b905090565b610cef6110ff565b15610cfc57610ce2610850565b610d04610775565b8015610d335750600854600160401b900467ffffffffffffffff16610d276110f2565b67ffffffffffffffff16145b15610d6a576040517f36b7884b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b90565b60048181548110610d7d57600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401549294506001600160a01b03821693600160a01b90920460ff169290919086565b6000610dce6110ff565b610deb57604051633788c6c160e11b815260040160405180910390fd5b6000610df56110f2565b60085490915067ffffffffffffffff808316600160401b9092041614610e2e57604051636fbabc7760e01b815260040160405180910390fd5b60085467ffffffffffffffff600160801b909104811690821611610e6557604051630c8d9eab60e31b815260040160405180910390fd5b600080600080600080600080610e79613143565b90506000610e856131fd565b600454919650945060005b818110156110605760048181548110610eab57610eab61445c565b906000526020600020906005020160040154945060048181548110610ed257610ed261445c565b906000526020600020906005020160010160149054906101000a900460ff168015610f20575060058581548110610f0b57610f0b61445c565b90600052602060002090600502016004015487145b8015610f5e575060058581548110610f3a57610f3a61445c565b600091825260209091206001600590920201015460ff878116600160a01b90920416145b156110585760058581548110610f7657610f7661445c565b9060005260206000209060050201600301548b610f9391906144da565b9a508383604051602001610fa8929190614511565b60408051601f19818403018152919052805160209091012098506fffffffffffffffffffffffffffffffff808a169850610fe39060016144da565b60058681548110610ff657610ff661445c565b90600052602060002090600502016003015461101291906143f4565b61101c8c8a6143f4565b101561104a57600585815481106110355761103561445c565b90600052602060002090600502016000015499505b82611054816143db565b9350505b600101610e90565b505050959099149998505050505050505050565b60058181548110610d7d57600080fd5b6000806108666110f2565b7f000000000000000000000000000000000000000000000000000000000000000060009081526020818152604080832033845290915290205460ff166110e857604051631d77d47760e21b815260040160405180910390fd5b6110f06133b6565b565b6000610ce260984361437e565b600061110d6002609861437e565b611118609843614354565b106111235750600190565b50600090565b6111316120df565b600061113b6110f2565b6003546040516348962b9360e01b8152600481018690529192506000916001600160a01b03909116906348962b9390602401602060405180830381865afa15801561118a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ae91906144c1565b90506111b8611ece565b6111ee576040517fdc816a8700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016111fc6004609861437e565b6112069190614533565b611211609843614354565b03611248576040517f5baef6b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8267ffffffffffffffff168267ffffffffffffffff161115611296576040517f50ff7c0000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8267ffffffffffffffff168267ffffffffffffffff1610156112e4576040517f7a0c0fd600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67016345785d8a000081101561130d57604051638ecf3d0360e01b815260040160405180910390fd5b6003546040517fa0d22b210000000000000000000000000000000000000000000000000000000081526004810186905233916001600160a01b03169063a0d22b2190602401602060405180830381865afa15801561136f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113939190614546565b6001600160a01b0316146113d3576040517fb78fd5c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6113df609860026143f4565b6113e99043614533565b6003546040516376f2098160e11b8152600481018790526001600160a01b039091169063ede4130290602401602060405180830381865afa158015611432573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145691906144c1565b1061147457604051630a0744c560e01b815260040160405180910390fd5b60085467ffffffffffffffff8381169116146114b45761149660046000613ff3565b6008805467ffffffffffffffff191667ffffffffffffffff84161790555b60045460005b818110156115275785600482815481106114d6576114d661445c565b9060005260206000209060050201600001540361151f576040517ffc507a3100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001016114ba565b506040805160c081018252868152336020808301918252600083850181815260608501888152608086018d815260a0870184815260048054600181018255955296517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b60059095029485015594517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c8401805493516001600160a01b0390921674ffffffffffffffffffffffffffffffffffffffffff1990941693909317600160a01b9115159190910217909155517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d82015591517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e83015591517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19f90910155815167ffffffffffffffff871681529081018790527f68e0867601a98978930107aee7f425665e61edd70ca594c68ca5da9e81f84c29910160405180910390a1505050505050565b3360009081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604090205460ff16611717576040517f7bfa4b9f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600880547fffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffff16600160c01b60ff948516027fffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffff1617600160c81b9290931691909102919091179055565b600061178a610775565b156117c1576040517fe2586bcc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6117cd609860026143f4565b6117d79043614533565b6003546040516376f2098160e11b8152600481018690526001600160a01b039091169063ede4130290602401602060405180830381865afa158015611820573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184491906144c1565b1061186257604051630a0744c560e01b815260040160405180910390fd5b6003546040516348962b9360e01b81526004810185905267016345785d8a0000916001600160a01b0316906348962b9390602401602060405180830381865afa1580156118b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d791906144c1565b10156118f657604051638ecf3d0360e01b815260040160405180910390fd5b61190883611902610c8d565b84611f79565b9392505050565b6119176120df565b60006119216110f2565b905061192b611dda565b60ff168460ff16101561196a576040517f83d9b7bd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611972610775565b6119a8576040517fd1088db600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60085467ffffffffffffffff8281169116146119f0576040517f842a9e0a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60085467ffffffffffffffff828116600160401b9092041614611ad857611a15610c8d565b600655611a2460056000613ff3565b600880547fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff16600160401b67ffffffffffffffff8416908102919091179091556006546040805192835260208301919091527ff0ae472da9c8da86bda4991a549c03a3cb328b5f360ea11a5b8814f32bb85176910160405180910390a1611ad8600754604080516020810192909252449082015260600160408051601f198184030181529190528051602090910120600755565b6000611ae686868686611e5f565b90506000611af4878361340a565b9050600060048281548110611b0b57611b0b61445c565b60009182526020918290206040805160c081018252600593909302909101805480845260018201546001600160a01b03811695850195909552600160a01b90940460ff1615159183019190915260028101546060830152600381015460808301526004015460a0820152600654909250611b86919089611f79565b611bc2576006546040517f14ebbbe400000000000000000000000000000000000000000000000000000000815260040161083991815260200190565b806040015115611bfe576040517fa89ac15100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160048381548110611c1357611c1361445c565b906000526020600020906005020160010160146101000a81548160ff02191690831515021790555060058054905060048381548110611c5457611c5461445c565b90600052602060002090600502016004018190555060056040518060c001604052808360000151815260200183602001516001600160a01b031681526020018960ff16815260200183606001518152602001896002611cb39190614647565b8460600151611cc291906143f4565b815260209081018990528254600181810185556000948552938290208351600590920201908155908201519281018054604084015160ff16600160a01b0274ffffffffffffffffffffffffffffffffffffffffff199091166001600160a01b0390951694909417939093179092556060808201516002808501919091556080830151600385015560a0909201516004909301929092558251918301517f13fc17fd71632266fe82092de6dd91a06b4fa68d8dc950492e5421cbed55a6a5928792909190611d90908c90614647565b8560600151611d9f91906143f4565b6040805167ffffffffffffffff909516855260208501939093529183015260608201526080810188905260ff891660a082015260c001610c7b565b6008546000908190611dff9067ffffffffffffffff600160801b8204811691166143ba565b67ffffffffffffffff169050600060fe8211611e1b5781611e1e565b60fe5b611e29906001614656565b600a5490915060ff600160a01b9091048116908216811115611e5457611e4f828261466f565b611e57565b60005b935050505090565b60408051602081018690527fff0000000000000000000000000000000000000000000000000000000000000060f886901b169181019190915260418101839052606181018290526000906081015b6040516020818303038152906040528051906020012090505b949350505050565b6000611edc6004609861437e565b611ee7609843614354565b10156111235750600190565b600082815260208190526040902060010154611f0e81611fb5565b6107708383612060565b7f000000000000000000000000000000000000000000000000000000000000000060009081526020818152604080832033845290915290205460ff16611f7157604051631d77d47760e21b815260040160405180910390fd5b6110f06134b5565b60008160ff16600003611f8e57506001611908565b611f9d60ff8316610100614688565b611fa89060026146a3565b8484181090509392505050565b611fbf81336134ee565b50565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661084c576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905561201c3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff161561084c576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60015460ff16156110f05760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610839565b600061213c6110f2565b90506121466110ff565b61216357604051633788c6c160e11b815260040160405180910390fd5b60085467ffffffffffffffff828116600160401b909204161461219957604051636fbabc7760e01b815260040160405180910390fd5b60085467ffffffffffffffff600160801b9091048116908216116121d057604051630c8d9eab60e31b815260040160405180910390fd5b600454604051818152600091829182918291829182917f6752c5e71c95fb93bc7137adeb115a33fa4e54e2683e33d3f90c2bb1c4b6c2a59060200160405180910390a16005546040519081527f4c03de6a759749c0c9387b7014634dc5c6af610e1366023d90751c783a998f8d9060200160405180910390a16122516131fd565b6040805183815260ff831660208201529295509093507f34e8eda4cd857cd2865becf58a47748f31415f4a382cbb2cc0c64b9a27c717be910160405180910390a1600061229c613143565b905060005b82811015612641576000600482815481106122be576122be61445c565b600091825260208083206040805160c08101825260059485029092018054835260018101546001600160a01b03811694840194909452600160a01b90930460ff16151590820152600282015460608201526003820154608082015260049091015460a0820181905282549194509291908390811061233e5761233e61445c565b60009182526020918290206040805160c0810182526005939093029091018054835260018101546001600160a01b03811694840194909452600160a01b90930460ff1682820152600283015460608301526003830154608083015260049092015460a08201529084015190915080156123ba57508060a0015188145b80156123cf5750806040015160ff168760ff16145b156124c45760808101516123e3908d6144da565b9b50848b6040516020016123f8929190614511565b60408051601f19818403018152919052805160209091012099506fffffffffffffffffffffffffffffffff808b1699506124339060016144da565b816080015161244291906143f4565b61244c8d8b6143f4565b10156124b65780516009556020810151600a8054604084015160ff16600160a01b0274ffffffffffffffffffffffffffffffffffffffffff199091166001600160a01b03909316929092179190911790556060810151600b556080810151600c5560a0810151600d555b8a6124c0816143db565b9b50505b826040015180156124ed57508060a00151881415806124ed5750806040015160ff168760ff1614155b1561258e5760035481516001600160a01b039091169063837fd16a906125148a6002614647565b60085461252d90609890600160c01b900460ff166143f4565b61253791906143f4565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401600060405180830381600087803b15801561257557600080fd5b505af1158015612589573d6000803e3d6000fd5b505050505b82604001516126335760035483516001600160a01b039091169063837fd16a906125b98a6002614647565b6008546125d290609890600160c81b900460ff166143f4565b6125dc91906143f4565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401600060405180830381600087803b15801561261a57600080fd5b505af115801561262e573d6000803e3d6000fd5b505050505b8360010193505050506122a1565b506002546040517fffb98fe300000000000000000000000000000000000000000000000000000000815261ffff891660048201526001600160a01b039091169063ffb98fe390602401600060405180830381600087803b1580156126a457600080fd5b505af11580156126b8573d6000803e3d6000fd5b50506008805467ffffffffffffffff909c16600160801b027fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff909c169b909b17909a5550505050505050505050565b60075460009061271990608090614354565b9050600061277c61272d60a086018661440b565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050505060608601358461277460a0890160808a016146b3565b600654613561565b60408051858152602081018390529192507f94e252069a85aa79db21f5bd8ca4e14dd3a3927aa492711017a2c8ddad95af00910160405180910390a16128046127c5858061440b565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505050506020860135856104006136d9565b600d541461282f5760405163755f0a2560e01b81526001600482015260248101829052604401610839565b61283c60a085018561440b565b600081811061284d5761284d61445c565b90506020020135848060400190612864919061440b565b60008181106128755761287561445c565b90506020020135146128a45760405163755f0a2560e01b81526002600482015260248101829052604401610839565b6000806128b460e087018761440b565b9050116128c55784602001356128fa565b6128d260e086018661440b565b60008181106128e3576128e361445c565b90506020028101906128f591906146ce565b606001355b905061295861290c604087018761440b565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050505060608701358561295360a08a0160808b016146b3565b6136d9565b81146129815760405163755f0a2560e01b81526003600482015260248101839052604401610839565b600061299060e087018761440b565b905011156129c85760408051602080880135908201529081018390526060016040516020818303038152906040528051906020012091505b816129d3868061440b565b60008181106129e4576129e461445c565b9050602002013514612a125760405163755f0a2560e01b815260048181015260248101839052604401610839565b5050505050565b6001546000908190819061010090046001600160a01b031663c81e25ab612a4360c08701876146ce565b602001356040518263ffffffff1660e01b8152600401612a6591815260200190565b60c060405180830381865afa158015612a82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aa691906146ee565b5050509250925092506000612ad5858060c00190612ac491906146ce565b610d6a9060608101906040016146b3565b90506000612ae38484613847565b9050808263ffffffff1610612b3857612aff60c08701876146ce565b602001356040517f1362e4a000000000000000000000000000000000000000000000000000000000815260040161083991815260200190565b60018054906101000a90046001600160a01b03166001600160a01b031663906978426040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bad91906144c1565b60015461010090046001600160a01b031663d71ba7c4612bd060c08a018a6146ce565b602001356040518263ffffffff1660e01b8152600401612bf291815260200190565b602060405180830381865afa158015612c0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c3391906144c1565b1015612c7f57612c4660c08701876146ce565b602001356040517f55a9e7ce00000000000000000000000000000000000000000000000000000000815260040161083991815260200190565b6000612cae612c9160c08901896146ce565b612ca29060608101906040016146b3565b60201c63ffffffff1690565b90506000612cc0886020013586613862565b63ffffffff16905067ffffffffffffffff82168114612d1f57612ce660c08901896146ce565b602001356040517f6dd6a24f00000000000000000000000000000000000000000000000000000000815260040161083991815260200190565b612dc587612d3060c08b018b6146ce565b612d3a9080614766565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050505060208b0135612d8060c08d018d6146ce565b60200135612d9160c08e018e6146ce565b612da29060608101906040016146b3565b612daf60c08f018f6146ce565b612dc09060808101906060016146b3565b613889565b612e0f57612dd660c08901896146ce565b602001356040517fdb12fb9d00000000000000000000000000000000000000000000000000000000815260040161083991815260200190565b5050505050505050565b612e2660e082018261440b565b9050600003612e325750565b612f53612e4260e083018361440b565b6000818110612e5357612e5361445c565b9050602002810190612e6591906146ce565b612e739060208101906147ad565b612e8060e084018461440b565b6000818110612e9157612e9161445c565b9050602002810190612ea391906146ce565b612eb1906020810190614766565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612ef39250505060e085018561440b565b6000818110612f0457612f0461445c565b9050602002810190612f1691906146ce565b60400135612f2760e086018661440b565b6000818110612f3857612f3861445c565b9050602002810190612f4a91906146ce565b60600135613920565b612fc057612f6460e082018261440b565b6000818110612f7557612f7561445c565b9050602002810190612f8791906146ce565b606001356040517fd740df6100000000000000000000000000000000000000000000000000000000815260040161083991815260200190565b602081013561303f612fd560e084018461440b565b6000818110612fe657612fe661445c565b9050602002810190612ff891906146ce565b6040013561300960e085018561440b565b600081811061301a5761301a61445c565b905060200281019061302c91906146ce565b61303a9060208101906147ad565b6139b3565b14611fbf5761305160e082018261440b565b60008181106130625761306261445c565b905060200281019061307491906146ce565b606001356040517f82f2469d00000000000000000000000000000000000000000000000000000000815260040161083991815260200190565b838510156130fa578183106130d557604051633d386eb360e11b815260040160405180910390fd5b8082106130f557604051633588c6d360e11b815260040160405180910390fd5b61313a565b82821061311a57604051633d386eb360e11b815260040160405180910390fd5b80831061313a57604051633588c6d360e11b815260040160405180910390fd5b612a1281613a01565b606061314d6110ff565b61316a57604051633788c6c160e11b815260040160405180910390fd5b60006131746110f2565b60085490915067ffffffffffffffff808316600160401b90920416146131ad57604051636fbabc7760e01b815260040160405180910390fd5b6007546040516020016131e89181527f3100000000000000000000000000000000000000000000000000000000000000602082015260210190565b60405160208183030381529060405291505090565b6000806000806000806000806000613213613a58565b60045490915060005b818110156133a557600481815481106132375761323761445c565b906000526020600020906005020160010160149054906101000a900460ff161561339d576004818154811061326e5761326e61445c565b9060005260206000209060050201600401549350600584815481106132955761329561445c565b906000526020600020906005020160030154896132b291906144da565b985082816040516020016132c7929190614511565b60408051601f19818403018152919052805160209091012097506fffffffffffffffffffffffffffffffff80891697506133029060016144da565b600585815481106133155761331561445c565b90600052602060002090600502016003015461333191906143f4565b61333b8a896143f4565b101561339d57600584815481106133545761335461445c565b90600052602060002090600502016004015495506005848154811061337b5761337b61445c565b906000526020600020906005020160010160149054906101000a900460ff1694505b60010161321c565b509399929850919650505050505050565b6133be6120df565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258335b6040516001600160a01b03909116815260200160405180910390a1565b6000805b60045481101561348257836004828154811061342c5761342c61445c565b90600052602060002090600502016000015414801561346e5750600481815481106134595761345961445c565b90600052602060002090600502016003015483145b1561347a579050610638565b60010161340e565b506040517fd950091500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6134bd613ae1565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa336133ed565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661084c5761351f81613b33565b61352a836020613b45565b60405160200161353b9291906147ca565b60408051601f198184030181529082905262461bcd60e51b82526108399160040161484b565b60008061357087878786613d0a565b905082613675856000808267ffffffffffffffff1690506008817eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff16901b600882901c7eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff161790506010817dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff16901b601082901c7dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff161790506020817bffffffff00000000ffffffff00000000ffffffff00000000ffffffff16901b602082901c7bffffffff00000000ffffffff00000000ffffffff00000000ffffffff1617905080915050919050565b826040516020016136b79392919092835260c09190911b77ffffffffffffffffffffffffffffffffffffffffffffffff19166020830152602882015260480190565b6040516020818303038152906040528051906020012091505095945050505050565b6000806136e7868686613d80565b90506137eb836000808267ffffffffffffffff1690506008817eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff16901b600882901c7eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff161790506010817dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff16901b601082901c7dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff161790506020817bffffffff00000000ffffffff00000000ffffffff00000000ffffffff16901b602082901c7bffffffff00000000ffffffff00000000ffffffff00000000ffffffff1617905080915050919050565b8160405160200161382692919060c09290921b77ffffffffffffffffffffffffffffffffffffffffffffffff19168252600882015260280190565b60405160208183030381529060405280519060200120915050949350505050565b6000613853828461466f565b60ff166001901b905092915050565b600060e083901c61387483602061466f565b60ff168163ffffffff16901c91505092915050565b60008061389886868686613de8565b905060006138f3826040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b9050886001600160a01b0316613909828a613e33565b6001600160a01b0316149998505050505050505050565b60008061392d8484613eb2565b90506000613988826040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b9050866001600160a01b031661399e8288613e33565b6001600160a01b031614979650505050505050565b600082826040516020016139e392919091825260601b6bffffffffffffffffffffffff1916602082015260340190565b60405160208183030381529060405280519060200120905092915050565b7dba1914b54e0348a1028d1a103a95ed55c4004b9d332400000000000000008110611fbf576040517f9fad870f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6060613a626110ff565b613a7f57604051633788c6c160e11b815260040160405180910390fd5b6000613a896110f2565b60085490915067ffffffffffffffff808316600160401b9092041614613ac257604051636fbabc7760e01b815260040160405180910390fd5b6007546040516020016131e8918152600360fc1b602082015260210190565b60015460ff166110f05760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610839565b60606106386001600160a01b03831660145b60606000613b548360026143f4565b613b5f9060026144da565b67ffffffffffffffff811115613b7757613b7761487e565b6040519080825280601f01601f191660200182016040528015613ba1576020820181803683370190505b509050600360fc1b81600081518110613bbc57613bbc61445c565b60200101906001600160f81b031916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110613c0757613c0761445c565b60200101906001600160f81b031916908160001a9053506000613c2b8460026143f4565b613c369060016144da565b90505b6001811115613cbb577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110613c7757613c7761445c565b1a60f81b828281518110613c8d57613c8d61445c565b60200101906001600160f81b031916908160001a90535060049490941c93613cb481614894565b9050613c39565b5083156119085760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610839565b8260005b8551811015613d77576000613d24600286614354565b15613d30576000613d33565b60015b9050613d5a83888481518110613d4b57613d4b61445c565b60200260200101518387613ece565b9250600185901c9450508080613d6f906143db565b915050613d0e565b50949350505050565b8160005b8451811015613de0576000613d9a600285614354565b6000149050613dc383878481518110613db557613db561445c565b602002602001015183613f2e565b9250600184901c9350508080613dd8906143db565b915050613d84565b509392505050565b604080516020810186905290810184905277ffffffffffffffffffffffffffffffffffffffffffffffff1960c084811b8216606084015283901b166068820152600090607001611ead565b600080600080613e4285613f95565b6040805160008152602081018083528b905260ff8316918101919091526060810184905260808101839052929550909350915060019060a0016020604051602081039080840390855afa158015613e9d573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b60408051602081018490529081018290526000906060016139e3565b60008215613f0e57604080516020810184905290810186905260608101859052608001604051602081830303815290604052805190602001209050611ec6565b604080516020810184905290810185905260608101869052608001611ead565b60008115613f67576040805160208101869052908101849052606001604051602081830303815290604052805190602001209050611908565b5050604080516020808201939093528082019390935280518084038201815260609093019052815191012090565b60008060008351604114613fd5576040517f4be6321b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505060208101516040820151606090920151909260009190911a90565b5080546000825560050290600052602060002090810190611fbf91905b8082111561405857600080825560018201805474ffffffffffffffffffffffffffffffffffffffffff1916905560028201819055600382018190556004820155600501614010565b5090565b60006020828403121561406e57600080fd5b81356001600160e01b03198116811461190857600080fd5b60006020828403121561409857600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156141225761410f838551805182526001600160a01b03602082015116602083015260ff6040820151166040830152606081015160608301526080810151608083015260a081015160a08301525050565b9284019260c092909201916001016140bb565b50909695505050505050565b6001600160a01b0381168114611fbf57600080fd5b6000806040838503121561415657600080fd5b8235915060208301356141688161412e565b809150509250929050565b6000610100828403121561418657600080fd5b50919050565b6000806000606084860312156141a157600080fd5b833567ffffffffffffffff808211156141b957600080fd5b6141c587838801614173565b945060208601359150808211156141db57600080fd5b6141e787838801614173565b935060408601359150808211156141fd57600080fd5b5061420a86828701614173565b9150509250925092565b803567ffffffffffffffff8116811461422c57600080fd5b919050565b60008060006060848603121561424657600080fd5b833592506020840135915061425d60408501614214565b90509250925092565b60ff81168114611fbf57600080fd5b6000806040838503121561428857600080fd5b823561429381614266565b9150602083013561416881614266565b600080604083850312156142b657600080fd5b82359150602083013561416881614266565b600080600080608085870312156142de57600080fd5b8435935060208501356142f081614266565b93969395505050506040820135916060013590565b60008060006060848603121561431a57600080fd5b8335925060208401359150604084013561433381614266565b809150509250925092565b634e487b7160e01b600052601260045260246000fd5b6000826143635761436361433e565b500690565b634e487b7160e01b600052601160045260246000fd5b60008261438d5761438d61433e565b500490565b67ffffffffffffffff8181168382160190808211156143b3576143b3614368565b5092915050565b67ffffffffffffffff8281168282160390808211156143b3576143b3614368565b6000600182016143ed576143ed614368565b5060010190565b808202811582820484141761063857610638614368565b6000808335601e1984360301811261442257600080fd5b83018035915067ffffffffffffffff82111561443d57600080fd5b6020019150600581901b360382131561445557600080fd5b9250929050565b634e487b7160e01b600052603260045260246000fd5b60c081016106388284805182526001600160a01b03602082015116602083015260ff6040820151166040830152606081015160608301526080810151608083015260a081015160a08301525050565b6000602082840312156144d357600080fd5b5051919050565b8082018082111561063857610638614368565b60005b838110156145085781810151838201526020016144f0565b50506000910152565b600083516145238184602088016144ed565b9190910191825250602001919050565b8181038181111561063857610638614368565b60006020828403121561455857600080fd5b81516119088161412e565b600181815b8085111561459e57816000190482111561458457614584614368565b8085161561459157918102915b93841c9390800290614568565b509250929050565b6000826145b557506001610638565b816145c257506000610638565b81600181146145d857600281146145e2576145fe565b6001915050610638565b60ff8411156145f3576145f3614368565b50506001821b610638565b5060208310610133831016604e8410600b8410161715614621575081810a610638565b61462b8383614563565b806000190482111561463f5761463f614368565b029392505050565b600061190860ff8416836145a6565b60ff818116838216019081111561063857610638614368565b60ff828116828216039081111561063857610638614368565b61ffff8281168282160390808211156143b3576143b3614368565b600061190861ffff8416836145a6565b6000602082840312156146c557600080fd5b61190882614214565b60008235607e198336030181126146e457600080fd5b9190910192915050565b60008060008060008060c0878903121561470757600080fd5b86516147128161412e565b602088015190965061472381614266565b604088015190955061473481614266565b6060880151909450801515811461474a57600080fd5b809350506080870151915060a087015190509295509295509295565b6000808335601e1984360301811261477d57600080fd5b83018035915067ffffffffffffffff82111561479857600080fd5b60200191503681900382131561445557600080fd5b6000602082840312156147bf57600080fd5b81356119088161412e565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516148028160178501602088016144ed565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161483f8160288401602088016144ed565b01602801949350505050565b602081526000825180602084015261486a8160408501602087016144ed565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b6000816148a3576148a3614368565b50600019019056fea2646970667358221220ac122b983bc40bd7f38ebbe379e5689456d6e5597ac4ef6f3bbb5893238022bd64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061025c5760003560e01c806382b39b1b11610145578063b78a52a7116100bd578063d1e8b63d1161008c578063dfbf53ae11610071578063dfbf53ae1461058a578063f7b188a5146105ba578063fb00f2f3146105c257600080fd5b8063d1e8b63d1461056f578063d547741f1461057757600080fd5b8063b78a52a71461051c578063c1d810d51461052f578063c46b402914610542578063ce9877451461055c57600080fd5b80638d8b64281161011457806391d14854116100f957806391d14854146104ca578063a217fddf14610501578063aeace9dc1461050957600080fd5b80638d8b6428146104af57806391276bec146104b757600080fd5b806382b39b1b1461044757806383220626146104975780638456cb591461049f5780638a19c8bc146104a757600080fd5b806362fd29ae116101d857806369da9114116101a757806372286cba1161018c57806372286cba146103cb57806377c75d10146104195780637fe019c61461042c57600080fd5b806369da91141461039d5780636f94aaf2146103b057600080fd5b806362fd29ae1461034d57806363f5cf7c1461035557806364c34a851461036857806369bfac011461037057600080fd5b80632f2ff15d1161022f57806336568abe1161021457806336568abe1461031c5780635c975abb1461032f5780635d4844ea1461033a57600080fd5b80632f2ff15d146102ff5780632f3906da1461031457600080fd5b806301ffc9a7146102615780631835009614610289578063248a9ca3146102b95780632a4e6249146102ea575b600080fd5b61027461026f36600461405c565b6105d5565b60405190151581526020015b60405180910390f35b6001546102a19061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610280565b6102dc6102c7366004614086565b60009081526020819052604090206001015490565b604051908152602001610280565b6102f261063e565b604051610280919061409f565b61031261030d366004614143565b61074b565b005b610274610775565b61031261032a366004614143565b6107bf565b60015460ff16610274565b6003546102a1906001600160a01b031681565b6102dc610850565b61031261036336600461418c565b61091c565b6102dc610c8d565b6008546103849067ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610280565b6002546102a1906001600160a01b031681565b60085461038490600160801b900467ffffffffffffffff1681565b6103de6103d9366004614086565b610d6d565b604080519687526001600160a01b039095166020870152921515938501939093526060840152608083019190915260a082015260c001610280565b610274610427366004614086565b610dc4565b60085461038490600160401b900467ffffffffffffffff1681565b61045a610455366004614086565b611074565b604080519687526001600160a01b03909516602087015260ff909316938501939093526060840152608083019190915260a082015260c001610280565b6102dc611084565b61031261108f565b6103846110f2565b6102746110ff565b6103126104c5366004614231565b611129565b6102746104d8366004614143565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6102dc600081565b610312610517366004614275565b6116af565b61027461052a3660046142a3565b611780565b61031261053d3660046142c8565b61190f565b61054a611dda565b60405160ff9091168152602001610280565b6102dc61056a3660046142c8565b611e5f565b610274611ece565b610312610585366004614143565b611ef3565b600954600a54600b54600c54600d5461045a94936001600160a01b03811693600160a01b90910460ff1692909186565b610312611f18565b6102746105d0366004614305565b611f79565b60006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061063857507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b60606106486110ff565b61066557604051633788c6c160e11b815260040160405180910390fd5b600061066f6110f2565b60085490915067ffffffffffffffff808316600160401b90920416146106a857604051636fbabc7760e01b815260040160405180910390fd5b6005805480602002602001604051908101604052809291908181526020016000905b828210156107415760008481526020908190206040805160c08101825260058602909201805483526001808201546001600160a01b03811685870152600160a01b900460ff169284019290925260028101546060840152600381015460808401526004015460a083015290835290920191016106ca565b5050505091505090565b60008281526020819052604090206001015461076681611fb5565b6107708383611fc2565b505050565b600080610783609843614354565b90506107916004609861437e565b81101580156107aa57506107a76002609861437e565b81105b156107b757600191505090565b600091505090565b6001600160a01b03811633146108425760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b61084c8282612060565b5050565b60008061085b6110f2565b610866906001614392565b6007546008549192509061088c90600160401b900467ffffffffffffffff166001614392565b67ffffffffffffffff168267ffffffffffffffff161115610638576008546000906001906108cb90600160401b900467ffffffffffffffff16856143ba565b6108d591906143ba565b67ffffffffffffffff16905081816040516020016108fd929190918252602082015260400190565b6040516020818303038152906040528051906020012091505092915050565b6109246120df565b61092c612132565b6040805160c0810182526009548152600a546001600160a01b0381166020830152600160a01b900460ff1691810191909152600b546060820152600c546080820152600d5460a0820152600654600754600091829161098c600f82614354565b9350610999600e82614354565b92508383106109b057826109ac816143db565b9350505b6109c38660200135838760400151611f79565b6109e357604051633b5f43a360e01b815260036004820152602401610839565b6109ee86601e612707565b6109f786612a19565b610a0086612e19565b610a138860200135838760400151611f79565b610a3357604051633b5f43a360e01b815260026004820152602401610839565b610a4788610a428660026143f4565b612707565b610a5088612a19565b610a5988612e19565b610a6c8760200135838760400151611f79565b610a8c57604051633b5f43a360e01b815260016004820152602401610839565b610a9b87610a428560026143f4565b610aa487612a19565b610aad87612e19565b610b238484610abc8b8061440b565b6000818110610acd57610acd61445c565b60200291909101359050610ae18b8061440b565b6000818110610af257610af261445c565b60200291909101359050610b068b8061440b565b6000818110610b1757610b1761445c565b905060200201356130ad565b60015460208601516040517f51cff8d90000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015261010090920416906351cff8d990602401600060405180830381600087803b158015610b8c57600080fd5b505af1158015610ba0573d6000803e3d6000fd5b505050507f788e77979e6e6a8a6a5d2c19c58b1ff9671298f54c85ac6f6aa30379aed5861a85604051610bd39190614472565b60405180910390a17fbee3fc8a3523c1a65fa9308ce1f2b8fd90c24975b141b754603194597846e4dd60018054906101000a90046001600160a01b03166001600160a01b0316638a5e8e326040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7191906144c1565b6040519081526020015b60405180910390a15050505050505050565b6000610c97611ece565b80610cd55750600854600160401b900467ffffffffffffffff16610cb96110f2565b67ffffffffffffffff16118015610cd55750610cd36110ff565b155b15610ce757610ce2611084565b905090565b610cef6110ff565b15610cfc57610ce2610850565b610d04610775565b8015610d335750600854600160401b900467ffffffffffffffff16610d276110f2565b67ffffffffffffffff16145b15610d6a576040517f36b7884b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b90565b60048181548110610d7d57600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401549294506001600160a01b03821693600160a01b90920460ff169290919086565b6000610dce6110ff565b610deb57604051633788c6c160e11b815260040160405180910390fd5b6000610df56110f2565b60085490915067ffffffffffffffff808316600160401b9092041614610e2e57604051636fbabc7760e01b815260040160405180910390fd5b60085467ffffffffffffffff600160801b909104811690821611610e6557604051630c8d9eab60e31b815260040160405180910390fd5b600080600080600080600080610e79613143565b90506000610e856131fd565b600454919650945060005b818110156110605760048181548110610eab57610eab61445c565b906000526020600020906005020160040154945060048181548110610ed257610ed261445c565b906000526020600020906005020160010160149054906101000a900460ff168015610f20575060058581548110610f0b57610f0b61445c565b90600052602060002090600502016004015487145b8015610f5e575060058581548110610f3a57610f3a61445c565b600091825260209091206001600590920201015460ff878116600160a01b90920416145b156110585760058581548110610f7657610f7661445c565b9060005260206000209060050201600301548b610f9391906144da565b9a508383604051602001610fa8929190614511565b60408051601f19818403018152919052805160209091012098506fffffffffffffffffffffffffffffffff808a169850610fe39060016144da565b60058681548110610ff657610ff661445c565b90600052602060002090600502016003015461101291906143f4565b61101c8c8a6143f4565b101561104a57600585815481106110355761103561445c565b90600052602060002090600502016000015499505b82611054816143db565b9350505b600101610e90565b505050959099149998505050505050505050565b60058181548110610d7d57600080fd5b6000806108666110f2565b7f000000000000000000000000000000000000000000000000000000000000000060009081526020818152604080832033845290915290205460ff166110e857604051631d77d47760e21b815260040160405180910390fd5b6110f06133b6565b565b6000610ce260984361437e565b600061110d6002609861437e565b611118609843614354565b106111235750600190565b50600090565b6111316120df565b600061113b6110f2565b6003546040516348962b9360e01b8152600481018690529192506000916001600160a01b03909116906348962b9390602401602060405180830381865afa15801561118a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ae91906144c1565b90506111b8611ece565b6111ee576040517fdc816a8700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016111fc6004609861437e565b6112069190614533565b611211609843614354565b03611248576040517f5baef6b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8267ffffffffffffffff168267ffffffffffffffff161115611296576040517f50ff7c0000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8267ffffffffffffffff168267ffffffffffffffff1610156112e4576040517f7a0c0fd600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67016345785d8a000081101561130d57604051638ecf3d0360e01b815260040160405180910390fd5b6003546040517fa0d22b210000000000000000000000000000000000000000000000000000000081526004810186905233916001600160a01b03169063a0d22b2190602401602060405180830381865afa15801561136f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113939190614546565b6001600160a01b0316146113d3576040517fb78fd5c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6113df609860026143f4565b6113e99043614533565b6003546040516376f2098160e11b8152600481018790526001600160a01b039091169063ede4130290602401602060405180830381865afa158015611432573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145691906144c1565b1061147457604051630a0744c560e01b815260040160405180910390fd5b60085467ffffffffffffffff8381169116146114b45761149660046000613ff3565b6008805467ffffffffffffffff191667ffffffffffffffff84161790555b60045460005b818110156115275785600482815481106114d6576114d661445c565b9060005260206000209060050201600001540361151f576040517ffc507a3100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001016114ba565b506040805160c081018252868152336020808301918252600083850181815260608501888152608086018d815260a0870184815260048054600181018255955296517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b60059095029485015594517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c8401805493516001600160a01b0390921674ffffffffffffffffffffffffffffffffffffffffff1990941693909317600160a01b9115159190910217909155517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d82015591517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e83015591517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19f90910155815167ffffffffffffffff871681529081018790527f68e0867601a98978930107aee7f425665e61edd70ca594c68ca5da9e81f84c29910160405180910390a1505050505050565b3360009081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604090205460ff16611717576040517f7bfa4b9f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600880547fffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffff16600160c01b60ff948516027fffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffff1617600160c81b9290931691909102919091179055565b600061178a610775565b156117c1576040517fe2586bcc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6117cd609860026143f4565b6117d79043614533565b6003546040516376f2098160e11b8152600481018690526001600160a01b039091169063ede4130290602401602060405180830381865afa158015611820573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184491906144c1565b1061186257604051630a0744c560e01b815260040160405180910390fd5b6003546040516348962b9360e01b81526004810185905267016345785d8a0000916001600160a01b0316906348962b9390602401602060405180830381865afa1580156118b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d791906144c1565b10156118f657604051638ecf3d0360e01b815260040160405180910390fd5b61190883611902610c8d565b84611f79565b9392505050565b6119176120df565b60006119216110f2565b905061192b611dda565b60ff168460ff16101561196a576040517f83d9b7bd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611972610775565b6119a8576040517fd1088db600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60085467ffffffffffffffff8281169116146119f0576040517f842a9e0a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60085467ffffffffffffffff828116600160401b9092041614611ad857611a15610c8d565b600655611a2460056000613ff3565b600880547fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff16600160401b67ffffffffffffffff8416908102919091179091556006546040805192835260208301919091527ff0ae472da9c8da86bda4991a549c03a3cb328b5f360ea11a5b8814f32bb85176910160405180910390a1611ad8600754604080516020810192909252449082015260600160408051601f198184030181529190528051602090910120600755565b6000611ae686868686611e5f565b90506000611af4878361340a565b9050600060048281548110611b0b57611b0b61445c565b60009182526020918290206040805160c081018252600593909302909101805480845260018201546001600160a01b03811695850195909552600160a01b90940460ff1615159183019190915260028101546060830152600381015460808301526004015460a0820152600654909250611b86919089611f79565b611bc2576006546040517f14ebbbe400000000000000000000000000000000000000000000000000000000815260040161083991815260200190565b806040015115611bfe576040517fa89ac15100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160048381548110611c1357611c1361445c565b906000526020600020906005020160010160146101000a81548160ff02191690831515021790555060058054905060048381548110611c5457611c5461445c565b90600052602060002090600502016004018190555060056040518060c001604052808360000151815260200183602001516001600160a01b031681526020018960ff16815260200183606001518152602001896002611cb39190614647565b8460600151611cc291906143f4565b815260209081018990528254600181810185556000948552938290208351600590920201908155908201519281018054604084015160ff16600160a01b0274ffffffffffffffffffffffffffffffffffffffffff199091166001600160a01b0390951694909417939093179092556060808201516002808501919091556080830151600385015560a0909201516004909301929092558251918301517f13fc17fd71632266fe82092de6dd91a06b4fa68d8dc950492e5421cbed55a6a5928792909190611d90908c90614647565b8560600151611d9f91906143f4565b6040805167ffffffffffffffff909516855260208501939093529183015260608201526080810188905260ff891660a082015260c001610c7b565b6008546000908190611dff9067ffffffffffffffff600160801b8204811691166143ba565b67ffffffffffffffff169050600060fe8211611e1b5781611e1e565b60fe5b611e29906001614656565b600a5490915060ff600160a01b9091048116908216811115611e5457611e4f828261466f565b611e57565b60005b935050505090565b60408051602081018690527fff0000000000000000000000000000000000000000000000000000000000000060f886901b169181019190915260418101839052606181018290526000906081015b6040516020818303038152906040528051906020012090505b949350505050565b6000611edc6004609861437e565b611ee7609843614354565b10156111235750600190565b600082815260208190526040902060010154611f0e81611fb5565b6107708383612060565b7f000000000000000000000000000000000000000000000000000000000000000060009081526020818152604080832033845290915290205460ff16611f7157604051631d77d47760e21b815260040160405180910390fd5b6110f06134b5565b60008160ff16600003611f8e57506001611908565b611f9d60ff8316610100614688565b611fa89060026146a3565b8484181090509392505050565b611fbf81336134ee565b50565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661084c576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905561201c3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff161561084c576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60015460ff16156110f05760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610839565b600061213c6110f2565b90506121466110ff565b61216357604051633788c6c160e11b815260040160405180910390fd5b60085467ffffffffffffffff828116600160401b909204161461219957604051636fbabc7760e01b815260040160405180910390fd5b60085467ffffffffffffffff600160801b9091048116908216116121d057604051630c8d9eab60e31b815260040160405180910390fd5b600454604051818152600091829182918291829182917f6752c5e71c95fb93bc7137adeb115a33fa4e54e2683e33d3f90c2bb1c4b6c2a59060200160405180910390a16005546040519081527f4c03de6a759749c0c9387b7014634dc5c6af610e1366023d90751c783a998f8d9060200160405180910390a16122516131fd565b6040805183815260ff831660208201529295509093507f34e8eda4cd857cd2865becf58a47748f31415f4a382cbb2cc0c64b9a27c717be910160405180910390a1600061229c613143565b905060005b82811015612641576000600482815481106122be576122be61445c565b600091825260208083206040805160c08101825260059485029092018054835260018101546001600160a01b03811694840194909452600160a01b90930460ff16151590820152600282015460608201526003820154608082015260049091015460a0820181905282549194509291908390811061233e5761233e61445c565b60009182526020918290206040805160c0810182526005939093029091018054835260018101546001600160a01b03811694840194909452600160a01b90930460ff1682820152600283015460608301526003830154608083015260049092015460a08201529084015190915080156123ba57508060a0015188145b80156123cf5750806040015160ff168760ff16145b156124c45760808101516123e3908d6144da565b9b50848b6040516020016123f8929190614511565b60408051601f19818403018152919052805160209091012099506fffffffffffffffffffffffffffffffff808b1699506124339060016144da565b816080015161244291906143f4565b61244c8d8b6143f4565b10156124b65780516009556020810151600a8054604084015160ff16600160a01b0274ffffffffffffffffffffffffffffffffffffffffff199091166001600160a01b03909316929092179190911790556060810151600b556080810151600c5560a0810151600d555b8a6124c0816143db565b9b50505b826040015180156124ed57508060a00151881415806124ed5750806040015160ff168760ff1614155b1561258e5760035481516001600160a01b039091169063837fd16a906125148a6002614647565b60085461252d90609890600160c01b900460ff166143f4565b61253791906143f4565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401600060405180830381600087803b15801561257557600080fd5b505af1158015612589573d6000803e3d6000fd5b505050505b82604001516126335760035483516001600160a01b039091169063837fd16a906125b98a6002614647565b6008546125d290609890600160c81b900460ff166143f4565b6125dc91906143f4565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401600060405180830381600087803b15801561261a57600080fd5b505af115801561262e573d6000803e3d6000fd5b505050505b8360010193505050506122a1565b506002546040517fffb98fe300000000000000000000000000000000000000000000000000000000815261ffff891660048201526001600160a01b039091169063ffb98fe390602401600060405180830381600087803b1580156126a457600080fd5b505af11580156126b8573d6000803e3d6000fd5b50506008805467ffffffffffffffff909c16600160801b027fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff909c169b909b17909a5550505050505050505050565b60075460009061271990608090614354565b9050600061277c61272d60a086018661440b565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050505060608601358461277460a0890160808a016146b3565b600654613561565b60408051858152602081018390529192507f94e252069a85aa79db21f5bd8ca4e14dd3a3927aa492711017a2c8ddad95af00910160405180910390a16128046127c5858061440b565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505050506020860135856104006136d9565b600d541461282f5760405163755f0a2560e01b81526001600482015260248101829052604401610839565b61283c60a085018561440b565b600081811061284d5761284d61445c565b90506020020135848060400190612864919061440b565b60008181106128755761287561445c565b90506020020135146128a45760405163755f0a2560e01b81526002600482015260248101829052604401610839565b6000806128b460e087018761440b565b9050116128c55784602001356128fa565b6128d260e086018661440b565b60008181106128e3576128e361445c565b90506020028101906128f591906146ce565b606001355b905061295861290c604087018761440b565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050505060608701358561295360a08a0160808b016146b3565b6136d9565b81146129815760405163755f0a2560e01b81526003600482015260248101839052604401610839565b600061299060e087018761440b565b905011156129c85760408051602080880135908201529081018390526060016040516020818303038152906040528051906020012091505b816129d3868061440b565b60008181106129e4576129e461445c565b9050602002013514612a125760405163755f0a2560e01b815260048181015260248101839052604401610839565b5050505050565b6001546000908190819061010090046001600160a01b031663c81e25ab612a4360c08701876146ce565b602001356040518263ffffffff1660e01b8152600401612a6591815260200190565b60c060405180830381865afa158015612a82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aa691906146ee565b5050509250925092506000612ad5858060c00190612ac491906146ce565b610d6a9060608101906040016146b3565b90506000612ae38484613847565b9050808263ffffffff1610612b3857612aff60c08701876146ce565b602001356040517f1362e4a000000000000000000000000000000000000000000000000000000000815260040161083991815260200190565b60018054906101000a90046001600160a01b03166001600160a01b031663906978426040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bad91906144c1565b60015461010090046001600160a01b031663d71ba7c4612bd060c08a018a6146ce565b602001356040518263ffffffff1660e01b8152600401612bf291815260200190565b602060405180830381865afa158015612c0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c3391906144c1565b1015612c7f57612c4660c08701876146ce565b602001356040517f55a9e7ce00000000000000000000000000000000000000000000000000000000815260040161083991815260200190565b6000612cae612c9160c08901896146ce565b612ca29060608101906040016146b3565b60201c63ffffffff1690565b90506000612cc0886020013586613862565b63ffffffff16905067ffffffffffffffff82168114612d1f57612ce660c08901896146ce565b602001356040517f6dd6a24f00000000000000000000000000000000000000000000000000000000815260040161083991815260200190565b612dc587612d3060c08b018b6146ce565b612d3a9080614766565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050505060208b0135612d8060c08d018d6146ce565b60200135612d9160c08e018e6146ce565b612da29060608101906040016146b3565b612daf60c08f018f6146ce565b612dc09060808101906060016146b3565b613889565b612e0f57612dd660c08901896146ce565b602001356040517fdb12fb9d00000000000000000000000000000000000000000000000000000000815260040161083991815260200190565b5050505050505050565b612e2660e082018261440b565b9050600003612e325750565b612f53612e4260e083018361440b565b6000818110612e5357612e5361445c565b9050602002810190612e6591906146ce565b612e739060208101906147ad565b612e8060e084018461440b565b6000818110612e9157612e9161445c565b9050602002810190612ea391906146ce565b612eb1906020810190614766565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612ef39250505060e085018561440b565b6000818110612f0457612f0461445c565b9050602002810190612f1691906146ce565b60400135612f2760e086018661440b565b6000818110612f3857612f3861445c565b9050602002810190612f4a91906146ce565b60600135613920565b612fc057612f6460e082018261440b565b6000818110612f7557612f7561445c565b9050602002810190612f8791906146ce565b606001356040517fd740df6100000000000000000000000000000000000000000000000000000000815260040161083991815260200190565b602081013561303f612fd560e084018461440b565b6000818110612fe657612fe661445c565b9050602002810190612ff891906146ce565b6040013561300960e085018561440b565b600081811061301a5761301a61445c565b905060200281019061302c91906146ce565b61303a9060208101906147ad565b6139b3565b14611fbf5761305160e082018261440b565b60008181106130625761306261445c565b905060200281019061307491906146ce565b606001356040517f82f2469d00000000000000000000000000000000000000000000000000000000815260040161083991815260200190565b838510156130fa578183106130d557604051633d386eb360e11b815260040160405180910390fd5b8082106130f557604051633588c6d360e11b815260040160405180910390fd5b61313a565b82821061311a57604051633d386eb360e11b815260040160405180910390fd5b80831061313a57604051633588c6d360e11b815260040160405180910390fd5b612a1281613a01565b606061314d6110ff565b61316a57604051633788c6c160e11b815260040160405180910390fd5b60006131746110f2565b60085490915067ffffffffffffffff808316600160401b90920416146131ad57604051636fbabc7760e01b815260040160405180910390fd5b6007546040516020016131e89181527f3100000000000000000000000000000000000000000000000000000000000000602082015260210190565b60405160208183030381529060405291505090565b6000806000806000806000806000613213613a58565b60045490915060005b818110156133a557600481815481106132375761323761445c565b906000526020600020906005020160010160149054906101000a900460ff161561339d576004818154811061326e5761326e61445c565b9060005260206000209060050201600401549350600584815481106132955761329561445c565b906000526020600020906005020160030154896132b291906144da565b985082816040516020016132c7929190614511565b60408051601f19818403018152919052805160209091012097506fffffffffffffffffffffffffffffffff80891697506133029060016144da565b600585815481106133155761331561445c565b90600052602060002090600502016003015461333191906143f4565b61333b8a896143f4565b101561339d57600584815481106133545761335461445c565b90600052602060002090600502016004015495506005848154811061337b5761337b61445c565b906000526020600020906005020160010160149054906101000a900460ff1694505b60010161321c565b509399929850919650505050505050565b6133be6120df565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258335b6040516001600160a01b03909116815260200160405180910390a1565b6000805b60045481101561348257836004828154811061342c5761342c61445c565b90600052602060002090600502016000015414801561346e5750600481815481106134595761345961445c565b90600052602060002090600502016003015483145b1561347a579050610638565b60010161340e565b506040517fd950091500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6134bd613ae1565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa336133ed565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661084c5761351f81613b33565b61352a836020613b45565b60405160200161353b9291906147ca565b60408051601f198184030181529082905262461bcd60e51b82526108399160040161484b565b60008061357087878786613d0a565b905082613675856000808267ffffffffffffffff1690506008817eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff16901b600882901c7eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff161790506010817dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff16901b601082901c7dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff161790506020817bffffffff00000000ffffffff00000000ffffffff00000000ffffffff16901b602082901c7bffffffff00000000ffffffff00000000ffffffff00000000ffffffff1617905080915050919050565b826040516020016136b79392919092835260c09190911b77ffffffffffffffffffffffffffffffffffffffffffffffff19166020830152602882015260480190565b6040516020818303038152906040528051906020012091505095945050505050565b6000806136e7868686613d80565b90506137eb836000808267ffffffffffffffff1690506008817eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff16901b600882901c7eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff161790506010817dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff16901b601082901c7dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff161790506020817bffffffff00000000ffffffff00000000ffffffff00000000ffffffff16901b602082901c7bffffffff00000000ffffffff00000000ffffffff00000000ffffffff1617905080915050919050565b8160405160200161382692919060c09290921b77ffffffffffffffffffffffffffffffffffffffffffffffff19168252600882015260280190565b60405160208183030381529060405280519060200120915050949350505050565b6000613853828461466f565b60ff166001901b905092915050565b600060e083901c61387483602061466f565b60ff168163ffffffff16901c91505092915050565b60008061389886868686613de8565b905060006138f3826040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b9050886001600160a01b0316613909828a613e33565b6001600160a01b0316149998505050505050505050565b60008061392d8484613eb2565b90506000613988826040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b9050866001600160a01b031661399e8288613e33565b6001600160a01b031614979650505050505050565b600082826040516020016139e392919091825260601b6bffffffffffffffffffffffff1916602082015260340190565b60405160208183030381529060405280519060200120905092915050565b7dba1914b54e0348a1028d1a103a95ed55c4004b9d332400000000000000008110611fbf576040517f9fad870f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6060613a626110ff565b613a7f57604051633788c6c160e11b815260040160405180910390fd5b6000613a896110f2565b60085490915067ffffffffffffffff808316600160401b9092041614613ac257604051636fbabc7760e01b815260040160405180910390fd5b6007546040516020016131e8918152600360fc1b602082015260210190565b60015460ff166110f05760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610839565b60606106386001600160a01b03831660145b60606000613b548360026143f4565b613b5f9060026144da565b67ffffffffffffffff811115613b7757613b7761487e565b6040519080825280601f01601f191660200182016040528015613ba1576020820181803683370190505b509050600360fc1b81600081518110613bbc57613bbc61445c565b60200101906001600160f81b031916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110613c0757613c0761445c565b60200101906001600160f81b031916908160001a9053506000613c2b8460026143f4565b613c369060016144da565b90505b6001811115613cbb577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110613c7757613c7761445c565b1a60f81b828281518110613c8d57613c8d61445c565b60200101906001600160f81b031916908160001a90535060049490941c93613cb481614894565b9050613c39565b5083156119085760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610839565b8260005b8551811015613d77576000613d24600286614354565b15613d30576000613d33565b60015b9050613d5a83888481518110613d4b57613d4b61445c565b60200260200101518387613ece565b9250600185901c9450508080613d6f906143db565b915050613d0e565b50949350505050565b8160005b8451811015613de0576000613d9a600285614354565b6000149050613dc383878481518110613db557613db561445c565b602002602001015183613f2e565b9250600184901c9350508080613dd8906143db565b915050613d84565b509392505050565b604080516020810186905290810184905277ffffffffffffffffffffffffffffffffffffffffffffffff1960c084811b8216606084015283901b166068820152600090607001611ead565b600080600080613e4285613f95565b6040805160008152602081018083528b905260ff8316918101919091526060810184905260808101839052929550909350915060019060a0016020604051602081039080840390855afa158015613e9d573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b60408051602081018490529081018290526000906060016139e3565b60008215613f0e57604080516020810184905290810186905260608101859052608001604051602081830303815290604052805190602001209050611ec6565b604080516020810184905290810185905260608101869052608001611ead565b60008115613f67576040805160208101869052908101849052606001604051602081830303815290604052805190602001209050611908565b5050604080516020808201939093528082019390935280518084038201815260609093019052815191012090565b60008060008351604114613fd5576040517f4be6321b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505060208101516040820151606090920151909260009190911a90565b5080546000825560050290600052602060002090810190611fbf91905b8082111561405857600080825560018201805474ffffffffffffffffffffffffffffffffffffffffff1916905560028201819055600382018190556004820155600501614010565b5090565b60006020828403121561406e57600080fd5b81356001600160e01b03198116811461190857600080fd5b60006020828403121561409857600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156141225761410f838551805182526001600160a01b03602082015116602083015260ff6040820151166040830152606081015160608301526080810151608083015260a081015160a08301525050565b9284019260c092909201916001016140bb565b50909695505050505050565b6001600160a01b0381168114611fbf57600080fd5b6000806040838503121561415657600080fd5b8235915060208301356141688161412e565b809150509250929050565b6000610100828403121561418657600080fd5b50919050565b6000806000606084860312156141a157600080fd5b833567ffffffffffffffff808211156141b957600080fd5b6141c587838801614173565b945060208601359150808211156141db57600080fd5b6141e787838801614173565b935060408601359150808211156141fd57600080fd5b5061420a86828701614173565b9150509250925092565b803567ffffffffffffffff8116811461422c57600080fd5b919050565b60008060006060848603121561424657600080fd5b833592506020840135915061425d60408501614214565b90509250925092565b60ff81168114611fbf57600080fd5b6000806040838503121561428857600080fd5b823561429381614266565b9150602083013561416881614266565b600080604083850312156142b657600080fd5b82359150602083013561416881614266565b600080600080608085870312156142de57600080fd5b8435935060208501356142f081614266565b93969395505050506040820135916060013590565b60008060006060848603121561431a57600080fd5b8335925060208401359150604084013561433381614266565b809150509250925092565b634e487b7160e01b600052601260045260246000fd5b6000826143635761436361433e565b500690565b634e487b7160e01b600052601160045260246000fd5b60008261438d5761438d61433e565b500490565b67ffffffffffffffff8181168382160190808211156143b3576143b3614368565b5092915050565b67ffffffffffffffff8281168282160390808211156143b3576143b3614368565b6000600182016143ed576143ed614368565b5060010190565b808202811582820484141761063857610638614368565b6000808335601e1984360301811261442257600080fd5b83018035915067ffffffffffffffff82111561443d57600080fd5b6020019150600581901b360382131561445557600080fd5b9250929050565b634e487b7160e01b600052603260045260246000fd5b60c081016106388284805182526001600160a01b03602082015116602083015260ff6040820151166040830152606081015160608301526080810151608083015260a081015160a08301525050565b6000602082840312156144d357600080fd5b5051919050565b8082018082111561063857610638614368565b60005b838110156145085781810151838201526020016144f0565b50506000910152565b600083516145238184602088016144ed565b9190910191825250602001919050565b8181038181111561063857610638614368565b60006020828403121561455857600080fd5b81516119088161412e565b600181815b8085111561459e57816000190482111561458457614584614368565b8085161561459157918102915b93841c9390800290614568565b509250929050565b6000826145b557506001610638565b816145c257506000610638565b81600181146145d857600281146145e2576145fe565b6001915050610638565b60ff8411156145f3576145f3614368565b50506001821b610638565b5060208310610133831016604e8410600b8410161715614621575081810a610638565b61462b8383614563565b806000190482111561463f5761463f614368565b029392505050565b600061190860ff8416836145a6565b60ff818116838216019081111561063857610638614368565b60ff828116828216039081111561063857610638614368565b61ffff8281168282160390808211156143b3576143b3614368565b600061190861ffff8416836145a6565b6000602082840312156146c557600080fd5b61190882614214565b60008235607e198336030181126146e457600080fd5b9190910192915050565b60008060008060008060c0878903121561470757600080fd5b86516147128161412e565b602088015190965061472381614266565b604088015190955061473481614266565b6060880151909450801515811461474a57600080fd5b809350506080870151915060a087015190509295509295509295565b6000808335601e1984360301811261477d57600080fd5b83018035915067ffffffffffffffff82111561479857600080fd5b60200191503681900382131561445557600080fd5b6000602082840312156147bf57600080fd5b81356119088161412e565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516148028160178501602088016144ed565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161483f8160288401602088016144ed565b01602801949350505050565b602081526000825180602084015261486a8160408501602087016144ed565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b6000816148a3576148a3614368565b50600019019056fea2646970667358221220ac122b983bc40bd7f38ebbe379e5689456d6e5597ac4ef6f3bbb5893238022bd64736f6c63430008130033",
  "devdoc": {
    "author": "The Swarm Authors",
    "details": "Implements a Schelling Co-ordination game to form consensus around the Reserve Commitment hash. This takes place in three phases: _commit_, _reveal_ and _claim_. A node, upon establishing that it _isParticipatingInUpcomingRound_, i.e. it's overlay falls within proximity order of its reported depth with the _currentRoundAnchor_, prepares a \"reserve commitment hash\" using the chunks it currently stores in its reserve and calculates the \"storage depth\" (see Bee for details). These values, if calculated honestly, and with the right chunks stored, should be the same for every node in a neighbourhood. This is the Schelling point. Each eligible node can then use these values, together with a random, single use, secret  _revealNonce_ and their _overlay_ as the pre-image values for the obsfucated _commit_, using the _wrapCommit_ method. Once the _commit_ round has elapsed, participating nodes must provide the values used to calculate their obsfucated _commit_ hash, which, once verified for correctness and proximity to the anchor are retained in the _currentReveals_. Nodes that have commited but do not reveal the correct values used to create the pre-image will have their stake \"frozen\" for a period of rounds proportional to their reported depth. During the _reveal_ round, randomness is updated after every successful reveal. Once the reveal round is concluded, the _currentRoundAnchor_ is updated and users can determine if they will be eligible their overlay will be eligible for the next commit phase using _isParticipatingInUpcomingRound_. When the _reveal_ phase has been concluded, the claim phase can begin. At this point, the truth teller and winner are already determined. By calling _isWinner_, an applicant node can run the relevant logic to determine if they have been selected as the beneficiary of this round. When calling _claim_, the current pot from the PostageStamp contract is withdrawn and transferred to that beneficiaries address. Nodes that have revealed values that differ from the truth, have their stakes \"frozen\" for a period of rounds proportional to their reported depth.",
    "events": {
      "ChunkCount(uint256)": {
        "details": "Emit from Postagestamp contract valid chunk count at the end of claim"
      },
      "Committed(uint256,bytes32)": {
        "details": "Logs that an overlay has committed"
      },
      "CountCommits(uint256)": {
        "details": "Emits the number of commits being processed by the claim phase."
      },
      "CountReveals(uint256)": {
        "details": "Emits the number of reveals being processed by the claim phase."
      },
      "CurrentRevealAnchor(uint256,bytes32)": {
        "details": "Bytes32 anhor of current reveal round"
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Revealed(uint256,bytes32,uint256,uint256,bytes32,uint8)": {
        "details": "Logs that an overlay has revealed"
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "TruthSelected(bytes32,uint8)": {
        "details": "Emitted when the truth oracle of a round is selected in the claim phase."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "WinnerSelected((bytes32,address,uint8,uint256,uint256,bytes32))": {
        "details": "Emitted when the winner of a round is selected in the claim phase"
      },
      "transformedChunkAddressFromInclusionProof(uint256,bytes32)": {
        "details": "Logs for inclusion proof"
      }
    },
    "kind": "dev",
    "methods": {
      "commit(bytes32,bytes32,uint64)": {
        "details": "If a node's overlay is _inProximity_(_depth_) of the _currentRoundAnchor_, that node may compute an _obfuscatedHash_ by providing their _overlay_, reported storage _depth_, reserve commitment _hash_ and a randomly generated, and secret _revealNonce_ to the _wrapCommit_ method.",
        "params": {
          "_obfuscatedHash": "The calculated hash resultant of the required pre-image values.",
          "_overlay": "The overlay referenced in the pre-image. Must be staked by at least the minimum value, and be derived from the same key pair as the message sender."
        }
      },
      "constructor": {
        "params": {
          "oracleContract": "the address of the linked PriceOracle contract.",
          "postageContract": "the address of the linked PostageStamp contract.",
          "staking": "the address of the linked Staking contract."
        }
      },
      "currentRoundAnchor()": {
        "details": "A node must be within proximity order of less than or equal to the storage depth they intend to report."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "inProximity(bytes32,bytes32,uint8)": {
        "params": {
          "A": "An overlay address to compare.",
          "B": "An overlay address to compare.",
          "minimum": "Minimum proximity order."
        }
      },
      "isParticipatingInUpcomingRound(bytes32,uint8)": {
        "params": {
          "depth": "The storage depth the applicant intends to report.",
          "overlay": "The overlay address of the applicant."
        }
      },
      "isWinner(bytes32)": {
        "params": {
          "_overlay": "The overlay address of the applicant."
        }
      },
      "pause()": {
        "details": "Pause the contract. The contract is provably stopped by renouncing the pauser role and the admin role after pausing, can only be called by the `PAUSER`"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "reveal(bytes32,uint8,bytes32,bytes32)": {
        "params": {
          "_depth": "The reported depth.",
          "_hash": "The reserve commitment hash.",
          "_overlay": "The overlay address of the applicant.",
          "_revealNonce": "The nonce used to generate the commit that is being revealed."
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unPause()": {
        "details": "Unpause the contract, can only be called by the pauser when paused"
      },
      "wrapCommit(bytes32,uint8,bytes32,bytes32)": {
        "details": "_revealNonce_ must be randomly generated, used once and kept secret until the reveal phase.",
        "params": {
          "_depth": "The reported depth.",
          "_hash": "The reserve commitment hash.",
          "_overlay": "The overlay address of the applicant.",
          "revealNonce": "A random, single use, secret nonce."
        }
      }
    },
    "title": "Redistribution contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim((bytes32[],bytes32,bytes32[],bytes32,uint64,bytes32[],(bytes,bytes32,uint64,uint64),(address,bytes,bytes32,bytes32)[]),(bytes32[],bytes32,bytes32[],bytes32,uint64,bytes32[],(bytes,bytes32,uint64,uint64),(address,bytes,bytes32,bytes32)[]),(bytes32[],bytes32,bytes32[],bytes32,uint64,bytes32[],(bytes,bytes32,uint64,uint64),(address,bytes,bytes32,bytes32)[]))": {
        "notice": "Helper function to get this round truth"
      },
      "commit(bytes32,bytes32,uint64)": {
        "notice": "Begin application for a round if eligible. Commit a hashed value for which the pre-image will be subsequently revealed."
      },
      "currentMinimumDepth()": {
        "notice": "Returns minimum depth reveal has to have to participate in this round"
      },
      "currentPhaseClaim()": {
        "notice": "Returns true if current block is during claim phase."
      },
      "currentPhaseCommit()": {
        "notice": "Returns true if current block is during commit phase."
      },
      "currentPhaseReveal()": {
        "notice": "Returns true if current block is during reveal phase."
      },
      "currentRound()": {
        "notice": "The number of the current round."
      },
      "currentRoundAnchor()": {
        "notice": "The anchor used to determine eligibility for the current round."
      },
      "currentRoundReveals()": {
        "notice": "Returns true if current block is during reveal phase."
      },
      "currentSeed()": {
        "notice": "Returns the current random seed which is used to determine later utilised random numbers. If rounds have elapsed without reveals, hash the seed with an incremented nonce to produce a new random seed and hence a new round anchor."
      },
      "inProximity(bytes32,bytes32,uint8)": {
        "notice": "Returns true if an overlay address _A_ is within proximity order _minimum_ of _B_."
      },
      "isParticipatingInUpcomingRound(bytes32,uint8)": {
        "notice": "Determine if a the owner of a given overlay can participate in the upcoming round."
      },
      "isWinner(bytes32)": {
        "notice": "Determine if a the owner of a given overlay will be the beneficiary of the claim phase."
      },
      "nextSeed()": {
        "notice": "Returns the seed which will become current once the next commit phase begins. Used to determine what the next round's anchor will be."
      },
      "reveal(bytes32,uint8,bytes32,bytes32)": {
        "notice": "Reveal the pre-image values used to generate commit provided during this round's commit phase."
      },
      "setFreezingParams(uint8,uint8)": {
        "notice": "Set freezing parameters"
      },
      "wrapCommit(bytes32,uint8,bytes32,bytes32)": {
        "notice": "Hash the pre-image values to the obsfucated hash."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "src/Redistribution.sol:Redistribution",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 556,
        "contract": "src/Redistribution.sol:Redistribution",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 7122,
        "contract": "src/Redistribution.sol:Redistribution",
        "label": "PostageContract",
        "offset": 1,
        "slot": "1",
        "type": "t_contract(IPostageStamp)10847"
      },
      {
        "astId": 7125,
        "contract": "src/Redistribution.sol:Redistribution",
        "label": "OracleContract",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPriceOracle)7018"
      },
      {
        "astId": 7128,
        "contract": "src/Redistribution.sol:Redistribution",
        "label": "Stakes",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IStakeRegistry)7047"
      },
      {
        "astId": 7132,
        "contract": "src/Redistribution.sol:Redistribution",
        "label": "currentCommits",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(Commit)7065_storage)dyn_storage"
      },
      {
        "astId": 7136,
        "contract": "src/Redistribution.sol:Redistribution",
        "label": "currentReveals",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_struct(Reveal)7078_storage)dyn_storage"
      },
      {
        "astId": 7138,
        "contract": "src/Redistribution.sol:Redistribution",
        "label": "currentRevealRoundAnchor",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      },
      {
        "astId": 7140,
        "contract": "src/Redistribution.sol:Redistribution",
        "label": "seed",
        "offset": 0,
        "slot": "7",
        "type": "t_bytes32"
      },
      {
        "astId": 7142,
        "contract": "src/Redistribution.sol:Redistribution",
        "label": "currentCommitRound",
        "offset": 0,
        "slot": "8",
        "type": "t_uint64"
      },
      {
        "astId": 7144,
        "contract": "src/Redistribution.sol:Redistribution",
        "label": "currentRevealRound",
        "offset": 8,
        "slot": "8",
        "type": "t_uint64"
      },
      {
        "astId": 7146,
        "contract": "src/Redistribution.sol:Redistribution",
        "label": "currentClaimRound",
        "offset": 16,
        "slot": "8",
        "type": "t_uint64"
      },
      {
        "astId": 7149,
        "contract": "src/Redistribution.sol:Redistribution",
        "label": "penaltyMultiplierDisagreement",
        "offset": 24,
        "slot": "8",
        "type": "t_uint8"
      },
      {
        "astId": 7152,
        "contract": "src/Redistribution.sol:Redistribution",
        "label": "penaltyMultiplierNonRevealed",
        "offset": 25,
        "slot": "8",
        "type": "t_uint8"
      },
      {
        "astId": 7155,
        "contract": "src/Redistribution.sol:Redistribution",
        "label": "winner",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(Reveal)7078_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Commit)7065_storage)dyn_storage": {
        "base": "t_struct(Commit)7065_storage",
        "encoding": "dynamic_array",
        "label": "struct Redistribution.Commit[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Reveal)7078_storage)dyn_storage": {
        "base": "t_struct(Reveal)7078_storage",
        "encoding": "dynamic_array",
        "label": "struct Redistribution.Reveal[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IPostageStamp)10847": {
        "encoding": "inplace",
        "label": "contract IPostageStamp",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceOracle)7018": {
        "encoding": "inplace",
        "label": "contract IPriceOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IStakeRegistry)7047": {
        "encoding": "inplace",
        "label": "contract IStakeRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(Commit)7065_storage": {
        "encoding": "inplace",
        "label": "struct Redistribution.Commit",
        "members": [
          {
            "astId": 7054,
            "contract": "src/Redistribution.sol:Redistribution",
            "label": "overlay",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 7056,
            "contract": "src/Redistribution.sol:Redistribution",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 7058,
            "contract": "src/Redistribution.sol:Redistribution",
            "label": "revealed",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 7060,
            "contract": "src/Redistribution.sol:Redistribution",
            "label": "stake",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7062,
            "contract": "src/Redistribution.sol:Redistribution",
            "label": "obfuscatedHash",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 7064,
            "contract": "src/Redistribution.sol:Redistribution",
            "label": "revealIndex",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Reveal)7078_storage": {
        "encoding": "inplace",
        "label": "struct Redistribution.Reveal",
        "members": [
          {
            "astId": 7067,
            "contract": "src/Redistribution.sol:Redistribution",
            "label": "overlay",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 7069,
            "contract": "src/Redistribution.sol:Redistribution",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 7071,
            "contract": "src/Redistribution.sol:Redistribution",
            "label": "depth",
            "offset": 20,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 7073,
            "contract": "src/Redistribution.sol:Redistribution",
            "label": "stake",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7075,
            "contract": "src/Redistribution.sol:Redistribution",
            "label": "stakeDensity",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7077,
            "contract": "src/Redistribution.sol:Redistribution",
            "label": "hash",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "src/Redistribution.sol:Redistribution",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "src/Redistribution.sol:Redistribution",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}