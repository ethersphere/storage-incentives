{
  "address": "0xac3f71C4d497aE86DFD2194894F1D158e12d073a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staking",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "postageContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "oracleContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "multisig",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "validChunkCount",
          "type": "uint256"
        }
      ],
      "name": "ChunkCount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roundNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "overlay",
          "type": "bytes32"
        }
      ],
      "name": "Committed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "CountCommits",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "CountReveals",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roundNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "anchor",
          "type": "bytes32"
        }
      ],
      "name": "CurrentRevealAnchor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roundNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "overlay",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeDensity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "reserveCommitment",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "depth",
          "type": "uint8"
        }
      ],
      "name": "Revealed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "depth",
          "type": "uint8"
        }
      ],
      "name": "TruthSelected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "overlay",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeDensity",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "depth",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct Redistribution.Reveal",
          "name": "winner",
          "type": "tuple"
        }
      ],
      "name": "WinnerSelected",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OracleContract",
      "outputs": [
        {
          "internalType": "contract IPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PostageContract",
      "outputs": [
        {
          "internalType": "contract IPostageStamp",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Stakes",
      "outputs": [
        {
          "internalType": "contract IStakeRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_obfuscatedHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_overlay",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_roundNumber",
          "type": "uint256"
        }
      ],
      "name": "commit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentClaimRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentCommitRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "currentCommits",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "overlay",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "obfuscatedHash",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "revealed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "revealIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPhaseClaim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPhaseCommit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPhaseReveal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRevealRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "currentReveals",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "overlay",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeDensity",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "depth",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRoundAnchor",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "returnVal",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRoundReveals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "overlay",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeDensity",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "depth",
              "type": "uint8"
            }
          ],
          "internalType": "struct Redistribution.Reveal[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentSeed",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "A",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "B",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "minimum",
          "type": "uint8"
        }
      ],
      "name": "inProximity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "overlay",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "depth",
          "type": "uint8"
        }
      ],
      "name": "isParticipatingInUpcomingRound",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_overlay",
          "type": "bytes32"
        }
      ],
      "name": "isWinner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextSeed",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "penaltyMultiplierDisagreement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "penaltyMultiplierNonRevealed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_overlay",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "_depth",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_revealNonce",
          "type": "bytes32"
        }
      ],
      "name": "reveal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roundLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_penaltyMultiplierDisagreement",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_penaltyMultiplierNonRevealed",
          "type": "uint256"
        }
      ],
      "name": "setFreezingParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winner",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "overlay",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeDensity",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "depth",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_overlay",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "_depth",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "revealNonce",
          "type": "bytes32"
        }
      ],
      "name": "wrapCommit",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x24c98f816be2d092df7db2711129cf68ab60a1dbd879462eced0a0524aa3b620",
  "receipt": {
    "to": null,
    "from": "0xb1C7F17Ed88189Abf269Bf68A3B2Ed83C5276aAe",
    "contractAddress": "0xac3f71C4d497aE86DFD2194894F1D158e12d073a",
    "transactionIndex": 26,
    "gasUsed": "3335408",
    "logsBloom": "0x00000004000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000800100000010000000000000000002000000000040000000000000000000000008000000000000000000000000000000000000000000000000000000000000001000000000000000000001000000000000000000000000000000000000000000000000000000000000100002000000020000000000000000000000000000000000000000400000000000000000000000000",
    "blockHash": "0xb49494c9a98c34db556b5cae5f55a69aee3a476f984d1685804d1f3f2d25e1f3",
    "transactionHash": "0x24c98f816be2d092df7db2711129cf68ab60a1dbd879462eced0a0524aa3b620",
    "logs": [
      {
        "transactionIndex": 26,
        "blockNumber": 3539816,
        "transactionHash": "0x24c98f816be2d092df7db2711129cf68ab60a1dbd879462eced0a0524aa3b620",
        "address": "0xac3f71C4d497aE86DFD2194894F1D158e12d073a",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b1c7f17ed88189abf269bf68a3b2ed83c5276aae",
          "0x000000000000000000000000b1c7f17ed88189abf269bf68a3b2ed83c5276aae"
        ],
        "data": "0x",
        "logIndex": 20,
        "blockHash": "0xb49494c9a98c34db556b5cae5f55a69aee3a476f984d1685804d1f3f2d25e1f3"
      },
      {
        "transactionIndex": 26,
        "blockNumber": 3539816,
        "transactionHash": "0x24c98f816be2d092df7db2711129cf68ab60a1dbd879462eced0a0524aa3b620",
        "address": "0xac3f71C4d497aE86DFD2194894F1D158e12d073a",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
          "0x000000000000000000000000b1c7f17ed88189abf269bf68a3b2ed83c5276aae",
          "0x000000000000000000000000b1c7f17ed88189abf269bf68a3b2ed83c5276aae"
        ],
        "data": "0x",
        "logIndex": 21,
        "blockHash": "0xb49494c9a98c34db556b5cae5f55a69aee3a476f984d1685804d1f3f2d25e1f3"
      }
    ],
    "blockNumber": 3539816,
    "cumulativeGasUsed": "10206757",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7f48e18805A615fb068Fc266a5Ae17fB30709A25",
    "0x3398a0C47d473349d38E7D2c1873c0bD1f763858",
    "0x38Db6e0fb64bf05f3c8d02F3E03a697c72ed397C",
    "0xb1C7F17Ed88189Abf269Bf68A3B2Ed83C5276aAe"
  ],
  "numDeployments": 1,
  "solcInputHash": "e01c5c249d0758ea8c726cc6f6ca793d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"postageContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multisig\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validChunkCount\",\"type\":\"uint256\"}],\"name\":\"ChunkCount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"overlay\",\"type\":\"bytes32\"}],\"name\":\"Committed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"CountCommits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"CountReveals\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"anchor\",\"type\":\"bytes32\"}],\"name\":\"CurrentRevealAnchor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"overlay\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeDensity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"reserveCommitment\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"depth\",\"type\":\"uint8\"}],\"name\":\"Revealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"depth\",\"type\":\"uint8\"}],\"name\":\"TruthSelected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"overlay\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeDensity\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"depth\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct Redistribution.Reveal\",\"name\":\"winner\",\"type\":\"tuple\"}],\"name\":\"WinnerSelected\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OracleContract\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PostageContract\",\"outputs\":[{\"internalType\":\"contract IPostageStamp\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Stakes\",\"outputs\":[{\"internalType\":\"contract IStakeRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_obfuscatedHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_overlay\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_roundNumber\",\"type\":\"uint256\"}],\"name\":\"commit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentClaimRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentCommitRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentCommits\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"overlay\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"obfuscatedHash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"revealed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"revealIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPhaseClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPhaseCommit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPhaseReveal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRevealRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentReveals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"overlay\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeDensity\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"depth\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRoundAnchor\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"returnVal\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRoundReveals\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"overlay\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeDensity\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"depth\",\"type\":\"uint8\"}],\"internalType\":\"struct Redistribution.Reveal[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSeed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"A\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"B\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"minimum\",\"type\":\"uint8\"}],\"name\":\"inProximity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"overlay\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"depth\",\"type\":\"uint8\"}],\"name\":\"isParticipatingInUpcomingRound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_overlay\",\"type\":\"bytes32\"}],\"name\":\"isWinner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextSeed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyMultiplierDisagreement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyMultiplierNonRevealed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_overlay\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_depth\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_revealNonce\",\"type\":\"bytes32\"}],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_penaltyMultiplierDisagreement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_penaltyMultiplierNonRevealed\",\"type\":\"uint256\"}],\"name\":\"setFreezingParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"overlay\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeDensity\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"depth\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_overlay\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_depth\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"revealNonce\",\"type\":\"bytes32\"}],\"name\":\"wrapCommit\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"The Swarm Authors\",\"details\":\"Implements a Schelling Co-ordination game to form consensus around the Reserve Commitment hash. This takes place in three phases: _commit_, _reveal_ and _claim_. A node, upon establishing that it _isParticipatingInUpcomingRound_, i.e. it's overlay falls within proximity order of its reported depth with the _currentRoundAnchor_, prepares a \\\"reserve commitment hash\\\" using the chunks it currently stores in its reserve and calculates the \\\"storage depth\\\" (see Bee for details). These values, if calculated honestly, and with the right chunks stored, should be the same for every node in a neighbourhood. This is the Schelling point. Each eligible node can then use these values, together with a random, single use, secret  _revealNonce_ and their _overlay_ as the pre-image values for the obsfucated _commit_, using the _wrapCommit_ method. Once the _commit_ round has elapsed, participating nodes must provide the values used to calculate their obsfucated _commit_ hash, which, once verified for correctness and proximity to the anchor are retained in the _currentReveals_. Nodes that have commited but do not reveal the correct values used to create the pre-image will have their stake \\\"frozen\\\" for a period of rounds proportional to their reported depth. During the _reveal_ round, randomness is updated after every successful reveal. Once the reveal round is concluded, the _currentRoundAnchor_ is updated and users can determine if they will be eligible their overlay will be eligible for the next commit phase using _isParticipatingInUpcomingRound_. When the _reveal_ phase has been concluded, the claim phase can begin. At this point, the truth teller and winner are already determined. By calling _isWinner_, an applicant node can run the relevant logic to determine if they have been selected as the beneficiary of this round. When calling _claim_, the current pot from the PostageStamp contract is withdrawn and transferred to that beneficiaries address. Nodes that have revealed values that differ from the truth, have their stakes \\\"frozen\\\" for a period of rounds proportional to their reported depth.\",\"events\":{\"ChunkCount(uint256)\":{\"details\":\"Emit from Postagestamp contract valid chunk count at the end of claim\"},\"Committed(uint256,bytes32)\":{\"details\":\"Logs that an overlay has committed\"},\"CountCommits(uint256)\":{\"details\":\"Emits the number of commits being processed by the claim phase.\"},\"CountReveals(uint256)\":{\"details\":\"Emits the number of reveals being processed by the claim phase.\"},\"CurrentRevealAnchor(uint256,bytes32)\":{\"details\":\"Bytes32 anhor of current reveal round\"},\"Revealed(uint256,bytes32,uint256,uint256,bytes32,uint8)\":{\"details\":\"Logs that an overlay has revealed\"},\"TruthSelected(bytes32,uint8)\":{\"details\":\"Emitted when the truth oracle of a round is selected in the claim phase.\"},\"WinnerSelected((address,bytes32,uint256,uint256,bytes32,uint8))\":{\"details\":\"Emitted when the winner of a round is selected in the claim phase\"}},\"kind\":\"dev\",\"methods\":{\"commit(bytes32,bytes32,uint256)\":{\"details\":\"If a node's overlay is _inProximity_(_depth_) of the _currentRoundAnchor_, that node may compute an _obfuscatedHash_ by providing their _overlay_, reported storage _depth_, reserve commitment _hash_ and a randomly generated, and secret _revealNonce_ to the _wrapCommit_ method.\",\"params\":{\"_obfuscatedHash\":\"The calculated hash resultant of the required pre-image values.\",\"_overlay\":\"The overlay referenced in the pre-image. Must be staked by at least the minimum value, and be derived from the same key pair as the message sender.\"}},\"constructor\":{\"params\":{\"oracleContract\":\"the address of the linked PriceOracle contract.\",\"postageContract\":\"the address of the linked PostageStamp contract.\",\"staking\":\"the address of the linked Staking contract.\"}},\"currentRoundAnchor()\":{\"details\":\"A node must be within proximity order of less than or equal to the storage depth they intend to report.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"inProximity(bytes32,bytes32,uint8)\":{\"params\":{\"A\":\"An overlay address to compare.\",\"B\":\"An overlay address to compare.\",\"minimum\":\"Minimum proximity order.\"}},\"isParticipatingInUpcomingRound(bytes32,uint8)\":{\"params\":{\"depth\":\"The storage depth the applicant intends to report.\",\"overlay\":\"The overlay address of the applicant.\"}},\"isWinner(bytes32)\":{\"params\":{\"_overlay\":\"The overlay address of the applicant.\"}},\"pause()\":{\"details\":\"Pause the contract. The contract is provably stopped by renouncing the pauser role and the admin role after pausing, can only be called by the `PAUSER`\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"reveal(bytes32,uint8,bytes32,bytes32)\":{\"params\":{\"_depth\":\"The reported depth.\",\"_hash\":\"The reserve commitment hash.\",\"_overlay\":\"The overlay address of the applicant.\",\"_revealNonce\":\"The nonce used to generate the commit that is being revealed.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unPause()\":{\"details\":\"Unpause the contract, can only be called by the pauser when paused\"},\"wrapCommit(bytes32,uint8,bytes32,bytes32)\":{\"details\":\"_revealNonce_ must be randomly generated, used once and kept secret until the reveal phase.\",\"params\":{\"_depth\":\"The reported depth.\",\"_hash\":\"The reserve commitment hash.\",\"_overlay\":\"The overlay address of the applicant.\",\"revealNonce\":\"A random, single use, secret nonce.\"}}},\"title\":\"Redistribution contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim()\":{\"notice\":\"Conclude the current round by identifying the selected truth teller and beneficiary.\"},\"commit(bytes32,bytes32,uint256)\":{\"notice\":\"Begin application for a round if eligible. Commit a hashed value for which the pre-image will be subsequently revealed.\"},\"currentPhaseClaim()\":{\"notice\":\"Returns true if current block is during claim phase.\"},\"currentPhaseCommit()\":{\"notice\":\"Returns true if current block is during commit phase.\"},\"currentPhaseReveal()\":{\"notice\":\"Returns true if current block is during reveal phase.\"},\"currentRound()\":{\"notice\":\"The number of the current round.\"},\"currentRoundAnchor()\":{\"notice\":\"The anchor used to determine eligibility for the current round.\"},\"currentRoundReveals()\":{\"notice\":\"Returns true if current block is during reveal phase.\"},\"currentSeed()\":{\"notice\":\"Returns the current random seed which is used to determine later utilised random numbers. If rounds have elapsed without reveals, hash the seed with an incremented nonce to produce a new random seed and hence a new round anchor.\"},\"inProximity(bytes32,bytes32,uint8)\":{\"notice\":\"Returns true if an overlay address _A_ is within proximity order _minimum_ of _B_.\"},\"isParticipatingInUpcomingRound(bytes32,uint8)\":{\"notice\":\"Determine if a the owner of a given overlay can participate in the upcoming round.\"},\"isWinner(bytes32)\":{\"notice\":\"Determine if a the owner of a given overlay will be the beneficiary of the claim phase.\"},\"nextSeed()\":{\"notice\":\"Returns the seed which will become current once the next commit phase begins. Used to determine what the next round's anchor will be.\"},\"reveal(bytes32,uint8,bytes32,bytes32)\":{\"notice\":\"Reveal the pre-image values used to generate commit provided during this round's commit phase.\"},\"setFreezingParams(uint256,uint256)\":{\"notice\":\"Set freezing parameters\"},\"wrapCommit(bytes32,uint8,bytes32,bytes32)\":{\"notice\":\"Hash the pre-image values to the obsfucated hash.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Redistribution.sol\":\"Redistribution\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"src/Redistribution.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.1;\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\n/**\\n * Implement interfaces to PostageStamp contract, PriceOracle contract and Staking contract.\\n * For PostageStmap we currently use \\\"withdraw\\\" to withdraw funds from Pot\\n * For PriceOracle we use \\\"adjustPrice\\\" to change price of PostageStamps\\n * For Staking contract we use \\\"lastUpdatedBlockNumberOfOverlay, freezeDeposit, ownerOfOverlay, stakeOfOverlay\\\"\\n */\\n\\ninterface IPostageStamp {\\n    function withdraw(address beneficiary) external;\\n\\n    function validChunkCount() external view returns (uint256);\\n}\\n\\ninterface IPriceOracle {\\n    function adjustPrice(uint256 redundancy) external;\\n}\\n\\ninterface IStakeRegistry {\\n    function lastUpdatedBlockNumberOfOverlay(bytes32 overlay) external view returns (uint256);\\n\\n    function freezeDeposit(bytes32 overlay, uint256 time) external;\\n\\n    function ownerOfOverlay(bytes32 overlay) external view returns (address);\\n\\n    function stakeOfOverlay(bytes32 overlay) external view returns (uint256);\\n}\\n\\n/**\\n * @title Redistribution contract\\n * @author The Swarm Authors\\n * @dev Implements a Schelling Co-ordination game to form consensus around the Reserve Commitment hash. This takes\\n * place in three phases: _commit_, _reveal_ and _claim_.\\n *\\n * A node, upon establishing that it _isParticipatingInUpcomingRound_, i.e. it's overlay falls within proximity order\\n * of its reported depth with the _currentRoundAnchor_, prepares a \\\"reserve commitment hash\\\" using the chunks\\n * it currently stores in its reserve and calculates the \\\"storage depth\\\" (see Bee for details). These values, if calculated\\n * honestly, and with the right chunks stored, should be the same for every node in a neighbourhood. This is the Schelling point.\\n * Each eligible node can then use these values, together with a random, single use, secret  _revealNonce_ and their\\n * _overlay_ as the pre-image values for the obsfucated _commit_, using the _wrapCommit_ method.\\n *\\n * Once the _commit_ round has elapsed, participating nodes must provide the values used to calculate their obsfucated\\n * _commit_ hash, which, once verified for correctness and proximity to the anchor are retained in the _currentReveals_.\\n * Nodes that have commited but do not reveal the correct values used to create the pre-image will have their stake\\n * \\\"frozen\\\" for a period of rounds proportional to their reported depth.\\n *\\n * During the _reveal_ round, randomness is updated after every successful reveal. Once the reveal round is concluded,\\n * the _currentRoundAnchor_ is updated and users can determine if they will be eligible their overlay will be eligible\\n * for the next commit phase using _isParticipatingInUpcomingRound_.\\n *\\n * When the _reveal_ phase has been concluded, the claim phase can begin. At this point, the truth teller and winner\\n * are already determined. By calling _isWinner_, an applicant node can run the relevant logic to determine if they have\\n * been selected as the beneficiary of this round. When calling _claim_, the current pot from the PostageStamp contract\\n * is withdrawn and transferred to that beneficiaries address. Nodes that have revealed values that differ from the truth,\\n * have their stakes \\\"frozen\\\" for a period of rounds proportional to their reported depth.\\n */\\n\\ncontract Redistribution is AccessControl, Pausable {\\n    // An eligible user may commit to an _obfuscatedHash_ during the commit phase...\\n    struct Commit {\\n        bytes32 overlay;\\n        address owner;\\n        uint256 stake;\\n        bytes32 obfuscatedHash;\\n        bool revealed;\\n        uint256 revealIndex;\\n    }\\n    // ...then provide the actual values that are the constituents of the pre-image of the _obfuscatedHash_\\n    // during the reveal phase.\\n    struct Reveal {\\n        address owner;\\n        bytes32 overlay;\\n        uint256 stake;\\n        uint256 stakeDensity;\\n        bytes32 hash;\\n        uint8 depth;\\n    }\\n\\n    // The address of the linked PostageStamp contract.\\n    IPostageStamp public PostageContract;\\n    // The address of the linked PriceOracle contract.\\n    IPriceOracle public OracleContract;\\n    // The address of the linked Staking contract.\\n    IStakeRegistry public Stakes;\\n\\n    // Commits for the current round.\\n    Commit[] public currentCommits;\\n    // Reveals for the current round.\\n    Reveal[] public currentReveals;\\n\\n    // Role allowed to pause.\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    uint256 public penaltyMultiplierDisagreement = 1;\\n    uint256 public penaltyMultiplierNonRevealed = 2;\\n\\n    // Maximum value of the keccack256 hash.\\n    bytes32 MaxH = bytes32(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff);\\n\\n    // The current anchor that being processed for the reveal and claim phases of the round.\\n    bytes32 currentRevealRoundAnchor;\\n\\n    // The current random value from which we will random.\\n    // inputs for selection of the truth teller and beneficiary.\\n    bytes32 seed;\\n\\n    // The miniumum stake allowed to be staked using the Staking contract.\\n    uint256 public minimumStake = 100000000000000000;\\n\\n    // The number of the currently active round phases.\\n    uint256 public currentCommitRound;\\n    uint256 public currentRevealRound;\\n    uint256 public currentClaimRound;\\n\\n    // The length of a round in blocks.\\n    uint256 public roundLength = 152;\\n\\n    // The reveal of the winner of the last round.\\n    Reveal public winner;\\n\\n    /**\\n    * @dev Pause the contract. The contract is provably stopped by renouncing\\n     the pauser role and the admin role after pausing, can only be called by the `PAUSER`\\n     */\\n    function pause() public {\\n        require(hasRole(PAUSER_ROLE, msg.sender), \\\"only pauser can pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpause the contract, can only be called by the pauser when paused\\n     */\\n    function unPause() public {\\n        require(hasRole(PAUSER_ROLE, msg.sender), \\\"only pauser can unpause\\\");\\n        _unpause();\\n    }\\n\\n    /**\\n     * @param staking the address of the linked Staking contract.\\n     * @param postageContract the address of the linked PostageStamp contract.\\n     * @param oracleContract the address of the linked PriceOracle contract.\\n     */\\n    constructor(address staking, address postageContract, address oracleContract, address multisig) {\\n        Stakes = IStakeRegistry(staking);\\n        PostageContract = IPostageStamp(postageContract);\\n        OracleContract = IPriceOracle(oracleContract);\\n        _setupRole(DEFAULT_ADMIN_ROLE, multisig);\\n        _setupRole(PAUSER_ROLE, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Emitted when the winner of a round is selected in the claim phase\\n     */\\n    event WinnerSelected(Reveal winner);\\n\\n    /**\\n     * @dev Emitted when the truth oracle of a round is selected in the claim phase.\\n     */\\n    event TruthSelected(bytes32 hash, uint8 depth);\\n\\n    // Next two events to be removed after testing phase pending some other usefulness being found.\\n    /**\\n     * @dev Emits the number of commits being processed by the claim phase.\\n     */\\n    event CountCommits(uint256 _count);\\n\\n    /**\\n     * @dev Emits the number of reveals being processed by the claim phase.\\n     */\\n    event CountReveals(uint256 _count);\\n\\n    /**\\n     * @dev Logs that an overlay has committed\\n     */\\n    event Committed(uint256 roundNumber, bytes32 overlay);\\n    /**\\n     * @dev Emit from Postagestamp contract valid chunk count at the end of claim\\n     */\\n    event ChunkCount(uint256 validChunkCount);\\n\\n    /**\\n     * @dev Bytes32 anhor of current reveal round\\n     */\\n    event CurrentRevealAnchor(uint256 roundNumber, bytes32 anchor);\\n\\n    /**\\n     * @dev Logs that an overlay has revealed\\n     */\\n    event Revealed(\\n        uint256 roundNumber,\\n        bytes32 overlay,\\n        uint256 stake,\\n        uint256 stakeDensity,\\n        bytes32 reserveCommitment,\\n        uint8 depth\\n    );\\n\\n    /**\\n     * @notice Set freezing parameters\\n     */\\n    function setFreezingParams(uint256 _penaltyMultiplierDisagreement, uint256 _penaltyMultiplierNonRevealed) external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"caller is not the admin\\\");\\n        penaltyMultiplierDisagreement = _penaltyMultiplierDisagreement;\\n        penaltyMultiplierNonRevealed = _penaltyMultiplierNonRevealed;\\n    }\\n\\n    /**\\n     * @notice The number of the current round.\\n     */\\n    function currentRound() public view returns (uint256) {\\n        return (block.number / roundLength);\\n    }\\n\\n    /**\\n     * @notice Returns true if current block is during commit phase.\\n     */\\n    function currentPhaseCommit() public view returns (bool) {\\n        if (block.number % roundLength < roundLength / 4) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Returns true if current block is during reveal phase.\\n     */\\n    function currentPhaseReveal() public view returns (bool) {\\n        uint256 number = block.number % roundLength;\\n        if (number >= roundLength / 4 && number < roundLength / 2) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Returns true if current block is during claim phase.\\n     */\\n    function currentPhaseClaim() public view returns (bool) {\\n        if (block.number % roundLength >= roundLength / 2) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Returns true if current block is during reveal phase.\\n     */\\n    function currentRoundReveals() public view returns (Reveal[] memory) {\\n        require(currentPhaseClaim(), \\\"not in claim phase\\\");\\n        uint256 cr = currentRound();\\n        require(cr == currentRevealRound, \\\"round received no reveals\\\");\\n        return currentReveals;\\n    }\\n\\n    /**\\n     * @notice Begin application for a round if eligible. Commit a hashed value for which the pre-image will be\\n     * subsequently revealed.\\n     * @dev If a node's overlay is _inProximity_(_depth_) of the _currentRoundAnchor_, that node may compute an\\n     * _obfuscatedHash_ by providing their _overlay_, reported storage _depth_, reserve commitment _hash_ and a\\n     * randomly generated, and secret _revealNonce_ to the _wrapCommit_ method.\\n     * @param _obfuscatedHash The calculated hash resultant of the required pre-image values.\\n     * @param _overlay The overlay referenced in the pre-image. Must be staked by at least the minimum value,\\n     * and be derived from the same key pair as the message sender.\\n     */\\n    function commit(bytes32 _obfuscatedHash, bytes32 _overlay, uint256 _roundNumber) external whenNotPaused {\\n        require(currentPhaseCommit(), \\\"not in commit phase\\\");\\n        require(block.number % roundLength != (roundLength / 4) - 1, \\\"can not commit in last block of phase\\\");\\n        uint256 cr = currentRound();\\n        require(cr <= _roundNumber, \\\"commit round over\\\");\\n        require(cr >= _roundNumber, \\\"commit round not started yet\\\");\\n\\n        uint256 nstake = Stakes.stakeOfOverlay(_overlay);\\n        require(nstake >= minimumStake, \\\"stake must exceed minimum\\\");\\n        require(Stakes.ownerOfOverlay(_overlay) == msg.sender, \\\"owner must match sender\\\");\\n\\n        require(\\n            Stakes.lastUpdatedBlockNumberOfOverlay(_overlay) < block.number - 2 * roundLength,\\n            \\\"must have staked 2 rounds prior\\\"\\n        );\\n\\n        // if we are in a new commit phase, reset the array of commits and\\n        // set the currentCommitRound to be the current one\\n        if (cr != currentCommitRound) {\\n            delete currentCommits;\\n            currentCommitRound = cr;\\n        }\\n\\n        uint256 commitsArrayLength = currentCommits.length;\\n\\n        for (uint256 i = 0; i < commitsArrayLength; i++) {\\n            require(currentCommits[i].overlay != _overlay, \\\"only one commit each per round\\\");\\n        }\\n\\n        currentCommits.push(\\n            Commit({\\n                owner: msg.sender,\\n                overlay: _overlay,\\n                stake: nstake,\\n                obfuscatedHash: _obfuscatedHash,\\n                revealed: false,\\n                revealIndex: 0\\n            })\\n        );\\n\\n        emit Committed(_roundNumber, _overlay);\\n    }\\n\\n    /**\\n     * @notice Returns the current random seed which is used to determine later utilised random numbers.\\n     * If rounds have elapsed without reveals, hash the seed with an incremented nonce to produce a new\\n     * random seed and hence a new round anchor.\\n     */\\n    function currentSeed() public view returns (bytes32) {\\n        uint256 cr = currentRound();\\n        bytes32 currentSeedValue = seed;\\n\\n        if (cr > currentRevealRound + 1) {\\n            uint256 difference = cr - currentRevealRound - 1;\\n            currentSeedValue = keccak256(abi.encodePacked(currentSeedValue, difference));\\n        }\\n\\n        return currentSeedValue;\\n    }\\n\\n    /**\\n     * @notice Returns the seed which will become current once the next commit phase begins.\\n     * Used to determine what the next round's anchor will be.\\n     */\\n    function nextSeed() public view returns (bytes32) {\\n        uint256 cr = currentRound() + 1;\\n        bytes32 currentSeedValue = seed;\\n\\n        if (cr > currentRevealRound + 1) {\\n            uint256 difference = cr - currentRevealRound - 1;\\n            currentSeedValue = keccak256(abi.encodePacked(currentSeedValue, difference));\\n        }\\n\\n        return currentSeedValue;\\n    }\\n\\n    /**\\n     * @notice Updates the source of randomness. Uses block.difficulty in pre-merge chains, this is substituted\\n     * to block.prevrandao in post merge chains.\\n     */\\n    function updateRandomness() private {\\n        seed = keccak256(abi.encode(seed, block.difficulty));\\n    }\\n\\n    /**\\n     * @notice Returns true if an overlay address _A_ is within proximity order _minimum_ of _B_.\\n     * @param A An overlay address to compare.\\n     * @param B An overlay address to compare.\\n     * @param minimum Minimum proximity order.\\n     */\\n    function inProximity(bytes32 A, bytes32 B, uint8 minimum) public pure returns (bool) {\\n        if (minimum == 0) {\\n            return true;\\n        }\\n        return uint256(A ^ B) < uint256(2 ** (256 - minimum));\\n    }\\n\\n    /**\\n     * @notice Hash the pre-image values to the obsfucated hash.\\n     * @dev _revealNonce_ must be randomly generated, used once and kept secret until the reveal phase.\\n     * @param _overlay The overlay address of the applicant.\\n     * @param _depth The reported depth.\\n     * @param _hash The reserve commitment hash.\\n     * @param revealNonce A random, single use, secret nonce.\\n     */\\n    function wrapCommit(\\n        bytes32 _overlay,\\n        uint8 _depth,\\n        bytes32 _hash,\\n        bytes32 revealNonce\\n    ) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_overlay, _depth, _hash, revealNonce));\\n    }\\n\\n    /**\\n     * @notice Reveal the pre-image values used to generate commit provided during this round's commit phase.\\n     * @param _overlay The overlay address of the applicant.\\n     * @param _depth The reported depth.\\n     * @param _hash The reserve commitment hash.\\n     * @param _revealNonce The nonce used to generate the commit that is being revealed.\\n     */\\n    function reveal(bytes32 _overlay, uint8 _depth, bytes32 _hash, bytes32 _revealNonce) external whenNotPaused {\\n        require(currentPhaseReveal(), \\\"not in reveal phase\\\");\\n\\n        uint256 cr = currentRound();\\n\\n        require(cr == currentCommitRound, \\\"round received no commits\\\");\\n        if (cr != currentRevealRound) {\\n            currentRevealRoundAnchor = currentRoundAnchor();\\n            delete currentReveals;\\n            currentRevealRound = cr;\\n            emit CurrentRevealAnchor(cr, currentRevealRoundAnchor);\\n            updateRandomness();\\n        }\\n\\n        bytes32 commitHash = wrapCommit(_overlay, _depth, _hash, _revealNonce);\\n\\n        uint256 commitsArrayLength = currentCommits.length;\\n\\n        for (uint256 i = 0; i < commitsArrayLength; i++) {\\n            if (currentCommits[i].overlay == _overlay && commitHash == currentCommits[i].obfuscatedHash) {\\n                require(\\n                    inProximity(currentCommits[i].overlay, currentRevealRoundAnchor, _depth),\\n                    \\\"anchor out of self reported depth\\\"\\n                );\\n                //check can only revealed once\\n                require(currentCommits[i].revealed == false, \\\"participant already revealed\\\");\\n                currentCommits[i].revealed = true;\\n                currentCommits[i].revealIndex = currentReveals.length;\\n\\n                currentReveals.push(\\n                    Reveal({\\n                        owner: currentCommits[i].owner,\\n                        overlay: currentCommits[i].overlay,\\n                        stake: currentCommits[i].stake,\\n                        stakeDensity: currentCommits[i].stake * uint256(2 ** _depth),\\n                        hash: _hash,\\n                        depth: _depth\\n                    })\\n                );\\n\\n                emit Revealed(\\n                    cr,\\n                    currentCommits[i].overlay,\\n                    currentCommits[i].stake,\\n                    currentCommits[i].stake * uint256(2 ** _depth),\\n                    _hash,\\n                    _depth\\n                );\\n\\n                return;\\n            }\\n        }\\n\\n        require(false, \\\"no matching commit or hash\\\");\\n    }\\n\\n    /**\\n     * @notice Determine if a the owner of a given overlay will be the beneficiary of the claim phase.\\n     * @param _overlay The overlay address of the applicant.\\n     */\\n    function isWinner(bytes32 _overlay) public view returns (bool) {\\n        require(currentPhaseClaim(), \\\"winner not determined yet\\\");\\n        uint256 cr = currentRound();\\n        require(cr == currentRevealRound, \\\"round received no reveals\\\");\\n        require(cr > currentClaimRound, \\\"round already received successful claim\\\");\\n\\n        uint256 currentWinnerSelectionSum;\\n        bytes32 winnerIs;\\n        bytes32 randomNumber;\\n        uint256 randomNumberTrunc;\\n        bytes32 truthRevealedHash;\\n        uint8 truthRevealedDepth;\\n        uint256 revIndex;\\n        string memory winnerSelectionAnchor = currentWinnerSelectionAnchor();\\n        uint256 k = 0;\\n\\n        // Get current truth\\n        (truthRevealedHash, truthRevealedDepth) = getCurrentTruth();\\n        uint256 commitsArrayLength = currentCommits.length;\\n\\n        for (uint256 i = 0; i < commitsArrayLength; i++) {\\n            revIndex = currentCommits[i].revealIndex;\\n\\n            // Deterministically read winner\\n            if (\\n                currentCommits[i].revealed &&\\n                truthRevealedHash == currentReveals[revIndex].hash &&\\n                truthRevealedDepth == currentReveals[revIndex].depth\\n            ) {\\n                currentWinnerSelectionSum += currentReveals[revIndex].stakeDensity;\\n                randomNumber = keccak256(abi.encodePacked(winnerSelectionAnchor, k));\\n                randomNumberTrunc = uint256(randomNumber & MaxH);\\n\\n                if (\\n                    randomNumberTrunc * currentWinnerSelectionSum <\\n                    currentReveals[revIndex].stakeDensity * (uint256(MaxH) + 1)\\n                ) {\\n                    winnerIs = currentReveals[revIndex].overlay;\\n                }\\n\\n                k++;\\n            }\\n        }\\n\\n        return (winnerIs == _overlay);\\n    }\\n\\n    /**\\n     * @notice Determine if a the owner of a given overlay can participate in the upcoming round.\\n     * @param overlay The overlay address of the applicant.\\n     * @param depth The storage depth the applicant intends to report.\\n     */\\n    function isParticipatingInUpcomingRound(bytes32 overlay, uint8 depth) public view returns (bool) {\\n        require(currentPhaseClaim() || currentPhaseCommit(), \\\"not determined for upcoming round yet\\\");\\n        require(\\n            Stakes.lastUpdatedBlockNumberOfOverlay(overlay) < block.number - 2 * roundLength,\\n            \\\"stake updated recently\\\"\\n        );\\n        require(Stakes.stakeOfOverlay(overlay) >= minimumStake, \\\"stake amount does not meet minimum\\\");\\n        return inProximity(overlay, currentRoundAnchor(), depth);\\n    }\\n\\n    /**\\n     * @notice The random value used to choose the selected truth teller.\\n     */\\n    function currentTruthSelectionAnchor() private view returns (string memory) {\\n        require(currentPhaseClaim(), \\\"not determined for current round yet\\\");\\n        uint256 cr = currentRound();\\n        require(cr == currentRevealRound, \\\"round received no reveals\\\");\\n\\n        return string(abi.encodePacked(seed, \\\"0\\\"));\\n    }\\n\\n    /**\\n     * @notice The random value used to choose the selected beneficiary.\\n     */\\n    function currentWinnerSelectionAnchor() private view returns (string memory) {\\n        require(currentPhaseClaim(), \\\"not determined for current round yet\\\");\\n        uint256 cr = currentRound();\\n        require(cr == currentRevealRound, \\\"round received no reveals\\\");\\n\\n        return string(abi.encodePacked(seed, \\\"1\\\"));\\n    }\\n\\n    /**\\n     * @notice The anchor used to determine eligibility for the current round.\\n     * @dev A node must be within proximity order of less than or equal to the storage depth they intend to report.\\n     */\\n    function currentRoundAnchor() public view returns (bytes32 returnVal) {\\n        uint256 cr = currentRound();\\n\\n        if (currentPhaseCommit() || (cr > currentRevealRound && !currentPhaseClaim())) {\\n            return currentSeed();\\n        }\\n\\n        if (currentPhaseReveal() && cr == currentRevealRound) {\\n            require(false, \\\"can't return value after first reveal\\\");\\n        }\\n\\n        if (currentPhaseClaim()) {\\n            return nextSeed();\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function to get this round truth\\n     * @dev\\n     */\\n    function getCurrentTruth() internal view returns (bytes32 Hash, uint8 Depth) {\\n        uint256 currentSum;\\n        bytes32 randomNumber;\\n        uint256 randomNumberTrunc;\\n\\n        bytes32 truthRevealedHash;\\n        uint8 truthRevealedDepth;\\n        uint256 revIndex;\\n        string memory truthSelectionAnchor = currentTruthSelectionAnchor();\\n        uint256 commitsArrayLength = currentCommits.length;\\n\\n        for (uint256 i = 0; i < commitsArrayLength; i++) {\\n            if (currentCommits[i].revealed) {\\n                revIndex = currentCommits[i].revealIndex;\\n                currentSum += currentReveals[revIndex].stakeDensity;\\n                randomNumber = keccak256(abi.encodePacked(truthSelectionAnchor, i));\\n                randomNumberTrunc = uint256(randomNumber & MaxH);\\n\\n                // question is whether randomNumber / MaxH < probability\\n                // where probability is stakeDensity / currentSum\\n                // to avoid resorting to floating points all divisions should be\\n                // simplified with multiplying both sides (as long as divisor > 0)\\n                // randomNumber / (MaxH + 1) < stakeDensity / currentSum\\n                // ( randomNumber / (MaxH + 1) ) * currentSum < stakeDensity\\n                // randomNumber * currentSum < stakeDensity * (MaxH + 1)\\n                if (randomNumberTrunc * currentSum < currentReveals[revIndex].stakeDensity * (uint256(MaxH) + 1)) {\\n                    truthRevealedHash = currentReveals[revIndex].hash;\\n                    truthRevealedDepth = currentReveals[revIndex].depth;\\n                }\\n            }\\n        }\\n\\n        return (truthRevealedHash, truthRevealedDepth);\\n    }\\n\\n    /**\\n     * @notice Conclude the current round by identifying the selected truth teller and beneficiary.\\n     * @dev\\n     */\\n    function claim() external whenNotPaused {\\n        require(currentPhaseClaim(), \\\"not in claim phase\\\");\\n        uint256 cr = currentRound();\\n        require(cr == currentRevealRound, \\\"round received no reveals\\\");\\n        require(cr > currentClaimRound, \\\"round already received successful claim\\\");\\n\\n        uint256 currentWinnerSelectionSum;\\n        bytes32 randomNumber;\\n        uint256 randomNumberTrunc;\\n        bytes32 truthRevealedHash;\\n        uint8 truthRevealedDepth;\\n        uint256 revIndex;\\n        string memory winnerSelectionAnchor = currentWinnerSelectionAnchor();\\n        uint256 k = 0;\\n\\n        // Get current truth\\n        (truthRevealedHash, truthRevealedDepth) = getCurrentTruth();\\n        uint256 commitsArrayLength = currentCommits.length;\\n        uint256 revealsArrayLength = currentReveals.length;\\n\\n        for (uint256 i = 0; i < commitsArrayLength; i++) {\\n            revIndex = currentCommits[i].revealIndex;\\n\\n            // Select winner with valid truth\\n            if (\\n                currentCommits[i].revealed &&\\n                truthRevealedHash == currentReveals[revIndex].hash &&\\n                truthRevealedDepth == currentReveals[revIndex].depth\\n            ) {\\n                currentWinnerSelectionSum += currentReveals[revIndex].stakeDensity;\\n                randomNumber = keccak256(abi.encodePacked(winnerSelectionAnchor, k));\\n                randomNumberTrunc = uint256(randomNumber & MaxH);\\n\\n                if (\\n                    randomNumberTrunc * currentWinnerSelectionSum <\\n                    currentReveals[revIndex].stakeDensity * (uint256(MaxH) + 1)\\n                ) {\\n                    winner = currentReveals[revIndex];\\n                }\\n\\n                k++;\\n            }\\n\\n            // Freeze deposit if any truth is false\\n            if (\\n                currentCommits[i].revealed &&\\n                (truthRevealedHash != currentReveals[revIndex].hash ||\\n                    truthRevealedDepth != currentReveals[revIndex].depth)\\n            ) {\\n                Stakes.freezeDeposit(\\n                    currentReveals[revIndex].overlay,\\n                    penaltyMultiplierDisagreement * roundLength * uint256(2 ** truthRevealedDepth)\\n                );\\n            }\\n\\n            // Slash deposits if revealed is false\\n            if (!currentCommits[i].revealed) {\\n                // slash in later phase (ph5)\\n                // Stakes.slashDeposit(currentCommits[i].overlay, currentCommits[i].stake);\\n                Stakes.freezeDeposit(\\n                    currentCommits[i].overlay,\\n                    penaltyMultiplierNonRevealed * roundLength * uint256(2 ** truthRevealedDepth)\\n                );\\n            }\\n        }\\n\\n        // Apply Important state changes\\n        PostageContract.withdraw(winner.owner);\\n        OracleContract.adjustPrice(uint256(k));\\n        currentClaimRound = cr;\\n\\n        // Emit function Events\\n        emit CountCommits(commitsArrayLength);\\n        emit CountReveals(revealsArrayLength);\\n        emit TruthSelected(truthRevealedHash, truthRevealedDepth);\\n        emit WinnerSelected(winner);\\n        emit ChunkCount(PostageContract.validChunkCount());\\n    }\\n}\\n\",\"keccak256\":\"0xd87465ef4811007d93dd4c936be1328bbc8a9a068c85585ed7921c358c921a1e\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102485760003560e01c806382b39b1b1161013b578063c203ce52116100b8578063dfbf53ae1161007c578063dfbf53ae14610462578063e63ab1e91461046a578063ec5ffac214610472578063f7b188a51461047a578063fb00f2f31461048257610248565b8063c203ce5214610419578063ce98774514610421578063d1e8b63d14610434578063d547741f1461043c578063d9106d251461044f57610248565b80638d8b6428116100ff5780638d8b6428146103d057806391d14854146103d8578063a217fddf146103eb578063b78a52a7146103f3578063c1d810d51461040657610248565b806382b39b1b1461038b57806383220626146103b05780638456cb59146103b85780638a19c8bc146103c05780638b649b94146103c857610248565b80635c975abb116101c957806369da91141161018d57806369da91141461033b5780636f94aaf21461034357806372286cba1461034b57806377c75d10146103705780637fe019c61461038357610248565b80635c975abb146103135780635d4844ea1461031b57806362fd29ae1461032357806364c34a851461032b57806369bfac011461033357610248565b80632f3906da116102105780632f3906da146102d557806336568abe146102dd5780634a2e7598146102f05780634e3727d2146103035780634e71d92d1461030b57610248565b806301ffc9a71461024d5780631835009614610276578063248a9ca31461028b5780632a4e6249146102ab5780632f2ff15d146102c0575b600080fd5b61026061025b366004612b02565b610495565b60405161026d9190612d24565b60405180910390f35b61027e6104c2565b60405161026d9190612c56565b61029e6102993660046129f7565b6104d6565b60405161026d9190612d2f565b6102b36104eb565b60405161026d9190612ca0565b6102d36102ce366004612a0f565b6105e8565b005b610260610609565b6102d36102eb366004612a0f565b61065e565b6102d36102fe366004612a3e565b6106a4565b61029e610b82565b6102d3610b88565b610260611399565b61027e6113a2565b61029e6113b1565b61029e611434565b61029e6114c5565b61027e6114cb565b61029e6114da565b61035e6103593660046129f7565b6114e0565b60405161026d96959493929190612d38565b61026061037e3660046129f7565b611536565b61029e611809565b61039e6103993660046129f7565b61180f565b60405161026d96959493929190612c6a565b61029e611862565b6102d361186d565b61029e6118bd565b61029e6118d2565b6102606118d8565b6102606103e6366004612a0f565b611909565b61029e611932565b610260610401366004612a9d565b611937565b6102d3610414366004612ac8565b611ada565b61029e612031565b61029e61042f366004612ac8565b612037565b610260612070565b6102d361044a366004612a0f565b61209c565b6102d361045d366004612b42565b6120b8565b61039e6120ea565b61029e61210e565b61029e612132565b6102d3612138565b610260610490366004612a69565b612186565b60006001600160e01b03198216637965db0b60e01b14806104ba57506104ba826121bf565b90505b919050565b60015461010090046001600160a01b031681565b60009081526020819052604090206001015490565b60606104f56118d8565b61051a5760405162461bcd60e51b815260040161051190612e41565b60405180910390fd5b60006105246118bd565b9050600d5481146105475760405162461bcd60e51b81526004016105119061326f565b6005805480602002602001604051908101604052809291908181526020016000905b828210156105dd5760008481526020908190206040805160c0810182526006860290920180546001600160a01b031683526001808201548486015260028201549284019290925260038101546060840152600481015460808401526005015460ff1660a08301529083529092019101610569565b505050509150505b90565b6105f1826104d6565b6105fa816121d8565b61060483836121ec565b505050565b600080600f544361061a919061368e565b90506004600f5461062b9190613498565b811015801561064757506002600f546106449190613498565b81105b156106565760019150506105e5565b600091505090565b610666612271565b6001600160a01b0316816001600160a01b0316146106965760405162461bcd60e51b8152600401610511906133bd565b6106a08282612275565b5050565b6106ac6122f8565b6106b4612070565b6106d05760405162461bcd60e51b815260040161051190612f6f565b60016004600f546106e19190613498565b6106eb9190613619565b600f546106f8904361368e565b14156107165760405162461bcd60e51b815260040161051190612e6d565b60006107206118bd565b9050818111156107425760405162461bcd60e51b8152600401610511906132dd565b818110156107625760405162461bcd60e51b815260040161051190613238565b6003546040516348962b9360e01b81526000916001600160a01b0316906348962b9390610793908790600401612d2f565b60206040518083038186803b1580156107ab57600080fd5b505afa1580156107bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e39190612b2a565b9050600b548110156108075760405162461bcd60e51b815260040161051190613186565b60035460405163a0d22b2160e01b815233916001600160a01b03169063a0d22b2190610837908890600401612d2f565b60206040518083038186803b15801561084f57600080fd5b505afa158015610863573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088791906129db565b6001600160a01b0316146108ad5760405162461bcd60e51b815260040161051190612eb2565b600f546108bb9060026135d7565b6108c59043613619565b6003546040516376f2098160e11b81526001600160a01b039091169063ede41302906108f5908890600401612d2f565b60206040518083038186803b15801561090d57600080fd5b505afa158015610921573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109459190612b2a565b106109625760405162461bcd60e51b8152600401610511906131bd565b600c54821461097d57610977600460006128fa565b600c8290555b60045460005b818110156109ef5785600482815481106109ad57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016000015414156109dd5760405162461bcd60e51b8152600401610511906132a6565b806109e781613673565b915050610983565b506040805160c0810182528681523360208201908152818301858152606083018a815260006080850181815260a0860182815260048054600181018255935295517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b60069093029283015593517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c820180546001600160a01b0319166001600160a01b0390921691909117905591517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d830155517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e82015590517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19f8201805460ff191691151591909117905590517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd1a090910155517f68e0867601a98978930107aee7f425665e61edd70ca594c68ca5da9e81f84c2990610b729086908890612b89565b60405180910390a1505050505050565b60065481565b610b906122f8565b610b986118d8565b610bb45760405162461bcd60e51b815260040161051190612e41565b6000610bbe6118bd565b9050600d548114610be15760405162461bcd60e51b81526004016105119061326f565b600e548111610c025760405162461bcd60e51b81526004016105119061333f565b6000806000806000806000610c1561231d565b90506000610c21612398565b6004546005549297509095509060005b8281101561111f5760048181548110610c5a57634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160050154955060048181548110610c8f57634e487b7160e01b600052603260045260246000fd5b600091825260209091206004600690920201015460ff168015610ce3575060058681548110610cce57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016004015488145b8015610d28575060058681548110610d0b57634e487b7160e01b600052603260045260246000fd5b600091825260209091206005600690920201015460ff8881169116145b15610e935760058681548110610d4e57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600301548b610d6b9190613480565b9a508484604051602001610d80929190612bbf565b60408051601f198184030181529190528051602090910120600854909a50808b169950610dae906001613480565b60058781548110610dcf57634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160030154610deb91906135d7565b610df58c8b6135d7565b1015610e855760058681548110610e1c57634e487b7160e01b600052603260045260246000fd5b600091825260209091206006909102018054601080546001600160a01b0319166001600160a01b039092169190911790556001810154601155600281015460125560038101546013556004810154601455600501546015805460ff191660ff9092169190911790555b83610e8f81613673565b9450505b60048181548110610eb457634e487b7160e01b600052603260045260246000fd5b600091825260209091206004600690920201015460ff168015610f4d575060058681548110610ef357634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016004015488141580610f4d575060058681548110610f2f57634e487b7160e01b600052603260045260246000fd5b600091825260209091206005600690920201015460ff888116911614155b1561101357600354600580546001600160a01b039092169163837fd16a919089908110610f8a57634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160010154896002610fa99190613505565b600f54600654610fb991906135d7565b610fc391906135d7565b6040518363ffffffff1660e01b8152600401610fe0929190612b89565b600060405180830381600087803b158015610ffa57600080fd5b505af115801561100e573d6000803e3d6000fd5b505050505b6004818154811061103457634e487b7160e01b600052603260045260246000fd5b600091825260209091206004600690920201015460ff1661110d57600354600480546001600160a01b039092169163837fd16a91908490811061108757634e487b7160e01b600052603260045260246000fd5b60009182526020909120600690910201546110a38a6002613505565b600f546007546110b391906135d7565b6110bd91906135d7565b6040518363ffffffff1660e01b81526004016110da929190612b89565b600060405180830381600087803b1580156110f457600080fd5b505af1158015611108573d6000803e3d6000fd5b505050505b8061111781613673565b915050610c31565b506001546010546040516351cff8d960e01b81526001600160a01b036101009093048316926351cff8d99261115992911690600401612c56565b600060405180830381600087803b15801561117357600080fd5b505af1158015611187573d6000803e3d6000fd5b505060025460405163395f83cf60e11b81526001600160a01b0390911692506372bf079e91506111bb908690600401612d2f565b600060405180830381600087803b1580156111d557600080fd5b505af11580156111e9573d6000803e3d6000fd5b505050600e8c9055506040517f6752c5e71c95fb93bc7137adeb115a33fa4e54e2683e33d3f90c2bb1c4b6c2a590611222908490612d2f565b60405180910390a17f4c03de6a759749c0c9387b7014634dc5c6af610e1366023d90751c783a998f8d816040516112599190612d2f565b60405180910390a17f34e8eda4cd857cd2865becf58a47748f31415f4a382cbb2cc0c64b9a27c717be8787604051611292929190612d6b565b60405180910390a17f2756aa512df0e32847d196f374c5b2fa5f30705f2fe3a75b8baeac52f2af5b3960106040516112ca919061340c565b60405180910390a17fbee3fc8a3523c1a65fa9308ce1f2b8fd90c24975b141b754603194597846e4dd60018054906101000a90046001600160a01b03166001600160a01b0316638a5e8e326040518163ffffffff1660e01b815260040160206040518083038186803b15801561133f57600080fd5b505afa158015611353573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113779190612b2a565b6040516113849190612d2f565b60405180910390a15050505050505050505050565b60015460ff1690565b6003546001600160a01b031681565b6000806113bc6118bd565b6113c7906001613480565b600a54600d54919250906113dc906001613480565b82111561142e5760006001600d54846113f59190613619565b6113ff9190613619565b90508181604051602001611414929190612b89565b604051602081830303815290604052805190602001209150505b91505090565b60008061143f6118bd565b9050611449612070565b806114655750600d548111801561146557506114636118d8565b155b1561147a57611472611862565b9150506105e5565b611482610609565b801561148f5750600d5481145b156114ac5760405162461bcd60e51b815260040161051190612ee9565b6114b46118d8565b156114c1576114726113b1565b5090565b600c5481565b6002546001600160a01b031681565b600e5481565b600481815481106114f057600080fd5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501549395506001600160a01b0390921693909260ff9091169086565b60006115406118d8565b61155c5760405162461bcd60e51b815260040161051190612fd3565b60006115666118bd565b9050600d5481146115895760405162461bcd60e51b81526004016105119061326f565b600e5481116115aa5760405162461bcd60e51b81526004016105119061333f565b6000806000806000806000806115be61231d565b905060006115ca612398565b600454919650945060005b818110156117f557600481815481106115fe57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016005015494506004818154811061163357634e487b7160e01b600052603260045260246000fd5b600091825260209091206004600690920201015460ff16801561168757506005858154811061167257634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016004015487145b80156116cc5750600585815481106116af57634e487b7160e01b600052603260045260246000fd5b600091825260209091206005600690920201015460ff8781169116145b156117e357600585815481106116f257634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600301548b61170f9190613480565b9a508383604051602001611724929190612bbf565b60408051601f198184030181529190528051602090910120600854909950808a169850611752906001613480565b6005868154811061177357634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016003015461178f91906135d7565b6117998c8a6135d7565b10156117d557600585815481106117c057634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016001015499505b826117df81613673565b9350505b806117ed81613673565b9150506115d5565b505050999095149998505050505050505050565b600d5481565b6005818154811061181f57600080fd5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501546001600160a01b0390941695509193909260ff1686565b6000806113c76118bd565b6118977f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33611909565b6118b35760405162461bcd60e51b815260040161051190612de4565b6118bb612592565b565b6000600f54436118cd9190613498565b905090565b600f5481565b60006002600f546118e99190613498565b600f546118f6904361368e565b10611903575060016105e5565b50600090565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600081565b60006119416118d8565b8061194f575061194f612070565b61196b5760405162461bcd60e51b8152600401610511906130a2565b600f546119799060026135d7565b6119839043613619565b6003546040516376f2098160e11b81526001600160a01b039091169063ede41302906119b3908790600401612d2f565b60206040518083038186803b1580156119cb57600080fd5b505afa1580156119df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a039190612b2a565b10611a205760405162461bcd60e51b815260040161051190613156565b600b546003546040516348962b9360e01b81526001600160a01b03909116906348962b9390611a53908790600401612d2f565b60206040518083038186803b158015611a6b57600080fd5b505afa158015611a7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa39190612b2a565b1015611ac15760405162461bcd60e51b815260040161051190613114565b611ad383611acd611434565b84612186565b9392505050565b611ae26122f8565b611aea610609565b611b065760405162461bcd60e51b8152600401610511906130e7565b6000611b106118bd565b9050600c548114611b335760405162461bcd60e51b81526004016105119061300a565b600d548114611b9c57611b44611434565b600955611b536005600061291b565b600d8190556009546040517ff0ae472da9c8da86bda4991a549c03a3cb328b5f360ea11a5b8814f32bb8517691611b8c91849190612b89565b60405180910390a1611b9c6125e6565b6000611baa86868686612037565b60045490915060005b81811015612012578760048281548110611bdd57634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160000154148015611c2d575060048181548110611c1857634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016003015483145b1561200057611c7160048281548110611c5657634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016000015460095489612186565b611c8d5760405162461bcd60e51b815260040161051190612f2e565b60048181548110611cae57634e487b7160e01b600052603260045260246000fd5b600091825260209091206004600690920201015460ff1615611ce25760405162461bcd60e51b815260040161051190612f9c565b600160048281548110611d0557634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160040160006101000a81548160ff02191690831515021790555060058054905060048281548110611d5457634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016005018190555060056040518060c0016040528060048481548110611d9757634e487b7160e01b600052603260045260246000fd5b6000918252602091829020600160069092020101546001600160a01b0316825260048054929091019185908110611dde57634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160000154815260200160048481548110611e1657634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600201548152602001896002611e3a9190613505565b60048581548110611e5b57634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160020154611e7791906135d7565b815260208082018a905260ff8b8116604093840152845460018082018755600096875295839020855160069092020180546001600160a01b0319166001600160a01b03909216919091178155918401519482019490945590820151600282015560608201516003820155608082015160048083019190915560a0909201516005909101805460ff1916919093161790915580547f13fc17fd71632266fe82092de6dd91a06b4fa68d8dc950492e5421cbed55a6a591869184908110611f4c57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016000015460048481548110611f7f57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600201548a6002611f9e9190613505565b60048681548110611fbf57634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160020154611fdb91906135d7565b8a8c604051611fef96959493929190613455565b60405180910390a15050505061202b565b8061200a81613673565b915050611bb3565b5060405162461bcd60e51b815260040161051190613386565b50505050565b60075481565b6000848484846040516020016120509493929190612b97565b604051602081830303815290604052805190602001209050949350505050565b60006004600f546120819190613498565b600f5461208e904361368e565b1015611903575060016105e5565b6120a5826104d6565b6120ae816121d8565b6106048383612275565b6120c3600033611909565b6120df5760405162461bcd60e51b815260040161051190613308565b600691909155600755565b6010546011546012546013546014546015546001600160a01b039095169460ff1686565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b600b5481565b6121627f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33611909565b61217e5760405162461bcd60e51b815260040161051190613041565b6118bb612618565b600060ff821661219857506001611ad3565b6121a760ff83166101006135f6565b6121b29060026134f2565b8484181090509392505050565b6001600160e01b031981166301ffc9a760e01b14919050565b6121e9816121e4612271565b612653565b50565b6121f68282611909565b6106a0576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905561222d612271565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b3390565b61227f8282611909565b156106a0576000828152602081815260408083206001600160a01b03851684529091529020805460ff191690556122b4612271565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b612300611399565b156118bb5760405162461bcd60e51b815260040161051190613078565b60606123276118d8565b6123435760405162461bcd60e51b8152600401610511906131f4565b600061234d6118bd565b9050600d5481146123705760405162461bcd60e51b81526004016105119061326f565b600a546040516020016123839190612b76565b60405160208183030381529060405291505090565b60008060008060008060008060006123ae6126ac565b60045490915060005b8181101561258157600481815481106123e057634e487b7160e01b600052603260045260246000fd5b600091825260209091206004600690920201015460ff161561256f576004818154811061241d57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016005015493506005848154811061245257634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600301548961246f9190613480565b98508281604051602001612484929190612bbf565b60408051601f19818403018152919052805160209091012060085490985080891697506124b2906001613480565b600585815481106124d357634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600301546124ef91906135d7565b6124f98a896135d7565b101561256f576005848154811061252057634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016004015495506005848154811061255557634e487b7160e01b600052603260045260246000fd5b600091825260209091206005600690920201015460ff1694505b8061257981613673565b9150506123b7565b509398509196505050505050509091565b61259a6122f8565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586125cf612271565b6040516125dc9190612c56565b60405180910390a1565b600a54446040516020016125fb929190612b89565b60408051601f198184030181529190528051602090910120600a55565b612620612712565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6125cf612271565b61265d8282611909565b6106a05761266a81612736565b612675836020612748565b604051602001612686929190612be1565b60408051601f198184030181529082905262461bcd60e51b825261051191600401612d7c565b60606126b66118d8565b6126d25760405162461bcd60e51b8152600401610511906131f4565b60006126dc6118bd565b9050600d5481146126ff5760405162461bcd60e51b81526004016105119061326f565b600a546040516020016123839190612b63565b61271a611399565b6118bb5760405162461bcd60e51b815260040161051190612e13565b60606104ba6001600160a01b03831660145b606060006127578360026135d7565b612762906002613480565b67ffffffffffffffff81111561278857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156127b2576020820181803683370190505b509050600360fc1b816000815181106127db57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061281857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061283c8460026135d7565b612847906001613480565b90505b60018111156128db576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061288957634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106128ad57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936128d48161365c565b905061284a565b508315611ad35760405162461bcd60e51b815260040161051190612daf565b50805460008255600602906000526020600020908101906121e9919061293c565b50805460008255600602906000526020600020908101906121e99190612983565b5b808211156114c15760008082556001820180546001600160a01b0319169055600282018190556003820181905560048201805460ff19169055600582015560060161293d565b5b808211156114c15780546001600160a01b03191681556000600182018190556002820181905560038201819055600482015560058101805460ff19169055600601612984565b803560ff811681146104bd57600080fd5b6000602082840312156129ec578081fd5b8151611ad3816136ce565b600060208284031215612a08578081fd5b5035919050565b60008060408385031215612a21578081fd5b823591506020830135612a33816136ce565b809150509250929050565b600080600060608486031215612a52578081fd5b505081359360208301359350604090920135919050565b600080600060608486031215612a7d578283fd5b8335925060208401359150612a94604085016129ca565b90509250925092565b60008060408385031215612aaf578182fd5b82359150612abf602084016129ca565b90509250929050565b60008060008060808587031215612add578081fd5b84359350612aed602086016129ca565b93969395505050506040820135916060013590565b600060208284031215612b13578081fd5b81356001600160e01b031981168114611ad3578182fd5b600060208284031215612b3b578081fd5b5051919050565b60008060408385031215612b54578182fd5b50508035926020909101359150565b908152600360fc1b602082015260210190565b908152603160f81b602082015260210190565b918252602082015260400190565b93845260f89290921b6001600160f81b03191660208401526021830152604182015260610190565b60008351612bd1818460208801613630565b9190910191825250602001919050565b60007f416363657373436f6e74726f6c3a206163636f756e742000000000000000000082528351612c19816017850160208801613630565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612c4a816028840160208801613630565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b03969096168652602086019490945260408501929092526060840152608083015260ff1660a082015260c00190565b602080825282518282018190526000919060409081850190868401855b82811015612d1757815180516001600160a01b0316855286810151878601528581015186860152606080820151908601526080808201519086015260a09081015160ff169085015260c09093019290850190600101612cbd565b5091979650505050505050565b901515815260200190565b90815260200190565b9586526001600160a01b03949094166020860152604085019290925260608401521515608083015260a082015260c00190565b91825260ff16602082015260400190565b6000602082528251806020840152612d9b816040850160208701613630565b601f01601f19169190910160400192915050565b6020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b6020808252601590820152746f6e6c79207061757365722063616e20706175736560581b604082015260600190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252601290820152716e6f7420696e20636c61696d20706861736560701b604082015260600190565b60208082526025908201527f63616e206e6f7420636f6d6d697420696e206c61737420626c6f636b206f6620604082015264706861736560d81b606082015260800190565b60208082526017908201527f6f776e6572206d757374206d617463682073656e646572000000000000000000604082015260600190565b60208082526025908201527f63616e27742072657475726e2076616c75652061667465722066697273742072604082015264195d99585b60da1b606082015260800190565b60208082526021908201527f616e63686f72206f7574206f662073656c66207265706f7274656420646570746040820152600d60fb1b606082015260800190565b6020808252601390820152726e6f7420696e20636f6d6d697420706861736560681b604082015260600190565b6020808252601c908201527f7061727469636970616e7420616c72656164792072657665616c656400000000604082015260600190565b60208082526019908201527f77696e6e6572206e6f742064657465726d696e65642079657400000000000000604082015260600190565b60208082526019908201527f726f756e64207265636569766564206e6f20636f6d6d69747300000000000000604082015260600190565b60208082526017908201527f6f6e6c79207061757365722063616e20756e7061757365000000000000000000604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526025908201527f6e6f742064657465726d696e656420666f72207570636f6d696e6720726f756e60408201526419081e595d60da1b606082015260800190565b6020808252601390820152726e6f7420696e2072657665616c20706861736560681b604082015260600190565b60208082526022908201527f7374616b6520616d6f756e7420646f6573206e6f74206d656574206d696e696d604082015261756d60f01b606082015260800190565b6020808252601690820152757374616b65207570646174656420726563656e746c7960501b604082015260600190565b60208082526019908201527f7374616b65206d75737420657863656564206d696e696d756d00000000000000604082015260600190565b6020808252601f908201527f6d7573742068617665207374616b6564203220726f756e6473207072696f7200604082015260600190565b60208082526024908201527f6e6f742064657465726d696e656420666f722063757272656e7420726f756e64604082015263081e595d60e21b606082015260800190565b6020808252601c908201527f636f6d6d697420726f756e64206e6f7420737461727465642079657400000000604082015260600190565b60208082526019908201527f726f756e64207265636569766564206e6f2072657665616c7300000000000000604082015260600190565b6020808252601e908201527f6f6e6c79206f6e6520636f6d6d697420656163682070657220726f756e640000604082015260600190565b60208082526011908201527031b7b6b6b4ba103937bab7321037bb32b960791b604082015260600190565b60208082526017908201527f63616c6c6572206973206e6f74207468652061646d696e000000000000000000604082015260600190565b60208082526027908201527f726f756e6420616c7265616479207265636569766564207375636365737366756040820152666c20636c61696d60c81b606082015260800190565b6020808252601a908201527f6e6f206d61746368696e6720636f6d6d6974206f722068617368000000000000604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b81546001600160a01b031681526001820154602082015260028201546040820152600382015460608201526004820154608082015260059091015460ff1660a082015260c00190565b958652602086019490945260408501929092526060840152608083015260ff1660a082015260c00190565b60008219821115613493576134936136a2565b500190565b6000826134a7576134a76136b8565b500490565b80825b60018086116134be57506134e9565b8187048211156134d0576134d06136a2565b808616156134dd57918102915b9490941c9380026134af565b94509492505050565b6000611ad360001961ffff851684613513565b6000611ad360001960ff8516845b60008261352257506001611ad3565b8161352f57506000611ad3565b8160018114613545576002811461354f5761357c565b6001915050611ad3565b60ff841115613560576135606136a2565b6001841b915084821115613576576135766136a2565b50611ad3565b5060208310610133831016604e8410600b84101617156135af575081810a838111156135aa576135aa6136a2565b611ad3565b6135bc84848460016134ac565b8086048211156135ce576135ce6136a2565b02949350505050565b60008160001904831182151516156135f1576135f16136a2565b500290565b600061ffff83811690831681811015613611576136116136a2565b039392505050565b60008282101561362b5761362b6136a2565b500390565b60005b8381101561364b578181015183820152602001613633565b8381111561202b5750506000910152565b60008161366b5761366b6136a2565b506000190190565b6000600019821415613687576136876136a2565b5060010190565b60008261369d5761369d6136b8565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6001600160a01b03811681146121e957600080fdfea26469706673582212203b04149267db6fd0fbc9a22fefd04938b42be5e2d88ef090b53da3593b06669864736f6c63430008010033",
  "devdoc": {
    "author": "The Swarm Authors",
    "details": "Implements a Schelling Co-ordination game to form consensus around the Reserve Commitment hash. This takes place in three phases: _commit_, _reveal_ and _claim_. A node, upon establishing that it _isParticipatingInUpcomingRound_, i.e. it's overlay falls within proximity order of its reported depth with the _currentRoundAnchor_, prepares a \"reserve commitment hash\" using the chunks it currently stores in its reserve and calculates the \"storage depth\" (see Bee for details). These values, if calculated honestly, and with the right chunks stored, should be the same for every node in a neighbourhood. This is the Schelling point. Each eligible node can then use these values, together with a random, single use, secret  _revealNonce_ and their _overlay_ as the pre-image values for the obsfucated _commit_, using the _wrapCommit_ method. Once the _commit_ round has elapsed, participating nodes must provide the values used to calculate their obsfucated _commit_ hash, which, once verified for correctness and proximity to the anchor are retained in the _currentReveals_. Nodes that have commited but do not reveal the correct values used to create the pre-image will have their stake \"frozen\" for a period of rounds proportional to their reported depth. During the _reveal_ round, randomness is updated after every successful reveal. Once the reveal round is concluded, the _currentRoundAnchor_ is updated and users can determine if they will be eligible their overlay will be eligible for the next commit phase using _isParticipatingInUpcomingRound_. When the _reveal_ phase has been concluded, the claim phase can begin. At this point, the truth teller and winner are already determined. By calling _isWinner_, an applicant node can run the relevant logic to determine if they have been selected as the beneficiary of this round. When calling _claim_, the current pot from the PostageStamp contract is withdrawn and transferred to that beneficiaries address. Nodes that have revealed values that differ from the truth, have their stakes \"frozen\" for a period of rounds proportional to their reported depth.",
    "events": {
      "ChunkCount(uint256)": {
        "details": "Emit from Postagestamp contract valid chunk count at the end of claim"
      },
      "Committed(uint256,bytes32)": {
        "details": "Logs that an overlay has committed"
      },
      "CountCommits(uint256)": {
        "details": "Emits the number of commits being processed by the claim phase."
      },
      "CountReveals(uint256)": {
        "details": "Emits the number of reveals being processed by the claim phase."
      },
      "CurrentRevealAnchor(uint256,bytes32)": {
        "details": "Bytes32 anhor of current reveal round"
      },
      "Revealed(uint256,bytes32,uint256,uint256,bytes32,uint8)": {
        "details": "Logs that an overlay has revealed"
      },
      "TruthSelected(bytes32,uint8)": {
        "details": "Emitted when the truth oracle of a round is selected in the claim phase."
      },
      "WinnerSelected((address,bytes32,uint256,uint256,bytes32,uint8))": {
        "details": "Emitted when the winner of a round is selected in the claim phase"
      }
    },
    "kind": "dev",
    "methods": {
      "commit(bytes32,bytes32,uint256)": {
        "details": "If a node's overlay is _inProximity_(_depth_) of the _currentRoundAnchor_, that node may compute an _obfuscatedHash_ by providing their _overlay_, reported storage _depth_, reserve commitment _hash_ and a randomly generated, and secret _revealNonce_ to the _wrapCommit_ method.",
        "params": {
          "_obfuscatedHash": "The calculated hash resultant of the required pre-image values.",
          "_overlay": "The overlay referenced in the pre-image. Must be staked by at least the minimum value, and be derived from the same key pair as the message sender."
        }
      },
      "constructor": {
        "params": {
          "oracleContract": "the address of the linked PriceOracle contract.",
          "postageContract": "the address of the linked PostageStamp contract.",
          "staking": "the address of the linked Staking contract."
        }
      },
      "currentRoundAnchor()": {
        "details": "A node must be within proximity order of less than or equal to the storage depth they intend to report."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "inProximity(bytes32,bytes32,uint8)": {
        "params": {
          "A": "An overlay address to compare.",
          "B": "An overlay address to compare.",
          "minimum": "Minimum proximity order."
        }
      },
      "isParticipatingInUpcomingRound(bytes32,uint8)": {
        "params": {
          "depth": "The storage depth the applicant intends to report.",
          "overlay": "The overlay address of the applicant."
        }
      },
      "isWinner(bytes32)": {
        "params": {
          "_overlay": "The overlay address of the applicant."
        }
      },
      "pause()": {
        "details": "Pause the contract. The contract is provably stopped by renouncing the pauser role and the admin role after pausing, can only be called by the `PAUSER`"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "reveal(bytes32,uint8,bytes32,bytes32)": {
        "params": {
          "_depth": "The reported depth.",
          "_hash": "The reserve commitment hash.",
          "_overlay": "The overlay address of the applicant.",
          "_revealNonce": "The nonce used to generate the commit that is being revealed."
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unPause()": {
        "details": "Unpause the contract, can only be called by the pauser when paused"
      },
      "wrapCommit(bytes32,uint8,bytes32,bytes32)": {
        "details": "_revealNonce_ must be randomly generated, used once and kept secret until the reveal phase.",
        "params": {
          "_depth": "The reported depth.",
          "_hash": "The reserve commitment hash.",
          "_overlay": "The overlay address of the applicant.",
          "revealNonce": "A random, single use, secret nonce."
        }
      }
    },
    "title": "Redistribution contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim()": {
        "notice": "Conclude the current round by identifying the selected truth teller and beneficiary."
      },
      "commit(bytes32,bytes32,uint256)": {
        "notice": "Begin application for a round if eligible. Commit a hashed value for which the pre-image will be subsequently revealed."
      },
      "currentPhaseClaim()": {
        "notice": "Returns true if current block is during claim phase."
      },
      "currentPhaseCommit()": {
        "notice": "Returns true if current block is during commit phase."
      },
      "currentPhaseReveal()": {
        "notice": "Returns true if current block is during reveal phase."
      },
      "currentRound()": {
        "notice": "The number of the current round."
      },
      "currentRoundAnchor()": {
        "notice": "The anchor used to determine eligibility for the current round."
      },
      "currentRoundReveals()": {
        "notice": "Returns true if current block is during reveal phase."
      },
      "currentSeed()": {
        "notice": "Returns the current random seed which is used to determine later utilised random numbers. If rounds have elapsed without reveals, hash the seed with an incremented nonce to produce a new random seed and hence a new round anchor."
      },
      "inProximity(bytes32,bytes32,uint8)": {
        "notice": "Returns true if an overlay address _A_ is within proximity order _minimum_ of _B_."
      },
      "isParticipatingInUpcomingRound(bytes32,uint8)": {
        "notice": "Determine if a the owner of a given overlay can participate in the upcoming round."
      },
      "isWinner(bytes32)": {
        "notice": "Determine if a the owner of a given overlay will be the beneficiary of the claim phase."
      },
      "nextSeed()": {
        "notice": "Returns the seed which will become current once the next commit phase begins. Used to determine what the next round's anchor will be."
      },
      "reveal(bytes32,uint8,bytes32,bytes32)": {
        "notice": "Reveal the pre-image values used to generate commit provided during this round's commit phase."
      },
      "setFreezingParams(uint256,uint256)": {
        "notice": "Set freezing parameters"
      },
      "wrapCommit(bytes32,uint8,bytes32,bytes32)": {
        "notice": "Hash the pre-image values to the obsfucated hash."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "src/Redistribution.sol:Redistribution",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 556,
        "contract": "src/Redistribution.sol:Redistribution",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 6828,
        "contract": "src/Redistribution.sol:Redistribution",
        "label": "PostageContract",
        "offset": 1,
        "slot": "1",
        "type": "t_contract(IPostageStamp)6759"
      },
      {
        "astId": 6831,
        "contract": "src/Redistribution.sol:Redistribution",
        "label": "OracleContract",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPriceOracle)6765"
      },
      {
        "astId": 6834,
        "contract": "src/Redistribution.sol:Redistribution",
        "label": "Stakes",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IStakeRegistry)6794"
      },
      {
        "astId": 6838,
        "contract": "src/Redistribution.sol:Redistribution",
        "label": "currentCommits",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(Commit)6812_storage)dyn_storage"
      },
      {
        "astId": 6842,
        "contract": "src/Redistribution.sol:Redistribution",
        "label": "currentReveals",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_struct(Reveal)6825_storage)dyn_storage"
      },
      {
        "astId": 6850,
        "contract": "src/Redistribution.sol:Redistribution",
        "label": "penaltyMultiplierDisagreement",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 6853,
        "contract": "src/Redistribution.sol:Redistribution",
        "label": "penaltyMultiplierNonRevealed",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 6859,
        "contract": "src/Redistribution.sol:Redistribution",
        "label": "MaxH",
        "offset": 0,
        "slot": "8",
        "type": "t_bytes32"
      },
      {
        "astId": 6861,
        "contract": "src/Redistribution.sol:Redistribution",
        "label": "currentRevealRoundAnchor",
        "offset": 0,
        "slot": "9",
        "type": "t_bytes32"
      },
      {
        "astId": 6863,
        "contract": "src/Redistribution.sol:Redistribution",
        "label": "seed",
        "offset": 0,
        "slot": "10",
        "type": "t_bytes32"
      },
      {
        "astId": 6866,
        "contract": "src/Redistribution.sol:Redistribution",
        "label": "minimumStake",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 6868,
        "contract": "src/Redistribution.sol:Redistribution",
        "label": "currentCommitRound",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 6870,
        "contract": "src/Redistribution.sol:Redistribution",
        "label": "currentRevealRound",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 6872,
        "contract": "src/Redistribution.sol:Redistribution",
        "label": "currentClaimRound",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 6875,
        "contract": "src/Redistribution.sol:Redistribution",
        "label": "roundLength",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 6878,
        "contract": "src/Redistribution.sol:Redistribution",
        "label": "winner",
        "offset": 0,
        "slot": "16",
        "type": "t_struct(Reveal)6825_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Commit)6812_storage)dyn_storage": {
        "base": "t_struct(Commit)6812_storage",
        "encoding": "dynamic_array",
        "label": "struct Redistribution.Commit[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Reveal)6825_storage)dyn_storage": {
        "base": "t_struct(Reveal)6825_storage",
        "encoding": "dynamic_array",
        "label": "struct Redistribution.Reveal[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IPostageStamp)6759": {
        "encoding": "inplace",
        "label": "contract IPostageStamp",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceOracle)6765": {
        "encoding": "inplace",
        "label": "contract IPriceOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IStakeRegistry)6794": {
        "encoding": "inplace",
        "label": "contract IStakeRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(Commit)6812_storage": {
        "encoding": "inplace",
        "label": "struct Redistribution.Commit",
        "members": [
          {
            "astId": 6801,
            "contract": "src/Redistribution.sol:Redistribution",
            "label": "overlay",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 6803,
            "contract": "src/Redistribution.sol:Redistribution",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6805,
            "contract": "src/Redistribution.sol:Redistribution",
            "label": "stake",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6807,
            "contract": "src/Redistribution.sol:Redistribution",
            "label": "obfuscatedHash",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 6809,
            "contract": "src/Redistribution.sol:Redistribution",
            "label": "revealed",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 6811,
            "contract": "src/Redistribution.sol:Redistribution",
            "label": "revealIndex",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Reveal)6825_storage": {
        "encoding": "inplace",
        "label": "struct Redistribution.Reveal",
        "members": [
          {
            "astId": 6814,
            "contract": "src/Redistribution.sol:Redistribution",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6816,
            "contract": "src/Redistribution.sol:Redistribution",
            "label": "overlay",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 6818,
            "contract": "src/Redistribution.sol:Redistribution",
            "label": "stake",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6820,
            "contract": "src/Redistribution.sol:Redistribution",
            "label": "stakeDensity",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6822,
            "contract": "src/Redistribution.sol:Redistribution",
            "label": "hash",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes32"
          },
          {
            "astId": 6824,
            "contract": "src/Redistribution.sol:Redistribution",
            "label": "depth",
            "offset": 0,
            "slot": "5",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "src/Redistribution.sol:Redistribution",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "src/Redistribution.sol:Redistribution",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}