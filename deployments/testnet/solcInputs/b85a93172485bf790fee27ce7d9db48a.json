{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC20/extensions/ERC20Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../security/Pausable.sol\";\n\n/**\n * @dev ERC20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n *\n * IMPORTANT: This contract does not include public pause and unpause functions. In\n * addition to inheriting this contract, you must define both functions, invoking the\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\n * make the contract unpausable.\n */\nabstract contract ERC20Pausable is ERC20, Pausable {\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/presets/ERC20PresetMinterPauser.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../extensions/ERC20Burnable.sol\";\nimport \"../extensions/ERC20Pausable.sol\";\nimport \"../../../access/AccessControlEnumerable.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev {ERC20} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to other accounts.\n *\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\n */\ncontract ERC20PresetMinterPauser is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\n     * account that deploys the contract.\n     *\n     * See {ERC20-constructor}.\n     */\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    /**\n     * @dev Creates `amount` new tokens for `to`.\n     *\n     * See {ERC20-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(address to, uint256 amount) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have minter role to mint\");\n        _mint(to, amount);\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override(ERC20, ERC20Pausable) {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "src/interface/IPostageStamp.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.19;\n\ninterface IPostageStamp {\n    function withdraw(address beneficiary) external;\n\n    function validChunkCount() external view returns (uint256);\n\n    function batchOwner(bytes32 _batchId) external view returns (address);\n\n    function batchDepth(bytes32 _batchId) external view returns (uint8);\n\n    function batchBucketDepth(bytes32 _batchId) external view returns (uint8);\n\n    function remainingBalance(bytes32 _batchId) external view returns (uint256);\n\n    function minimumInitialBalancePerChunk() external view returns (uint256);\n\n    function setPrice(uint256 _price) external;\n\n    function batches(\n        bytes32\n    )\n        external\n        view\n        returns (\n            address owner,\n            uint8 depth,\n            uint8 bucketDepth,\n            bool immutableFlag,\n            uint256 normalisedBalance,\n            uint256 lastUpdatedBlockNumber\n        );\n}\n"
    },
    "src/OrderStatisticsTree/HitchensOrderStatisticsTreeLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n/*\nHitchens Order Statistics Tree v0.99\n\nA Solidity Red-Black Tree library to store and maintain a sorted data\nstructure in a Red-Black binary search tree, with O(log 2n) insert, remove\nand search time (and gas, approximately)\n\nhttps://github.com/rob-Hitchens/OrderStatisticsTree\n\nCopyright (c) Rob Hitchens. the MIT License\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nSignificant portions from BokkyPooBahsRedBlackTreeLibrary,\nhttps://github.com/bokkypoobah/BokkyPooBahsRedBlackTreeLibrary\n\nTHIS SOFTWARE IS NOT TESTED OR AUDITED. DO NOT USE FOR PRODUCTION.\n*/\n\nlibrary HitchensOrderStatisticsTreeLib {\n    uint private constant EMPTY = 0;\n    struct Node {\n        uint parent;\n        uint left;\n        uint right;\n        bool red;\n        bytes32[] keys;\n        mapping(bytes32 => uint) keyMap;\n        uint count;\n    }\n    struct Tree {\n        uint root;\n        mapping(uint => Node) nodes;\n    }\n\n    error ValueDoesNotExist(); // Provided value doesn't exist in the tree.\n    error ValueCannotBeZero(); // Value to insert cannot be zero\n    error ValueKeyPairExists(); // Value and Key pair exists. Cannot be inserted again.\n\n    function first(Tree storage self) internal view returns (uint _value) {\n        _value = self.root;\n        if (_value == EMPTY) return 0;\n        while (self.nodes[_value].left != EMPTY) {\n            _value = self.nodes[_value].left;\n        }\n    }\n\n    function exists(Tree storage self, uint value) internal view returns (bool _exists) {\n        if (value == EMPTY) return false;\n        if (value == self.root) return true;\n        if (self.nodes[value].parent != EMPTY) return true;\n        return false;\n    }\n\n    function keyExists(Tree storage self, bytes32 key, uint value) internal view returns (bool _exists) {\n        if (!exists(self, value)) return false;\n        return self.nodes[value].keys[self.nodes[value].keyMap[key]] == key;\n    }\n\n    function getNode(\n        Tree storage self,\n        uint value\n    ) internal view returns (uint _parent, uint _left, uint _right, bool _red, uint keyCount, uint __count) {\n        if (!exists(self, value)) {\n            revert ValueDoesNotExist();\n        }\n\n        Node storage gn = self.nodes[value];\n        return (gn.parent, gn.left, gn.right, gn.red, gn.keys.length, gn.keys.length + gn.count);\n    }\n\n    function getNodeCount(Tree storage self, uint value) internal view returns (uint __count) {\n        Node storage gn = self.nodes[value];\n        return gn.keys.length + gn.count;\n    }\n\n    function valueKeyAtIndex(Tree storage self, uint value, uint index) internal view returns (bytes32 _key) {\n        if (!exists(self, value)) {\n            revert ValueDoesNotExist();\n        }\n        return self.nodes[value].keys[index];\n    }\n\n    function count(Tree storage self) internal view returns (uint _count) {\n        return getNodeCount(self, self.root);\n    }\n\n    /* We don't use this functionality, so it is commented out to make audit easier\n\n    function percentile(Tree storage self, uint value) internal view returns(uint _percentile) {\n        uint denominator = count(self);\n        uint numerator = rank(self, value);\n        _percentile = ((uint(1000) * numerator)/denominator+(uint(5)))/uint(10);\n    }\n    function permil(Tree storage self, uint value) internal view returns(uint _permil) {\n        uint denominator = count(self);\n        uint numerator = rank(self, value);\n        _permil = ((uint(10000) * numerator)/denominator+(uint(5)))/uint(10);\n    }\n    function atPercentile(Tree storage self, uint _percentile) internal view returns(uint _value) {\n        uint findRank = (((_percentile * count(self))/uint(10)) + uint(5)) / uint(10);\n        return atRank(self,findRank);\n    }\n    function atPermil(Tree storage self, uint _permil) internal view returns(uint _value) {\n        uint findRank = (((_permil * count(self))/uint(100)) + uint(5)) / uint(10);\n        return atRank(self,findRank);\n    }\n    function median(Tree storage self) internal view returns(uint value) {\n        return atPercentile(self,50);\n    }\n    function below(Tree storage self, uint value) public view returns(uint _below) {\n        if(count(self) > 0 && value > 0) _below = rank(self,value)-uint(1);\n    }\n    function above(Tree storage self, uint value) public view returns(uint _above) {\n        if(count(self) > 0) _above = count(self)-rank(self,value);\n    }\n    function valueBelowEstimate(Tree storage self, uint estimate) public view returns(uint _below) {\n        if(count(self) > 0 && estimate > 0) {\n            uint  highestValue = last(self);\n            uint  lowestValue = first(self);\n            if(estimate < lowestValue) {\n                return 0;\n            }\n            if(estimate >= highestValue) {\n                return highestValue;\n            }\n            uint  rankOfValue = rank(self, estimate); // approximation\n            _below = atRank(self, rankOfValue);\n            if(_below > estimate) { // fix error in approximation\n                rankOfValue--;\n                _below = atRank(self, rankOfValue);\n            }\n        }\n    }\n    function valueAboveEstimate(Tree storage self, uint estimate) public view returns(uint _above) {\n        if(count(self) > 0 && estimate > 0) {\n            uint  highestValue = last(self);\n            uint  lowestValue = first(self);\n            if(estimate > highestValue) {\n                return 0;\n            }\n            if(estimate <= lowestValue) {\n                return lowestValue;\n            }\n            uint  rankOfValue = rank(self, estimate); // approximation\n            _above = atRank(self, rankOfValue);\n            if(_above < estimate) { // fix error in approximation\n                rankOfValue++;\n                _above = atRank(self, rankOfValue);\n            }\n        }\n    }\n    function rank(Tree storage self, uint value) internal view returns(uint _rank) {\n        if(count(self) > 0) {\n            bool finished;\n            uint cursor = self.root;\n            Node storage c = self.nodes[cursor];\n            uint smaller = getNodeCount(self,c.left);\n            while (!finished) {\n                uint keyCount = c.keys.length;\n                if(cursor == value) {\n                    finished = true;\n                } else {\n                    if(cursor < value) {\n                        cursor = c.right;\n                        c = self.nodes[cursor];\n                        smaller += keyCount + getNodeCount(self,c.left);\n                    } else {\n                        cursor = c.left;\n                        c = self.nodes[cursor];\n                        smaller -= (keyCount + getNodeCount(self,c.right));\n                    }\n                }\n                if (!exists(self,cursor)) {\n                    finished = true;\n                }\n            }\n            return smaller + 1;\n        }\n    }\n    function atRank(Tree storage self, uint _rank) internal view returns(uint _value) {\n        bool finished;\n        uint cursor = self.root;\n        Node storage c = self.nodes[cursor];\n        uint smaller = getNodeCount(self,c.left);\n        while (!finished) {\n            _value = cursor;\n            c = self.nodes[cursor];\n            uint keyCount = c.keys.length;\n            if(smaller + 1 >= _rank && smaller + keyCount <= _rank) {\n                _value = cursor;\n                finished = true;\n            } else {\n                if(smaller + keyCount <= _rank) {\n                    cursor = c.right;\n                    c = self.nodes[cursor];\n                    smaller += keyCount + getNodeCount(self,c.left);\n                } else {\n                    cursor = c.left;\n                    c = self.nodes[cursor];\n                    smaller -= (keyCount + getNodeCount(self,c.right));\n                }\n            }\n            if (!exists(self,cursor)) {\n                finished = true;\n            }\n        }\n    }\n*/\n\n    function insert(Tree storage self, bytes32 key, uint value) internal {\n        if (value == EMPTY) {\n            revert ValueCannotBeZero();\n        }\n        if (keyExists(self, key, value)) {\n            revert ValueKeyPairExists();\n        }\n        uint cursor;\n        uint probe = self.root;\n        while (probe != EMPTY) {\n            cursor = probe;\n            if (value < probe) {\n                probe = self.nodes[probe].left;\n            } else if (value > probe) {\n                probe = self.nodes[probe].right;\n            } else if (value == probe) {\n                self.nodes[probe].keys.push(key);\n                self.nodes[probe].keyMap[key] = self.nodes[probe].keys.length - uint(1);\n                return;\n            }\n            self.nodes[cursor].count++;\n        }\n        Node storage nValue = self.nodes[value];\n        nValue.parent = cursor;\n        nValue.left = EMPTY;\n        nValue.right = EMPTY;\n        nValue.red = true;\n        nValue.keys.push(key);\n        nValue.keyMap[key] = nValue.keys.length - uint(1);\n        if (cursor == EMPTY) {\n            self.root = value;\n        } else if (value < cursor) {\n            self.nodes[cursor].left = value;\n        } else {\n            self.nodes[cursor].right = value;\n        }\n        insertFixup(self, value);\n    }\n\n    function remove(Tree storage self, bytes32 key, uint value) internal {\n        if (value == EMPTY) {\n            revert ValueCannotBeZero();\n        }\n        if (!keyExists(self, key, value)) {\n            revert ValueDoesNotExist();\n        }\n\n        Node storage nValue = self.nodes[value];\n        uint rowToDelete = nValue.keyMap[key];\n        bytes32 last = nValue.keys[nValue.keys.length - uint(1)];\n        nValue.keys[rowToDelete] = last;\n        nValue.keyMap[last] = rowToDelete;\n        nValue.keys.pop();\n\n        uint probe;\n        uint cursor;\n\n        if (nValue.keys.length == 0) {\n            if (self.nodes[value].left == EMPTY || self.nodes[value].right == EMPTY) {\n                cursor = value;\n            } else {\n                cursor = self.nodes[value].right;\n                while (self.nodes[cursor].left != EMPTY) {\n                    cursor = self.nodes[cursor].left;\n                }\n            }\n\n            if (self.nodes[cursor].left != EMPTY) {\n                probe = self.nodes[cursor].left;\n            } else {\n                probe = self.nodes[cursor].right;\n            }\n\n            uint cursorParent = self.nodes[cursor].parent;\n            self.nodes[probe].parent = cursorParent;\n\n            if (cursorParent != EMPTY) {\n                if (cursor == self.nodes[cursorParent].left) {\n                    self.nodes[cursorParent].left = probe;\n                } else {\n                    self.nodes[cursorParent].right = probe;\n                }\n            } else {\n                self.root = probe;\n            }\n\n            bool doFixup = !self.nodes[cursor].red;\n\n            if (cursor != value) {\n                replaceParent(self, cursor, value);\n                self.nodes[cursor].left = self.nodes[value].left;\n                self.nodes[self.nodes[cursor].left].parent = cursor;\n                self.nodes[cursor].right = self.nodes[value].right;\n                self.nodes[self.nodes[cursor].right].parent = cursor;\n                self.nodes[cursor].red = self.nodes[value].red;\n                (cursor, value) = (value, cursor);\n                fixCountRecurse(self, value);\n            }\n\n            if (doFixup) {\n                removeFixup(self, probe);\n            }\n\n            fixCountRecurse(self, cursorParent);\n            delete self.nodes[cursor];\n        }\n    }\n\n    function fixCountRecurse(Tree storage self, uint value) private {\n        while (value != EMPTY) {\n            self.nodes[value].count =\n                getNodeCount(self, self.nodes[value].left) +\n                getNodeCount(self, self.nodes[value].right);\n            value = self.nodes[value].parent;\n        }\n    }\n\n    function treeMinimum(Tree storage self, uint value) private view returns (uint) {\n        while (self.nodes[value].left != EMPTY) {\n            value = self.nodes[value].left;\n        }\n        return value;\n    }\n\n    function treeMaximum(Tree storage self, uint value) private view returns (uint) {\n        while (self.nodes[value].right != EMPTY) {\n            value = self.nodes[value].right;\n        }\n        return value;\n    }\n\n    function rotateLeft(Tree storage self, uint value) private {\n        uint cursor = self.nodes[value].right;\n        uint parent = self.nodes[value].parent;\n        uint cursorLeft = self.nodes[cursor].left;\n        self.nodes[value].right = cursorLeft;\n        if (cursorLeft != EMPTY) {\n            self.nodes[cursorLeft].parent = value;\n        }\n        self.nodes[cursor].parent = parent;\n        if (parent == EMPTY) {\n            self.root = cursor;\n        } else if (value == self.nodes[parent].left) {\n            self.nodes[parent].left = cursor;\n        } else {\n            self.nodes[parent].right = cursor;\n        }\n        self.nodes[cursor].left = value;\n        self.nodes[value].parent = cursor;\n        self.nodes[value].count =\n            getNodeCount(self, self.nodes[value].left) +\n            getNodeCount(self, self.nodes[value].right);\n        self.nodes[cursor].count =\n            getNodeCount(self, self.nodes[cursor].left) +\n            getNodeCount(self, self.nodes[cursor].right);\n    }\n\n    function rotateRight(Tree storage self, uint value) private {\n        uint cursor = self.nodes[value].left;\n        uint parent = self.nodes[value].parent;\n        uint cursorRight = self.nodes[cursor].right;\n        self.nodes[value].left = cursorRight;\n        if (cursorRight != EMPTY) {\n            self.nodes[cursorRight].parent = value;\n        }\n        self.nodes[cursor].parent = parent;\n        if (parent == EMPTY) {\n            self.root = cursor;\n        } else if (value == self.nodes[parent].right) {\n            self.nodes[parent].right = cursor;\n        } else {\n            self.nodes[parent].left = cursor;\n        }\n        self.nodes[cursor].right = value;\n        self.nodes[value].parent = cursor;\n        self.nodes[value].count =\n            getNodeCount(self, self.nodes[value].left) +\n            getNodeCount(self, self.nodes[value].right);\n        self.nodes[cursor].count =\n            getNodeCount(self, self.nodes[cursor].left) +\n            getNodeCount(self, self.nodes[cursor].right);\n    }\n\n    function insertFixup(Tree storage self, uint value) private {\n        uint cursor;\n        while (value != self.root && self.nodes[self.nodes[value].parent].red) {\n            uint valueParent = self.nodes[value].parent;\n            if (valueParent == self.nodes[self.nodes[valueParent].parent].left) {\n                cursor = self.nodes[self.nodes[valueParent].parent].right;\n                if (self.nodes[cursor].red) {\n                    self.nodes[valueParent].red = false;\n                    self.nodes[cursor].red = false;\n                    self.nodes[self.nodes[valueParent].parent].red = true;\n                    value = self.nodes[valueParent].parent;\n                } else {\n                    if (value == self.nodes[valueParent].right) {\n                        value = valueParent;\n                        rotateLeft(self, value);\n                    }\n                    valueParent = self.nodes[value].parent;\n                    self.nodes[valueParent].red = false;\n                    self.nodes[self.nodes[valueParent].parent].red = true;\n                    rotateRight(self, self.nodes[valueParent].parent);\n                }\n            } else {\n                cursor = self.nodes[self.nodes[valueParent].parent].left;\n                if (self.nodes[cursor].red) {\n                    self.nodes[valueParent].red = false;\n                    self.nodes[cursor].red = false;\n                    self.nodes[self.nodes[valueParent].parent].red = true;\n                    value = self.nodes[valueParent].parent;\n                } else {\n                    if (value == self.nodes[valueParent].left) {\n                        value = valueParent;\n                        rotateRight(self, value);\n                    }\n                    valueParent = self.nodes[value].parent;\n                    self.nodes[valueParent].red = false;\n                    self.nodes[self.nodes[valueParent].parent].red = true;\n                    rotateLeft(self, self.nodes[valueParent].parent);\n                }\n            }\n        }\n        self.nodes[self.root].red = false;\n    }\n\n    function replaceParent(Tree storage self, uint a, uint b) private {\n        uint bParent = self.nodes[b].parent;\n        self.nodes[a].parent = bParent;\n        if (bParent == EMPTY) {\n            self.root = a;\n        } else {\n            if (b == self.nodes[bParent].left) {\n                self.nodes[bParent].left = a;\n            } else {\n                self.nodes[bParent].right = a;\n            }\n        }\n    }\n\n    function removeFixup(Tree storage self, uint value) private {\n        uint cursor;\n        while (value != self.root && !self.nodes[value].red) {\n            uint valueParent = self.nodes[value].parent;\n            if (value == self.nodes[valueParent].left) {\n                cursor = self.nodes[valueParent].right;\n                if (self.nodes[cursor].red) {\n                    self.nodes[cursor].red = false;\n                    self.nodes[valueParent].red = true;\n                    rotateLeft(self, valueParent);\n                    cursor = self.nodes[valueParent].right;\n                }\n                if (!self.nodes[self.nodes[cursor].left].red && !self.nodes[self.nodes[cursor].right].red) {\n                    self.nodes[cursor].red = true;\n                    value = valueParent;\n                } else {\n                    if (!self.nodes[self.nodes[cursor].right].red) {\n                        self.nodes[self.nodes[cursor].left].red = false;\n                        self.nodes[cursor].red = true;\n                        rotateRight(self, cursor);\n                        cursor = self.nodes[valueParent].right;\n                    }\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\n                    self.nodes[valueParent].red = false;\n                    self.nodes[self.nodes[cursor].right].red = false;\n                    rotateLeft(self, valueParent);\n                    value = self.root;\n                }\n            } else {\n                cursor = self.nodes[valueParent].left;\n                if (self.nodes[cursor].red) {\n                    self.nodes[cursor].red = false;\n                    self.nodes[valueParent].red = true;\n                    rotateRight(self, valueParent);\n                    cursor = self.nodes[valueParent].left;\n                }\n                if (!self.nodes[self.nodes[cursor].right].red && !self.nodes[self.nodes[cursor].left].red) {\n                    self.nodes[cursor].red = true;\n                    value = valueParent;\n                } else {\n                    if (!self.nodes[self.nodes[cursor].left].red) {\n                        self.nodes[self.nodes[cursor].right].red = false;\n                        self.nodes[cursor].red = true;\n                        rotateLeft(self, cursor);\n                        cursor = self.nodes[valueParent].left;\n                    }\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\n                    self.nodes[valueParent].red = false;\n                    self.nodes[self.nodes[cursor].left].red = false;\n                    rotateRight(self, valueParent);\n                    value = self.root;\n                }\n            }\n        }\n        self.nodes[value].red = false;\n    }\n}\n"
    },
    "src/PostageStamp.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.19;\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"./OrderStatisticsTree/HitchensOrderStatisticsTreeLib.sol\";\n\n/**\n * @title PostageStamp contract\n * @author The Swarm Authors\n * @dev The postage stamp contracts allows users to create and manage postage stamp batches.\n * The current balance for each batch is stored ordered in descending order of normalised balance.\n * Balance is normalised to be per chunk and the total spend since the contract was deployed, i.e. when a batch\n * is bought, its per-chunk balance is supplemented with the current cost of storing one chunk since the beginning of time,\n * as if the batch had existed since the contract's inception. During the _expiry_ process, each of these balances is\n * checked against the _currentTotalOutPayment_, a similarly normalised figure that represents the current cost of\n * storing one chunk since the beginning of time. A batch with a normalised balance less than _currentTotalOutPayment_\n * is treated as expired.\n *\n * The _currentTotalOutPayment_ is calculated using _totalOutPayment_ which is updated during _setPrice_ events so\n * that the applicable per-chunk prices can be charged for the relevant periods of time. This can then be multiplied\n * by the amount of chunks which are allowed to be stamped by each batch to get the actual cost of storage.\n *\n * The amount of chunks a batch can stamp is determined by the _bucketDepth_. A batch may store a maximum of 2^depth chunks.\n * The global figure for the currently allowed chunks is tracked by _validChunkCount_ and updated during batch _expiry_ events.\n */\n\ncontract PostageStamp is AccessControl, Pausable {\n    using HitchensOrderStatisticsTreeLib for HitchensOrderStatisticsTreeLib.Tree;\n\n    // ----------------------------- State variables ------------------------------\n\n    // Address of the ERC20 token this contract references.\n    address public bzzToken;\n\n    // Minimum allowed depth of bucket.\n    uint8 public minimumBucketDepth;\n\n    // Role allowed to increase totalOutPayment.\n    bytes32 public immutable PRICE_ORACLE_ROLE;\n\n    // Role allowed to pause\n    bytes32 public immutable PAUSER_ROLE;\n    // Role allowed to withdraw the pot.\n    bytes32 public immutable REDISTRIBUTOR_ROLE;\n\n    // Associate every batch id with batch data.\n    mapping(bytes32 => Batch) public batches;\n    // Store every batch id ordered by normalisedBalance.\n    HitchensOrderStatisticsTreeLib.Tree tree;\n\n    // Total out payment per chunk, at the blockheight of the last price change.\n    uint256 private totalOutPayment;\n\n    // Combined global chunk capacity of valid batches remaining at the blockheight expire() was last called.\n    uint256 public validChunkCount;\n\n    // Lottery pot at last update.\n    uint256 public pot;\n\n    // Normalised balance at the blockheight expire() was last called.\n    uint256 public lastExpiryBalance;\n\n    // Price from the last update.\n    uint64 public lastPrice;\n\n    // blocks in 24 hours ~ 24 * 60 * 60 / 5 = 17280\n    uint64 public minimumValidityBlocks = 17280;\n\n    // Block at which the last update occured.\n    uint64 public lastUpdatedBlock;\n\n    // ----------------------------- Type declarations ------------------------------\n\n    struct Batch {\n        // Owner of this batch (0 if not valid).\n        address owner;\n        // Current depth of this batch.\n        uint8 depth;\n        // Bucket depth defined in this batch\n        uint8 bucketDepth;\n        // Whether this batch is immutable.\n        bool immutableFlag;\n        // Normalised balance per chunk.\n        uint256 normalisedBalance;\n        // When was this batch last updated\n        uint256 lastUpdatedBlockNumber;\n    }\n\n    // ----------------------------- Events ------------------------------\n\n    /**\n     * @dev Emitted when a new batch is created.\n     */\n    event BatchCreated(\n        bytes32 indexed batchId,\n        uint256 totalAmount,\n        uint256 normalisedBalance,\n        address owner,\n        uint8 depth,\n        uint8 bucketDepth,\n        bool immutableFlag\n    );\n\n    /**\n     * @dev Emitted when an pot is Withdrawn.\n     */\n    event PotWithdrawn(address recipient, uint256 totalAmount);\n\n    /**\n     * @dev Emitted when an existing batch is topped up.\n     */\n    event BatchTopUp(bytes32 indexed batchId, uint256 topupAmount, uint256 normalisedBalance);\n\n    /**\n     * @dev Emitted when the depth of an existing batch increases.\n     */\n    event BatchDepthIncrease(bytes32 indexed batchId, uint8 newDepth, uint256 normalisedBalance);\n\n    /**\n     *@dev Emitted on every price update.\n     */\n    event PriceUpdate(uint256 price);\n\n    // ----------------------------- Errors ------------------------------\n\n    error ZeroAddress(); // Owner cannot be the zero address\n    error InvalidDepth(); // Invalid bucket depth\n    error BatchExists(); // Batch already exists\n    error InsufficientBalance(); // Insufficient initial balance for 24h minimum validity\n    error TransferFailed(); // Failed transfer of BZZ tokens\n    error ZeroBalance(); // NormalisedBalance cannot be zero\n    error AdministratorOnly(); // Only administrator can use copy method\n    error BatchDoesNotExist(); // Batch does not exist or has expired\n    error BatchExpired(); // Batch already expired\n    error BatchTooSmall(); // Batch too small to renew\n    error NotBatchOwner(); // Not batch owner\n    error DepthNotIncreasing(); // Depth not increasing\n    error PriceOracleOnly(); // Only price oracle can set the price\n    error InsufficienChunkCount(); // Insufficient valid chunk count\n    error TotalOutpaymentDecreased(); // Current total outpayment should never decrease\n    error NoBatchesExist(); // There are no batches\n    error OnlyPauser(); // Only Pauser role can pause or unpause contracts\n    error OnlyRedistributor(); // Only redistributor role can withdraw from the contract\n\n    // ----------------------------- CONSTRUCTOR ------------------------------\n\n    /**\n     * @param _bzzToken The ERC20 token address to reference in this contract.\n     * @param _minimumBucketDepth The minimum bucket depth of batches that can be purchased.\n     */\n    constructor(address _bzzToken, uint8 _minimumBucketDepth) {\n        bzzToken = _bzzToken;\n        minimumBucketDepth = _minimumBucketDepth;\n        PRICE_ORACLE_ROLE = keccak256(\"PRICE_ORACLE_ROLE\");\n        PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n        REDISTRIBUTOR_ROLE = keccak256(\"REDISTRIBUTOR_ROLE\");\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _setupRole(PAUSER_ROLE, msg.sender);\n    }\n\n    ////////////////////////////////////////\n    //            STATE CHANGING          //\n    ////////////////////////////////////////\n\n    /**\n     * @notice Create a new batch.\n     * @dev At least `_initialBalancePerChunk*2^depth` tokens must be approved in the ERC20 token contract.\n     * @param _owner Owner of the new batch.\n     * @param _initialBalancePerChunk Initial balance per chunk.\n     * @param _depth Initial depth of the new batch.\n     * @param _nonce A random value used in the batch id derivation to allow multiple batches per owner.\n     * @param _immutable Whether the batch is mutable.\n     */\n    function createBatch(\n        address _owner,\n        uint256 _initialBalancePerChunk,\n        uint8 _depth,\n        uint8 _bucketDepth,\n        bytes32 _nonce,\n        bool _immutable\n    ) external whenNotPaused returns (bytes32) {\n        if (_owner == address(0)) {\n            revert ZeroAddress();\n        }\n\n        if (_bucketDepth == 0 || _bucketDepth < minimumBucketDepth || _bucketDepth >= _depth) {\n            revert InvalidDepth();\n        }\n\n        bytes32 batchId = keccak256(abi.encode(msg.sender, _nonce));\n        if (batches[batchId].owner != address(0)) {\n            revert BatchExists();\n        }\n\n        if (_initialBalancePerChunk < minimumInitialBalancePerChunk()) {\n            revert InsufficientBalance();\n        }\n\n        uint256 totalAmount = _initialBalancePerChunk * (1 << _depth);\n        if (!ERC20(bzzToken).transferFrom(msg.sender, address(this), totalAmount)) {\n            revert TransferFailed();\n        }\n\n        uint256 normalisedBalance = currentTotalOutPayment() + (_initialBalancePerChunk);\n        if (normalisedBalance == 0) {\n            revert ZeroBalance();\n        }\n\n        expireLimited(type(uint256).max);\n        validChunkCount += 1 << _depth;\n\n        batches[batchId] = Batch({\n            owner: _owner,\n            depth: _depth,\n            bucketDepth: _bucketDepth,\n            immutableFlag: _immutable,\n            normalisedBalance: normalisedBalance,\n            lastUpdatedBlockNumber: block.number\n        });\n\n        tree.insert(batchId, normalisedBalance);\n\n        emit BatchCreated(batchId, totalAmount, normalisedBalance, _owner, _depth, _bucketDepth, _immutable);\n\n        return batchId;\n    }\n\n    /**\n     * @notice Manually create a new batch when facilitating migration, can only be called by the Admin role.\n     * @dev At least `_initialBalancePerChunk*2^depth` tokens must be approved in the ERC20 token contract.\n     * @param _owner Owner of the new batch.\n     * @param _initialBalancePerChunk Initial balance per chunk of the batch.\n     * @param _depth Initial depth of the new batch.\n     * @param _batchId BatchId being copied (from previous version contract data).\n     * @param _immutable Whether the batch is mutable.\n     */\n    function copyBatch(\n        address _owner,\n        uint256 _initialBalancePerChunk,\n        uint8 _depth,\n        uint8 _bucketDepth,\n        bytes32 _batchId,\n        bool _immutable\n    ) external whenNotPaused {\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) {\n            revert AdministratorOnly();\n        }\n\n        if (_owner == address(0)) {\n            revert ZeroAddress();\n        }\n\n        if (_bucketDepth == 0 || _bucketDepth >= _depth) {\n            revert InvalidDepth();\n        }\n\n        if (batches[_batchId].owner != address(0)) {\n            revert BatchExists();\n        }\n\n        uint256 totalAmount = _initialBalancePerChunk * (1 << _depth);\n        if (!ERC20(bzzToken).transferFrom(msg.sender, address(this), totalAmount)) {\n            revert TransferFailed();\n        }\n\n        uint256 normalisedBalance = currentTotalOutPayment() + (_initialBalancePerChunk);\n        if (normalisedBalance == 0) {\n            revert ZeroBalance();\n        }\n\n        //update validChunkCount to remove currently expired batches\n        expireLimited(type(uint256).max);\n\n        validChunkCount += 1 << _depth;\n\n        batches[_batchId] = Batch({\n            owner: _owner,\n            depth: _depth,\n            bucketDepth: _bucketDepth,\n            immutableFlag: _immutable,\n            normalisedBalance: normalisedBalance,\n            lastUpdatedBlockNumber: block.number\n        });\n\n        tree.insert(_batchId, normalisedBalance);\n\n        emit BatchCreated(_batchId, totalAmount, normalisedBalance, _owner, _depth, _bucketDepth, _immutable);\n    }\n\n    /**\n     * @notice Top up an existing batch.\n     * @dev At least `_topupAmountPerChunk*2^depth` tokens must be approved in the ERC20 token contract.\n     * @param _batchId The id of an existing batch.\n     * @param _topupAmountPerChunk The amount of additional tokens to add per chunk.\n     */\n    function topUp(bytes32 _batchId, uint256 _topupAmountPerChunk) external whenNotPaused {\n        Batch memory batch = batches[_batchId];\n\n        if (batch.owner == address(0)) {\n            revert BatchDoesNotExist();\n        }\n\n        if (batch.normalisedBalance <= currentTotalOutPayment()) {\n            revert BatchExpired();\n        }\n\n        if (batch.depth <= minimumBucketDepth) {\n            revert BatchTooSmall();\n        }\n\n        if (remainingBalance(_batchId) + (_topupAmountPerChunk) < minimumInitialBalancePerChunk()) {\n            revert InsufficientBalance();\n        }\n\n        // per chunk balance multiplied by the batch size in chunks must be transferred from the sender\n        uint256 totalAmount = _topupAmountPerChunk * (1 << batch.depth);\n        if (!ERC20(bzzToken).transferFrom(msg.sender, address(this), totalAmount)) {\n            revert TransferFailed();\n        }\n\n        // update by removing batch and then reinserting\n        tree.remove(_batchId, batch.normalisedBalance);\n        batch.normalisedBalance = batch.normalisedBalance + (_topupAmountPerChunk);\n        tree.insert(_batchId, batch.normalisedBalance);\n\n        batches[_batchId].normalisedBalance = batch.normalisedBalance;\n        emit BatchTopUp(_batchId, totalAmount, batch.normalisedBalance);\n    }\n\n    /**\n     * @notice Increase the depth of an existing batch.\n     * @dev Can only be called by the owner of the batch.\n     * @param _batchId the id of an existing batch.\n     * @param _newDepth the new (larger than the previous one) depth for this batch.\n     */\n    function increaseDepth(bytes32 _batchId, uint8 _newDepth) external whenNotPaused {\n        Batch memory batch = batches[_batchId];\n\n        if (batch.owner != msg.sender) {\n            revert NotBatchOwner();\n        }\n\n        if (!(minimumBucketDepth < _newDepth && batch.depth < _newDepth)) {\n            revert DepthNotIncreasing();\n        }\n\n        if (batch.normalisedBalance <= currentTotalOutPayment()) {\n            revert BatchExpired();\n        }\n\n        uint8 depthChange = _newDepth - batch.depth;\n        uint256 newRemainingBalance = remainingBalance(_batchId) / (1 << depthChange);\n\n        if (newRemainingBalance < minimumInitialBalancePerChunk()) {\n            revert InsufficientBalance();\n        }\n\n        expireLimited(type(uint256).max);\n        validChunkCount += (1 << _newDepth) - (1 << batch.depth);\n        tree.remove(_batchId, batch.normalisedBalance);\n        batches[_batchId].depth = _newDepth;\n        batches[_batchId].lastUpdatedBlockNumber = block.number;\n\n        batch.normalisedBalance = currentTotalOutPayment() + newRemainingBalance;\n        batches[_batchId].normalisedBalance = batch.normalisedBalance;\n        tree.insert(_batchId, batch.normalisedBalance);\n\n        emit BatchDepthIncrease(_batchId, _newDepth, batch.normalisedBalance);\n    }\n\n    /**\n     * @notice Set a new price.\n     * @dev Can only be called by the price oracle role.\n     * @param _price The new price.\n     */\n    function setPrice(uint256 _price) external {\n        if (!hasRole(PRICE_ORACLE_ROLE, msg.sender)) {\n            revert PriceOracleOnly();\n        }\n\n        if (lastPrice != 0) {\n            totalOutPayment = currentTotalOutPayment();\n        }\n\n        lastPrice = uint64(_price);\n        lastUpdatedBlock = uint64(block.number);\n\n        emit PriceUpdate(_price);\n    }\n\n    function setMinimumValidityBlocks(uint64 _value) external {\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) {\n            revert AdministratorOnly();\n        }\n\n        minimumValidityBlocks = _value;\n    }\n\n    /**\n     * @notice Reclaims a limited number of expired batches\n     * @dev Can be used if reclaiming all expired batches would exceed the block gas limit, causing other\n     * contract method calls to fail.\n     * @param limit The maximum number of batches to expire.\n     */\n    function expireLimited(uint256 limit) public {\n        // the lower bound of the normalised balance for which we will check if batches have expired\n        uint256 _lastExpiryBalance = lastExpiryBalance;\n        uint256 i;\n        for (i; i < limit; ) {\n            if (isBatchesTreeEmpty()) {\n                lastExpiryBalance = currentTotalOutPayment();\n                break;\n            }\n            // get the batch with the smallest normalised balance\n            bytes32 fbi = firstBatchId();\n            // if the batch with the smallest balance has not yet expired\n            // we have already reached the end of the batches we need\n            // to expire, so exit the loop\n            if (remainingBalance(fbi) > 0) {\n                // the upper bound of the normalised balance for which we will check if batches have expired\n                // value is updated when there are no expired batches left\n                lastExpiryBalance = currentTotalOutPayment();\n                break;\n            }\n            // otherwise, the batch with the smallest balance has expired,\n            // so we must remove the chunks this batch contributes to the global validChunkCount\n            Batch memory batch = batches[fbi];\n            uint256 batchSize = 1 << batch.depth;\n\n            if (validChunkCount < batchSize) {\n                revert InsufficienChunkCount();\n            }\n            validChunkCount -= batchSize;\n            // since the batch expired _during_ the period we must add\n            // remaining normalised payout for this batch only\n            pot += batchSize * (batch.normalisedBalance - _lastExpiryBalance);\n            tree.remove(fbi, batch.normalisedBalance);\n            delete batches[fbi];\n\n            unchecked {\n                ++i;\n            }\n        }\n        // then, for all batches that have _not_ expired during the period\n        // add the total normalised payout of all batches\n        // multiplied by the remaining total valid chunk count\n        // to the pot for the period since the last expiry\n\n        if (lastExpiryBalance < _lastExpiryBalance) {\n            revert TotalOutpaymentDecreased();\n        }\n\n        // then, for all batches that have _not_ expired during the period\n        // add the total normalised payout of all batches\n        // multiplied by the remaining total valid chunk count\n        // to the pot for the period since the last expiry\n        pot += validChunkCount * (lastExpiryBalance - _lastExpiryBalance);\n    }\n\n    /**\n     * @notice The current pot.\n     */\n    function totalPot() public returns (uint256) {\n        expireLimited(type(uint256).max);\n        uint256 balance = ERC20(bzzToken).balanceOf(address(this));\n        return pot < balance ? pot : balance;\n    }\n\n    /**\n     * @notice Withdraw the pot, authorised callers only.\n     * @param beneficiary Recieves the current total pot.\n     */\n\n    function withdraw(address beneficiary) external {\n        if (!hasRole(REDISTRIBUTOR_ROLE, msg.sender)) {\n            revert OnlyRedistributor();\n        }\n\n        uint256 totalAmount = totalPot();\n        if (!ERC20(bzzToken).transfer(beneficiary, totalAmount)) {\n            revert TransferFailed();\n        }\n\n        emit PotWithdrawn(beneficiary, totalAmount);\n        pot = 0;\n    }\n\n    /**\n     * @notice Pause the contract.\n     * @dev Can only be called by the pauser when not paused.\n     * The contract can be provably stopped by renouncing the pauser role and the admin role once paused.\n     */\n    function pause() public {\n        if (!hasRole(PAUSER_ROLE, msg.sender)) {\n            revert OnlyPauser();\n        }\n        _pause();\n    }\n\n    /**\n     * @notice Unpause the contract.\n     * @dev Can only be called by the pauser role while paused.\n     */\n    function unPause() public {\n        if (!hasRole(PAUSER_ROLE, msg.sender)) {\n            revert OnlyPauser();\n        }\n\n        _unpause();\n    }\n\n    ////////////////////////////////////////\n    //            STATE READING           //\n    ////////////////////////////////////////\n\n    /**\n     * @notice Total per-chunk cost since the contract's deployment.\n     * @dev Returns the total normalised all-time per chunk payout.\n     * Only Batches with a normalised balance greater than this are valid.\n     */\n    function currentTotalOutPayment() public view returns (uint256) {\n        uint256 blocks = block.number - lastUpdatedBlock;\n        uint256 increaseSinceLastUpdate = lastPrice * (blocks);\n        return totalOutPayment + (increaseSinceLastUpdate);\n    }\n\n    function minimumInitialBalancePerChunk() public view returns (uint256) {\n        return minimumValidityBlocks * lastPrice;\n    }\n\n    /**\n     * @notice Return the per chunk balance not yet used up.\n     * @param _batchId The id of an existing batch.\n     */\n    function remainingBalance(bytes32 _batchId) public view returns (uint256) {\n        Batch memory batch = batches[_batchId];\n\n        if (batch.owner == address(0)) {\n            revert BatchDoesNotExist(); // Batch does not exist or expired\n        }\n\n        if (batch.normalisedBalance <= currentTotalOutPayment()) {\n            return 0;\n        }\n\n        return batch.normalisedBalance - currentTotalOutPayment();\n    }\n\n    /**\n     * @notice Indicates whether expired batches exist.\n     */\n    function expiredBatchesExist() public view returns (bool) {\n        if (isBatchesTreeEmpty()) {\n            return false;\n        }\n        return (remainingBalance(firstBatchId()) <= 0);\n    }\n\n    /**\n     * @notice Return true if no batches exist\n     */\n    function isBatchesTreeEmpty() public view returns (bool) {\n        return tree.count() == 0;\n    }\n\n    /**\n     * @notice Get the first batch id ordered by ascending normalised balance.\n     * @dev If more than one batch id, return index at 0, if no batches, revert.\n     */\n    function firstBatchId() public view returns (bytes32) {\n        uint256 val = tree.first();\n        if (val == 0) {\n            revert NoBatchesExist();\n        }\n        return tree.valueKeyAtIndex(val, 0);\n    }\n\n    function batchOwner(bytes32 _batchId) public view returns (address) {\n        return batches[_batchId].owner;\n    }\n\n    function batchDepth(bytes32 _batchId) public view returns (uint8) {\n        return batches[_batchId].depth;\n    }\n\n    function batchBucketDepth(bytes32 _batchId) public view returns (uint8) {\n        return batches[_batchId].bucketDepth;\n    }\n\n    function batchImmutableFlag(bytes32 _batchId) public view returns (bool) {\n        return batches[_batchId].immutableFlag;\n    }\n\n    function batchNormalisedBalance(bytes32 _batchId) public view returns (uint256) {\n        return batches[_batchId].normalisedBalance;\n    }\n\n    function batchLastUpdatedBlockNumber(bytes32 _batchId) public view returns (uint256) {\n        return batches[_batchId].lastUpdatedBlockNumber;\n    }\n}\n"
    },
    "src/PriceOracle.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.19;\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"./interface/IPostageStamp.sol\";\n\n/**\n * @title PriceOracle contract.\n * @author The Swarm Authors.\n * @dev The price oracle contract emits a price feed using events.\n */\n\ncontract PriceOracle is AccessControl {\n    // ----------------------------- State variables ------------------------------\n\n    // The address of the linked PostageStamp contract\n    IPostageStamp public postageStamp;\n\n    uint16 targetRedundancy = 4;\n    uint16 maxConsideredExtraRedundancy = 4;\n\n    // When the contract is paused, price changes are not effective\n    bool public isPaused = true;\n\n    // The number of the last round price adjusting happend\n    uint64 public lastAdjustedRound;\n\n    // The minimum price allowed\n    uint32 public minimumPriceUpscaled = 24000 << 10; // we upscale it by 2^10\n\n    // The priceBase to modulate the price\n    uint32 public priceBase = 524288;\n\n    uint64 public currentPriceUpScaled = minimumPriceUpscaled;\n\n    // Constants used to modulate the price, see below usage\n    uint32[9] public changeRate = [524324, 524315, 524306, 524297, 524288, 524279, 524270, 524261, 524252];\n\n    // Role allowed to update price\n    bytes32 public immutable PRICE_UPDATER_ROLE;\n\n    // The length of a round in blocks.\n    uint8 private constant ROUND_LENGTH = 152;\n\n    // ----------------------------- Events ------------------------------\n\n    /**\n     *@dev Emitted on every price update.\n     */\n    event PriceUpdate(uint256 price);\n\n    // ----------------------------- Custom Errors ------------------------------\n    error CallerNotAdmin(); // Caller is not the admin\n    error CallerNotPriceUpdater(); // Caller is not a price updater\n    error PriceAlreadyAdjusted(); // Price already adjusted in this round\n    error UnexpectedZero(); // Redundancy needs to be higher then 0\n\n    // ----------------------------- CONSTRUCTOR ------------------------------\n\n    constructor(address _postageStamp) {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        postageStamp = IPostageStamp(_postageStamp);\n        lastAdjustedRound = currentRound();\n        PRICE_UPDATER_ROLE = keccak256(\"PRICE_UPDATER_ROLE\");\n    }\n\n    ////////////////////////////////////////\n    //            STATE SETTING           //\n    ////////////////////////////////////////\n\n    /**\n     * @notice Manually set the price.\n     * @dev Can only be called by the admin role.\n     * @param _price The new price.\n     */ function setPrice(uint32 _price) external {\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) {\n            revert CallerNotAdmin();\n        }\n\n        uint64 _currentPriceUpScaled = _price << 10;\n        uint64 _minimumPriceUpscaled = minimumPriceUpscaled;\n\n        // Enforce minimum price\n        if (_currentPriceUpScaled < _minimumPriceUpscaled) {\n            _currentPriceUpScaled = _minimumPriceUpscaled;\n        }\n        currentPriceUpScaled = _currentPriceUpScaled;\n\n        // Price in postagestamp is set at 256 so we need to upcast it\n        postageStamp.setPrice(uint256(currentPrice()));\n        emit PriceUpdate(currentPrice());\n    }\n\n    function adjustPrice(uint16 redundancy) external {\n        if (isPaused == false) {\n            if (!hasRole(PRICE_UPDATER_ROLE, msg.sender)) {\n                revert CallerNotPriceUpdater();\n            }\n\n            uint16 usedRedundancy = redundancy;\n            uint64 currentRoundNumber = currentRound();\n\n            // Price can only be adjusted once per round\n            if (currentRoundNumber <= lastAdjustedRound) {\n                revert PriceAlreadyAdjusted();\n            }\n            // Redundancy may not be zero\n            if (redundancy == 0) {\n                revert UnexpectedZero();\n            }\n\n            // Enforce maximum considered extra redundancy\n            uint16 maxConsideredRedundancy = targetRedundancy + maxConsideredExtraRedundancy;\n            if (redundancy > maxConsideredRedundancy) {\n                usedRedundancy = maxConsideredRedundancy;\n            }\n\n            uint64 _currentPriceUpScaled = currentPriceUpScaled;\n            uint64 _minimumPriceUpscaled = minimumPriceUpscaled;\n            uint32 _priceBase = priceBase;\n\n            // Set the number of rounds that were skipped\n            uint64 skippedRounds = currentRoundNumber - lastAdjustedRound - 1;\n\n            // We first apply the increase/decrease rate for the current round\n            uint32 _changeRate = changeRate[usedRedundancy];\n            _currentPriceUpScaled = (_changeRate * _currentPriceUpScaled) / _priceBase;\n\n            // If previous rounds were skipped, use MAX price increase for the previous rounds\n            if (skippedRounds > 0) {\n                _changeRate = changeRate[0];\n                for (uint64 i = 0; i < skippedRounds; i++) {\n                    _currentPriceUpScaled = (_changeRate * _currentPriceUpScaled) / _priceBase;\n                }\n            }\n\n            // Enforce minimum price\n            if (_currentPriceUpScaled < _minimumPriceUpscaled) {\n                _currentPriceUpScaled = _minimumPriceUpscaled;\n            }\n\n            currentPriceUpScaled = _currentPriceUpScaled;\n            lastAdjustedRound = currentRoundNumber;\n            postageStamp.setPrice(uint256(currentPrice()));\n            emit PriceUpdate(currentPrice());\n        }\n    }\n\n    function pause() external {\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) {\n            revert CallerNotAdmin();\n        }\n        isPaused = true;\n    }\n\n    function unPause() external {\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) {\n            revert CallerNotAdmin();\n        }\n        isPaused = false;\n    }\n\n    ////////////////////////////////////////\n    //            STATE READING           //\n    ////////////////////////////////////////\n\n    /**\n     * @notice Return the number of the current round.\n     */\n    function currentRound() public view returns (uint64) {\n        // We downcasted to uint64 as uint64 has 18,446,744,073,709,551,616 places\n        // as each round is 152 x 5 = 760, each day has around 113 rounds which is 41245 in a year\n        // it results 4.4724801e+14 years to run this game\n        return uint64(block.number / uint256(ROUND_LENGTH));\n    }\n\n    /**\n     * @notice Return the price downscaled\n     */\n    function currentPrice() public view returns (uint32) {\n        // We downcasted to uint32 and bitshift it by 2^10\n        return uint32((currentPriceUpScaled) >> 10);\n    }\n\n    /**\n     * @notice Return the price downscaled\n     */\n    function minimumPrice() public view returns (uint32) {\n        // We downcasted to uint32 and bitshift it by 2^10\n        return uint32((minimumPriceUpscaled) >> 10);\n    }\n}\n"
    },
    "src/Redistribution.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.19;\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"./Util/TransformedChunkProof.sol\";\nimport \"./Util/ChunkProof.sol\";\nimport \"./Util/Signatures.sol\";\nimport \"./interface/IPostageStamp.sol\";\n\ninterface IPriceOracle {\n    function adjustPrice(uint16 redundancy) external;\n}\n\ninterface IStakeRegistry {\n    function freezeDeposit(bytes32 overlay, uint256 time) external;\n\n    function lastUpdatedBlockNumberOfOverlay(bytes32 overlay) external view returns (uint256);\n\n    function ownerOfOverlay(bytes32 overlay) external view returns (address);\n\n    function stakeOfOverlay(bytes32 overlay) external view returns (uint256);\n}\n\n/**\n * @title Redistribution contract\n * @author The Swarm Authors\n * @dev Implements a Schelling Co-ordination game to form consensus around the Reserve Commitment hash. This takes\n * place in three phases: _commit_, _reveal_ and _claim_.\n *\n * A node, upon establishing that it _isParticipatingInUpcomingRound_, i.e. it's overlay falls within proximity order\n * of its reported depth with the _currentRoundAnchor_, prepares a \"reserve commitment hash\" using the chunks\n * it currently stores in its reserve and calculates the \"storage depth\" (see Bee for details). These values, if calculated\n * honestly, and with the right chunks stored, should be the same for every node in a neighbourhood. This is the Schelling point.\n * Each eligible node can then use these values, together with a random, single use, secret  _revealNonce_ and their\n * _overlay_ as the pre-image values for the obsfucated _commit_, using the _wrapCommit_ method.\n *\n * Once the _commit_ round has elapsed, participating nodes must provide the values used to calculate their obsfucated\n * _commit_ hash, which, once verified for correctness and proximity to the anchor are retained in the _currentReveals_.\n * Nodes that have commited but do not reveal the correct values used to create the pre-image will have their stake\n * \"frozen\" for a period of rounds proportional to their reported depth.\n *\n * During the _reveal_ round, randomness is updated after every successful reveal. Once the reveal round is concluded,\n * the _currentRoundAnchor_ is updated and users can determine if they will be eligible their overlay will be eligible\n * for the next commit phase using _isParticipatingInUpcomingRound_.\n *\n * When the _reveal_ phase has been concluded, the claim phase can begin. At this point, the truth teller and winner\n * are already determined. By calling _isWinner_, an applicant node can run the relevant logic to determine if they have\n * been selected as the beneficiary of this round. When calling _claim_, the current pot from the PostageStamp contract\n * is withdrawn and transferred to that beneficiaries address. Nodes that have revealed values that differ from the truth,\n * have their stakes \"frozen\" for a period of rounds proportional to their reported depth.\n */\n\ncontract Redistribution is AccessControl, Pausable {\n    // ----------------------------- Type declarations ------------------------------\n\n    // An eligible user may commit to an _obfuscatedHash_ during the commit phase...\n    struct Commit {\n        bytes32 overlay;\n        address owner;\n        bool revealed;\n        uint256 stake;\n        bytes32 obfuscatedHash;\n        uint256 revealIndex;\n    }\n    // ...then provide the actual values that are the constituents of the pre-image of the _obfuscatedHash_\n    // during the reveal phase.\n    struct Reveal {\n        bytes32 overlay;\n        address owner;\n        uint8 depth;\n        uint256 stake;\n        uint256 stakeDensity;\n        bytes32 hash;\n    }\n\n    struct ChunkInclusionProof {\n        bytes32[] proofSegments;\n        bytes32 proveSegment;\n        // _RCspan is known for RC 32*32\n\n        // Inclusion proof of transformed address\n        bytes32[] proofSegments2;\n        bytes32 proveSegment2;\n        // proveSegmentIndex2 known from deterministic random selection;\n        uint64 chunkSpan;\n        bytes32[] proofSegments3;\n        //  _proveSegment3 known, is equal _proveSegment2\n        // proveSegmentIndex3 know, is equal _proveSegmentIndex2;\n        // chunkSpan2 is equal to chunkSpan (as the data is the same)\n        //\n        PostageProof postageProof;\n        SOCProof[] socProof;\n    }\n\n    struct SOCProof {\n        address signer; // signer Ethereum address to check against\n        bytes signature;\n        bytes32 identifier; //\n        bytes32 chunkAddr; // wrapped chunk address\n    }\n\n    struct PostageProof {\n        bytes signature;\n        bytes32 postageId;\n        uint64 index;\n        uint64 timeStamp;\n        // address signer; it is provided by the postage stamp contract\n        // bytes32 chunkAddr; it equals to the proveSegment argument\n    }\n\n    // The address of the linked PostageStamp contract.\n    IPostageStamp public PostageContract;\n    // The address of the linked PriceOracle contract.\n    IPriceOracle public OracleContract;\n    // The address of the linked Staking contract.\n    IStakeRegistry public Stakes;\n\n    // Commits for the current round.\n    Commit[] public currentCommits;\n    // Reveals for the current round.\n    Reveal[] public currentReveals;\n\n    // The current anchor that being processed for the reveal and claim phases of the round.\n    bytes32 private currentRevealRoundAnchor;\n\n    // The current random value from which we will random.\n    // inputs for selection of the truth teller and beneficiary.\n    bytes32 private seed;\n\n    // The number of the currently active round phases.\n    uint64 public currentCommitRound;\n    uint64 public currentRevealRound;\n    uint64 public currentClaimRound;\n\n    // Settings for slashing and freezing\n    uint8 private penaltyMultiplierDisagreement = 1;\n    uint8 private penaltyMultiplierNonRevealed = 2;\n\n    // alpha=0.097612 beta=0.0716570 k=16\n    uint256 private sampleMaxValue = 1284401000000000000000000000000000000000000000000000000000000000000000000;\n\n    // The reveal of the winner of the last round.\n    Reveal public winner;\n\n    // The length of a round in blocks.\n    uint256 private constant ROUND_LENGTH = 152;\n\n    // The miniumum stake allowed to be staked using the Staking contract.\n    uint64 private constant MIN_STAKE = 100000000000000000;\n\n    // Maximum value of the keccack256 hash.\n    bytes32 private constant MAX_H = 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff;\n\n    // Role allowed to pause.\n    bytes32 private immutable PAUSER_ROLE;\n\n    // ----------------------------- Events ------------------------------\n\n    /**\n     * @dev Emitted when the winner of a round is selected in the claim phase\n     */\n    event WinnerSelected(Reveal winner);\n\n    /**\n     * @dev Emitted when the truth oracle of a round is selected in the claim phase.\n     */\n    event TruthSelected(bytes32 hash, uint8 depth);\n\n    // Next two events to be removed after testing phase pending some other usefulness being found.\n    /**\n     * @dev Emits the number of commits being processed by the claim phase.\n     */\n    event CountCommits(uint256 _count);\n\n    /**\n     * @dev Emits the number of reveals being processed by the claim phase.\n     */\n    event CountReveals(uint256 _count);\n\n    /**\n     * @dev Logs that an overlay has committed\n     */\n    event Committed(uint256 roundNumber, bytes32 overlay);\n    /**\n     * @dev Emit from Postagestamp contract valid chunk count at the end of claim\n     */\n    event ChunkCount(uint256 validChunkCount);\n\n    /**\n     * @dev Bytes32 anhor of current reveal round\n     */\n    event CurrentRevealAnchor(uint256 roundNumber, bytes32 anchor);\n\n    /**\n     * @dev Logs that an overlay has revealed\n     */\n    event Revealed(\n        uint256 roundNumber,\n        bytes32 overlay,\n        uint256 stake,\n        uint256 stakeDensity,\n        bytes32 reserveCommitment,\n        uint8 depth\n    );\n\n    /**\n     * @dev Logs for inclusion proof\n     */\n    event transformedChunkAddressFromInclusionProof(uint256 indexInRC, bytes32 chunkAddress);\n\n    // ----------------------------- Errors ------------------------------\n\n    error NotCommitPhase(); // Game is not in commit phase\n    error NoCommitsReceived(); // Round didn't receive any commits\n    error PhaseLastBlock(); // We don't permit commits in last block of the phase\n    error BelowMinimumStake(); // Node participating in game has stake below minimum treshold\n    error CommitRoundOver(); // Commit phase in this round is over\n    error CommitRoundNotStarted(); // Commit phase in this round has not started yet\n    error NotMatchingOwner(); // Sender of commit is not matching the overlay address\n    error MustStake2Rounds(); // Before entering the game node must stake 2 rounds prior\n    error WrongPhase(); // Checking in wrong phase, need to check duing claim phase of current round for next round or commit in current round\n    error AlreadyCommited(); // Node already commited in this round\n    error NotRevealPhase(); // Game is not in reveal phase\n    error OutOfDepthReveal(bytes32); // Anchor is out of reported depth in Reveal phase, anchor data available as argument\n    error OutOfDepthClaim(uint8); // Anchor is out of reported depth in Claim phase, entryProof index is argument\n    error OutOfDepth(); // Anchor is out of reported depth\n    error AlreadyRevealed(); // Node already revealed\n    error NoMatchingCommit(); // No matching commit and hash\n    error NotClaimPhase(); // Game is not in the claim phase\n    error NoReveals(); // Round did not receive any reveals\n    error FirstRevealDone(); // We don't want to return value after first reveal\n    error AlreadyClaimed(); // This round was already claimed\n    error NotAdmin(); // Caller of trx is not admin\n    error OnlyPauser(); // Only account with pauser role can call pause/unpause\n    error SocVerificationFailed(bytes32); // Soc verification failed for this element\n    error SocCalcNotMatching(bytes32); // Soc address calculation does not match with the witness\n    error IndexOutsideSet(bytes32); // Stamp available: index resides outside of the valid index set\n    error SigRecoveryFailed(bytes32); // Stamp authorized: signature recovery failed for element\n    error BatchDoesNotExist(bytes32); // Stamp alive: batch remaining balance validation failed for attached stamp\n    error BucketDiffers(bytes32); // Stamp aligned: postage bucket differs from address bucket\n    error InclusionProofFailed(uint8, bytes32);\n    // 1 = RC inclusion proof failed for element\n    // 2 = First sister segment in data must match,\n    // 3 = Inclusion proof failed for original address of element\n    // 4 = Inclusion proof failed for transformed address of element\n    error RandomElementCheckFailed(); // Random element order check failed\n    error LastElementCheckFailed(); // Last element order check failed\n    error ReserveCheckFailed(bytes32 trALast); // Reserve size estimation check failed\n\n    // ----------------------------- CONSTRUCTOR ------------------------------\n\n    /**\n     * @param staking the address of the linked Staking contract.\n     * @param postageContract the address of the linked PostageStamp contract.\n     * @param oracleContract the address of the linked PriceOracle contract.\n     */\n    constructor(address staking, address postageContract, address oracleContract) {\n        Stakes = IStakeRegistry(staking);\n        PostageContract = IPostageStamp(postageContract);\n        OracleContract = IPriceOracle(oracleContract);\n        PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _setupRole(PAUSER_ROLE, msg.sender);\n    }\n\n    ////////////////////////////////////////\n    //           STATE CHANGING           //\n    ////////////////////////////////////////\n\n    /**\n     * @notice Begin application for a round if eligible. Commit a hashed value for which the pre-image will be\n     * subsequently revealed.\n     * @dev If a node's overlay is _inProximity_(_depth_) of the _currentRoundAnchor_, that node may compute an\n     * _obfuscatedHash_ by providing their _overlay_, reported storage _depth_, reserve commitment _hash_ and a\n     * randomly generated, and secret _revealNonce_ to the _wrapCommit_ method.\n     * @param _obfuscatedHash The calculated hash resultant of the required pre-image values.\n     * @param _overlay The overlay referenced in the pre-image. Must be staked by at least the minimum value,\n     * and be derived from the same key pair as the message sender.\n     */\n    function commit(bytes32 _obfuscatedHash, bytes32 _overlay, uint64 _roundNumber) external whenNotPaused {\n        uint64 cr = currentRound();\n        uint256 nstake = Stakes.stakeOfOverlay(_overlay);\n\n        if (!currentPhaseCommit()) {\n            revert NotCommitPhase();\n        }\n        if (block.number % ROUND_LENGTH == (ROUND_LENGTH / 4) - 1) {\n            revert PhaseLastBlock();\n        }\n\n        if (cr > _roundNumber) {\n            revert CommitRoundOver();\n        }\n\n        if (cr < _roundNumber) {\n            revert CommitRoundNotStarted();\n        }\n\n        if (nstake < MIN_STAKE) {\n            revert BelowMinimumStake();\n        }\n\n        if (Stakes.ownerOfOverlay(_overlay) != msg.sender) {\n            revert NotMatchingOwner();\n        }\n\n        if (Stakes.lastUpdatedBlockNumberOfOverlay(_overlay) >= block.number - 2 * ROUND_LENGTH) {\n            revert MustStake2Rounds();\n        }\n\n        // if we are in a new commit phase, reset the array of commits and\n        // set the currentCommitRound to be the current one\n        if (cr != currentCommitRound) {\n            delete currentCommits;\n            currentCommitRound = cr;\n        }\n\n        uint256 commitsArrayLength = currentCommits.length;\n\n        for (uint256 i = 0; i < commitsArrayLength; ) {\n            if (currentCommits[i].overlay == _overlay) {\n                revert AlreadyCommited();\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        currentCommits.push(\n            Commit({\n                overlay: _overlay,\n                owner: msg.sender,\n                revealed: false,\n                stake: nstake,\n                obfuscatedHash: _obfuscatedHash,\n                revealIndex: 0\n            })\n        );\n\n        emit Committed(_roundNumber, _overlay);\n    }\n\n    /**\n     * @notice Reveal the pre-image values used to generate commit provided during this round's commit phase.\n     * @param _overlay The overlay address of the applicant.\n     * @param _depth The reported depth.\n     * @param _hash The reserve commitment hash.\n     * @param _revealNonce The nonce used to generate the commit that is being revealed.\n     */\n    function reveal(bytes32 _overlay, uint8 _depth, bytes32 _hash, bytes32 _revealNonce) external whenNotPaused {\n        uint64 cr = currentRound();\n\n        if (_depth < currentMinimumDepth()) {\n            revert OutOfDepth();\n        }\n\n        if (!currentPhaseReveal()) {\n            revert NotRevealPhase();\n        }\n\n        if (cr != currentCommitRound) {\n            revert NoCommitsReceived();\n        }\n\n        if (cr != currentRevealRound) {\n            currentRevealRoundAnchor = currentRoundAnchor();\n            delete currentReveals;\n            // We set currentRevealRound ONLY after we set current anchor\n            currentRevealRound = cr;\n            emit CurrentRevealAnchor(cr, currentRevealRoundAnchor);\n            updateRandomness();\n        }\n\n        bytes32 obfuscatedHash = wrapCommit(_overlay, _depth, _hash, _revealNonce);\n        uint256 id = findCommit(_overlay, obfuscatedHash);\n        Commit memory revealedCommit = currentCommits[id];\n\n        // Check that commit is in proximity of the current anchor\n        if (!inProximity(revealedCommit.overlay, currentRevealRoundAnchor, _depth)) {\n            revert OutOfDepthReveal(currentRevealRoundAnchor);\n        }\n        // Check that the commit has not already been revealed\n        if (revealedCommit.revealed) {\n            revert AlreadyRevealed();\n        }\n\n        currentCommits[id].revealed = true;\n        currentCommits[id].revealIndex = currentReveals.length;\n\n        currentReveals.push(\n            Reveal({\n                overlay: revealedCommit.overlay,\n                owner: revealedCommit.owner,\n                depth: _depth,\n                stake: revealedCommit.stake,\n                stakeDensity: revealedCommit.stake * uint256(2 ** _depth),\n                hash: _hash\n            })\n        );\n\n        emit Revealed(\n            cr,\n            revealedCommit.overlay,\n            revealedCommit.stake,\n            revealedCommit.stake * uint256(2 ** _depth),\n            _hash,\n            _depth\n        );\n    }\n\n    /**\n     * @notice Helper function to get this round truth\n     * @dev\n     */\n    function claim(\n        ChunkInclusionProof calldata entryProof1,\n        ChunkInclusionProof calldata entryProof2,\n        ChunkInclusionProof calldata entryProofLast\n    ) external whenNotPaused {\n        winnerSelection();\n\n        Reveal memory winnerSelected = winner;\n        uint256 indexInRC1;\n        uint256 indexInRC2;\n        bytes32 _currentRevealRoundAnchor = currentRevealRoundAnchor;\n        bytes32 _seed = seed;\n\n        // rand(14)\n        indexInRC1 = uint256(_seed) % 15;\n        // rand(13)\n        indexInRC2 = uint256(_seed) % 14;\n        if (indexInRC2 >= indexInRC1) {\n            indexInRC2++;\n        }\n\n        if (!inProximity(entryProofLast.proveSegment, _currentRevealRoundAnchor, winnerSelected.depth)) {\n            revert OutOfDepthClaim(3);\n        }\n\n        inclusionFunction(entryProofLast, 30);\n        stampFunction(entryProofLast);\n        socFunction(entryProofLast);\n\n        if (!inProximity(entryProof1.proveSegment, _currentRevealRoundAnchor, winnerSelected.depth)) {\n            revert OutOfDepthClaim(2);\n        }\n\n        inclusionFunction(entryProof1, indexInRC1 * 2);\n        stampFunction(entryProof1);\n        socFunction(entryProof1);\n\n        if (!inProximity(entryProof2.proveSegment, _currentRevealRoundAnchor, winnerSelected.depth)) {\n            revert OutOfDepthClaim(1);\n        }\n\n        inclusionFunction(entryProof2, indexInRC2 * 2);\n        stampFunction(entryProof2);\n        socFunction(entryProof2);\n\n        checkOrder(\n            indexInRC1,\n            indexInRC2,\n            entryProof1.proofSegments[0],\n            entryProof2.proofSegments[0],\n            entryProofLast.proofSegments[0]\n        );\n\n        estimateSize(entryProofLast.proofSegments[0]);\n\n        PostageContract.withdraw(winnerSelected.owner);\n        emit WinnerSelected(winnerSelected);\n        emit ChunkCount(PostageContract.validChunkCount());\n    }\n\n    function winnerSelection() internal {\n        uint64 cr = currentRound();\n\n        if (!currentPhaseClaim()) {\n            revert NotClaimPhase();\n        }\n\n        if (cr != currentRevealRound) {\n            revert NoReveals();\n        }\n\n        if (cr <= currentClaimRound) {\n            revert AlreadyClaimed();\n        }\n\n        uint256 currentWinnerSelectionSum = 0;\n        uint256 redundancyCount = 0;\n        bytes32 randomNumber;\n        uint256 randomNumberTrunc;\n\n        bytes32 truthRevealedHash;\n        uint8 truthRevealedDepth;\n        uint256 currentCommitsLength = currentCommits.length;\n\n        emit CountCommits(currentCommitsLength);\n        emit CountReveals(currentReveals.length);\n\n        (truthRevealedHash, truthRevealedDepth) = getCurrentTruth();\n        emit TruthSelected(truthRevealedHash, truthRevealedDepth);\n        string memory winnerSelectionAnchor = currentWinnerSelectionAnchor();\n\n        for (uint256 i = 0; i < currentCommitsLength; ) {\n            Commit memory currentCommit = currentCommits[i];\n            uint256 revIndex = currentCommit.revealIndex;\n            Reveal memory currentReveal = currentReveals[revIndex];\n\n            // Select winner with valid truth\n            if (\n                currentCommit.revealed &&\n                truthRevealedHash == currentReveal.hash &&\n                truthRevealedDepth == currentReveal.depth\n            ) {\n                currentWinnerSelectionSum += currentReveal.stakeDensity;\n                randomNumber = keccak256(abi.encodePacked(winnerSelectionAnchor, redundancyCount));\n                randomNumberTrunc = uint256(randomNumber & MAX_H);\n\n                if (randomNumberTrunc * currentWinnerSelectionSum < currentReveal.stakeDensity * (uint256(MAX_H) + 1)) {\n                    winner = currentReveal;\n                }\n\n                redundancyCount++;\n            }\n\n            // Freeze deposit if any truth is false\n            if (\n                currentCommit.revealed &&\n                (truthRevealedHash != currentReveal.hash || truthRevealedDepth != currentReveal.depth)\n            ) {\n                Stakes.freezeDeposit(\n                    currentReveal.overlay,\n                    penaltyMultiplierDisagreement * ROUND_LENGTH * uint256(2 ** truthRevealedDepth)\n                );\n            }\n\n            // Slash deposits if revealed is false\n            if (!currentCommit.revealed) {\n                // slash in later phase (ph5)\n                // Stakes.slashDeposit(currentCommits[i].overlay, currentCommits[i].stake);\n                Stakes.freezeDeposit(\n                    currentCommit.overlay,\n                    penaltyMultiplierNonRevealed * ROUND_LENGTH * uint256(2 ** truthRevealedDepth)\n                );\n            }\n            unchecked {\n                ++i;\n            }\n        }\n\n        OracleContract.adjustPrice(uint16(redundancyCount));\n        currentClaimRound = cr;\n    }\n\n    function inclusionFunction(ChunkInclusionProof calldata entryProof, uint256 indexInRC) internal {\n        uint256 randomChunkSegmentIndex = uint256(seed) % 128;\n        bytes32 calculatedTransformedAddr = TransformedBMTChunk.transformedChunkAddressFromInclusionProof(\n            entryProof.proofSegments3,\n            entryProof.proveSegment2,\n            randomChunkSegmentIndex,\n            entryProof.chunkSpan,\n            currentRevealRoundAnchor\n        );\n\n        emit transformedChunkAddressFromInclusionProof(indexInRC, calculatedTransformedAddr);\n\n        if (\n            winner.hash !=\n            BMTChunk.chunkAddressFromInclusionProof(\n                entryProof.proofSegments,\n                entryProof.proveSegment,\n                indexInRC,\n                32 * 32\n            )\n        ) {\n            revert InclusionProofFailed(1, calculatedTransformedAddr);\n        }\n\n        if (entryProof.proofSegments2[0] != entryProof.proofSegments3[0]) {\n            revert InclusionProofFailed(2, calculatedTransformedAddr);\n        }\n\n        bytes32 originalAddress = entryProof.socProof.length > 0\n            ? entryProof.socProof[0].chunkAddr // soc attestation in socFunction\n            : entryProof.proveSegment;\n\n        if (\n            originalAddress !=\n            BMTChunk.chunkAddressFromInclusionProof(\n                entryProof.proofSegments2,\n                entryProof.proveSegment2,\n                randomChunkSegmentIndex,\n                entryProof.chunkSpan\n            )\n        ) {\n            revert InclusionProofFailed(3, calculatedTransformedAddr);\n        }\n\n        // In case of SOC, the transformed address is hashed together with its address in the sample\n        if (entryProof.socProof.length > 0) {\n            calculatedTransformedAddr = keccak256(\n                abi.encode(\n                    entryProof.proveSegment, // SOC address\n                    calculatedTransformedAddr\n                )\n            );\n        }\n\n        if (entryProof.proofSegments[0] != calculatedTransformedAddr) {\n            revert InclusionProofFailed(4, calculatedTransformedAddr);\n        }\n    }\n\n    /**\n     * @notice Set freezing parameters\n     */\n    function setFreezingParams(uint8 _penaltyMultiplierDisagreement, uint8 _penaltyMultiplierNonRevealed) external {\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) {\n            revert NotAdmin();\n        }\n\n        penaltyMultiplierDisagreement = _penaltyMultiplierDisagreement;\n        penaltyMultiplierNonRevealed = _penaltyMultiplierNonRevealed;\n    }\n\n    /**\n     * @notice changes the max sample value used for reserve estimation\n     */\n    function setSampleMaxValue(uint256 _sampleMaxValue) external {\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) {\n            revert NotAdmin();\n        }\n\n        sampleMaxValue = _sampleMaxValue;\n    }\n\n    /**\n     * @notice Updates the source of randomness. Uses block.difficulty in pre-merge chains, this is substituted\n     * to block.prevrandao in post merge chains.\n     */\n    function updateRandomness() private {\n        seed = keccak256(abi.encode(seed, block.prevrandao));\n    }\n\n    /**\n    * @dev Pause the contract. The contract is provably stopped by renouncing\n     the pauser role and the admin role after pausing, can only be called by the `PAUSER`\n     */\n    function pause() public {\n        if (!hasRole(PAUSER_ROLE, msg.sender)) {\n            revert OnlyPauser();\n        }\n\n        _pause();\n    }\n\n    /**\n     * @dev Unpause the contract, can only be called by the pauser when paused\n     */\n    function unPause() public {\n        if (!hasRole(PAUSER_ROLE, msg.sender)) {\n            revert OnlyPauser();\n        }\n        _unpause();\n    }\n\n    ////////////////////////////////////////\n    //            STATE READING           //\n    ////////////////////////////////////////\n\n    // ----------------------------- Anchor calculations ------------------------------\n\n    /**\n     * @notice Returns the current random seed which is used to determine later utilised random numbers.\n     * If rounds have elapsed without reveals, hash the seed with an incremented nonce to produce a new\n     * random seed and hence a new round anchor.\n     */\n    function currentSeed() public view returns (bytes32) {\n        uint64 cr = currentRound();\n        bytes32 currentSeedValue = seed;\n\n        if (cr > currentRevealRound + 1) {\n            uint256 difference = cr - currentRevealRound - 1;\n            currentSeedValue = keccak256(abi.encodePacked(currentSeedValue, difference));\n        }\n\n        return currentSeedValue;\n    }\n\n    /**\n     * @notice Returns the seed which will become current once the next commit phase begins.\n     * Used to determine what the next round's anchor will be.\n     */\n    function nextSeed() public view returns (bytes32) {\n        uint64 cr = currentRound() + 1;\n        bytes32 currentSeedValue = seed;\n\n        if (cr > currentRevealRound + 1) {\n            uint256 difference = cr - currentRevealRound - 1;\n            currentSeedValue = keccak256(abi.encodePacked(currentSeedValue, difference));\n        }\n\n        return currentSeedValue;\n    }\n\n    /**\n     * @notice The random value used to choose the selected truth teller.\n     */\n    function currentTruthSelectionAnchor() private view returns (string memory) {\n        if (!currentPhaseClaim()) {\n            revert NotClaimPhase();\n        }\n\n        uint64 cr = currentRound();\n        if (cr != currentRevealRound) {\n            revert NoReveals();\n        }\n\n        return string(abi.encodePacked(seed, \"0\"));\n    }\n\n    /**\n     * @notice The random value used to choose the selected beneficiary.\n     */\n    function currentWinnerSelectionAnchor() private view returns (string memory) {\n        if (!currentPhaseClaim()) {\n            revert NotClaimPhase();\n        }\n        uint64 cr = currentRound();\n        if (cr != currentRevealRound) {\n            revert NoReveals();\n        }\n\n        return string(abi.encodePacked(seed, \"1\"));\n    }\n\n    /**\n     * @notice The anchor used to determine eligibility for the current round.\n     * @dev A node must be within proximity order of less than or equal to the storage depth they intend to report.\n     */\n    function currentRoundAnchor() public view returns (bytes32 returnVal) {\n        // This will be called in reveal phase and set as currentRevealRoundAnchor or in\n        // commit phase when checking eligibility for next round by isParticipatingInUpcomingRound\n        if (currentPhaseCommit() || (currentRound() > currentRevealRound && !currentPhaseClaim())) {\n            return currentSeed();\n        }\n\n        // This will be called by isParticipatingInUpcomingRound check in claim phase\n        if (currentPhaseClaim()) {\n            return nextSeed();\n        }\n\n        // Without this, this function will output 0x0 after first reveal which is value and we prefere it reverts\n        if (currentPhaseReveal() && currentRound() == currentRevealRound) {\n            revert FirstRevealDone();\n        }\n    }\n\n    /**\n     * @notice Returns true if an overlay address _A_ is within proximity order _minimum_ of _B_.\n     * @param A An overlay address to compare.\n     * @param B An overlay address to compare.\n     * @param minimum Minimum proximity order.\n     */\n    function inProximity(bytes32 A, bytes32 B, uint8 minimum) public pure returns (bool) {\n        if (minimum == 0) {\n            return true;\n        }\n        return uint256(A ^ B) < uint256(2 ** (256 - minimum));\n    }\n\n    // ----------------------------- Commit ------------------------------\n\n    /**\n     * @notice The number of the current round.\n     */\n    function currentRound() public view returns (uint64) {\n        return uint64(block.number / ROUND_LENGTH);\n    }\n\n    /**\n     * @notice Returns true if current block is during commit phase.\n     */\n    function currentPhaseCommit() public view returns (bool) {\n        if (block.number % ROUND_LENGTH < ROUND_LENGTH / 4) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @notice Determine if a the owner of a given overlay can participate in the upcoming round.\n     * @param overlay The overlay address of the applicant.\n     * @param depth The storage depth the applicant intends to report.\n     */\n    function isParticipatingInUpcomingRound(bytes32 overlay, uint8 depth) public view returns (bool) {\n        if (currentPhaseReveal()) {\n            revert WrongPhase();\n        }\n\n        if (Stakes.lastUpdatedBlockNumberOfOverlay(overlay) >= block.number - 2 * ROUND_LENGTH) {\n            revert MustStake2Rounds();\n        }\n\n        if (Stakes.stakeOfOverlay(overlay) < MIN_STAKE) {\n            revert BelowMinimumStake();\n        }\n\n        return inProximity(overlay, currentRoundAnchor(), depth);\n    }\n\n    // ----------------------------- Reveal ------------------------------\n\n    /**\n     * @notice Returns minimum depth reveal has to have to participate in this round\n     */\n    function currentMinimumDepth() public view returns (uint8) {\n        // We are checking value in reveal phase, as the currentCommitRound is set to the current round\n        // but the currentClaimRound is still set to the last time claim was made\n        // We add 1 to ensure that for the next round the minimum depth is the same as last winner depth\n\n        uint256 difference = currentCommitRound - currentClaimRound;\n        uint8 skippedRounds = uint8(difference > 254 ? 254 : difference) + 1;\n\n        uint8 lastWinnerDepth = winner.depth;\n\n        // We ensure that skippedRounds is not bigger than lastWinnerDepth, because of overflow\n        return skippedRounds >= lastWinnerDepth ? 0 : lastWinnerDepth - skippedRounds;\n    }\n\n    /**\n     * @notice Helper function to get this node reveal in commits\n     * @dev\n     */\n    function findCommit(bytes32 _overlay, bytes32 _obfuscatedHash) internal view returns (uint256) {\n        for (uint256 i = 0; i < currentCommits.length; ) {\n            if (currentCommits[i].overlay == _overlay && _obfuscatedHash == currentCommits[i].obfuscatedHash) {\n                return i;\n            }\n            unchecked {\n                ++i;\n            }\n        }\n        revert NoMatchingCommit();\n    }\n\n    /**\n     * @notice Hash the pre-image values to the obsfucated hash.\n     * @dev _revealNonce_ must be randomly generated, used once and kept secret until the reveal phase.\n     * @param _overlay The overlay address of the applicant.\n     * @param _depth The reported depth.\n     * @param _hash The reserve commitment hash.\n     * @param revealNonce A random, single use, secret nonce.\n     */\n    function wrapCommit(\n        bytes32 _overlay,\n        uint8 _depth,\n        bytes32 _hash,\n        bytes32 revealNonce\n    ) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_overlay, _depth, _hash, revealNonce));\n    }\n\n    /**\n     * @notice Returns true if current block is during reveal phase.\n     */\n    function currentPhaseReveal() public view returns (bool) {\n        uint256 number = block.number % ROUND_LENGTH;\n        if (number >= ROUND_LENGTH / 4 && number < ROUND_LENGTH / 2) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @notice Returns true if current block is during reveal phase.\n     */\n    function currentRoundReveals() public view returns (Reveal[] memory) {\n        if (!currentPhaseClaim()) {\n            revert NotClaimPhase();\n        }\n        uint64 cr = currentRound();\n        if (cr != currentRevealRound) {\n            revert NoReveals();\n        }\n\n        return currentReveals;\n    }\n\n    // ----------------------------- Claim  ------------------------------\n\n    /**\n     * @notice Returns true if current block is during claim phase.\n     */\n    function currentPhaseClaim() public view returns (bool) {\n        if (block.number % ROUND_LENGTH >= ROUND_LENGTH / 2) {\n            return true;\n        }\n        return false;\n    }\n\n    function getCurrentTruth() internal view returns (bytes32 Hash, uint8 Depth) {\n        uint256 currentSum;\n        bytes32 randomNumber;\n        uint256 randomNumberTrunc;\n\n        bytes32 truthRevealedHash;\n        uint8 truthRevealedDepth;\n        uint256 revIndex;\n        string memory truthSelectionAnchor = currentTruthSelectionAnchor();\n        uint256 commitsArrayLength = currentCommits.length;\n\n        for (uint256 i = 0; i < commitsArrayLength; ) {\n            if (currentCommits[i].revealed) {\n                revIndex = currentCommits[i].revealIndex;\n                currentSum += currentReveals[revIndex].stakeDensity;\n                randomNumber = keccak256(abi.encodePacked(truthSelectionAnchor, i));\n                randomNumberTrunc = uint256(randomNumber & MAX_H);\n\n                // question is whether randomNumber / MAX_H < probability\n                // where probability is stakeDensity / currentSum\n                // to avoid resorting to floating points all divisions should be\n                // simplified with multiplying both sides (as long as divisor > 0)\n                // randomNumber / (MAX_H + 1) < stakeDensity / currentSum\n                // ( randomNumber / (MAX_H + 1) ) * currentSum < stakeDensity\n                // randomNumber * currentSum < stakeDensity * (MAX_H + 1)\n                if (randomNumberTrunc * currentSum < currentReveals[revIndex].stakeDensity * (uint256(MAX_H) + 1)) {\n                    truthRevealedHash = currentReveals[revIndex].hash;\n                    truthRevealedDepth = currentReveals[revIndex].depth;\n                }\n            }\n            unchecked {\n                ++i;\n            }\n        }\n\n        return (truthRevealedHash, truthRevealedDepth);\n    }\n\n    /**\n     * @notice Determine if a the owner of a given overlay will be the beneficiary of the claim phase.\n     * @param _overlay The overlay address of the applicant.\n     */\n    function isWinner(bytes32 _overlay) public view returns (bool) {\n        if (!currentPhaseClaim()) {\n            revert NotClaimPhase();\n        }\n\n        uint64 cr = currentRound();\n        if (cr != currentRevealRound) {\n            revert NoReveals();\n        }\n\n        if (cr <= currentClaimRound) {\n            revert AlreadyClaimed();\n        }\n\n        uint256 currentWinnerSelectionSum;\n        bytes32 winnerIs;\n        bytes32 randomNumber;\n        uint256 randomNumberTrunc;\n        bytes32 truthRevealedHash;\n        uint8 truthRevealedDepth;\n        uint256 revIndex;\n        string memory winnerSelectionAnchor = currentWinnerSelectionAnchor();\n        uint256 redundancyCount = 0;\n\n        // Get current truth\n        (truthRevealedHash, truthRevealedDepth) = getCurrentTruth();\n        uint256 commitsArrayLength = currentCommits.length;\n\n        for (uint256 i = 0; i < commitsArrayLength; ) {\n            revIndex = currentCommits[i].revealIndex;\n\n            // Deterministically read winner\n            if (\n                currentCommits[i].revealed &&\n                truthRevealedHash == currentReveals[revIndex].hash &&\n                truthRevealedDepth == currentReveals[revIndex].depth\n            ) {\n                currentWinnerSelectionSum += currentReveals[revIndex].stakeDensity;\n                randomNumber = keccak256(abi.encodePacked(winnerSelectionAnchor, redundancyCount));\n                randomNumberTrunc = uint256(randomNumber & MAX_H);\n\n                if (\n                    randomNumberTrunc * currentWinnerSelectionSum <\n                    currentReveals[revIndex].stakeDensity * (uint256(MAX_H) + 1)\n                ) {\n                    winnerIs = currentReveals[revIndex].overlay;\n                }\n\n                redundancyCount++;\n            }\n            unchecked {\n                ++i;\n            }\n        }\n\n        return (winnerIs == _overlay);\n    }\n\n    // ----------------------------- Claim verifications  ------------------------------\n\n    function socFunction(ChunkInclusionProof calldata entryProof) internal pure {\n        if (entryProof.socProof.length == 0) return;\n\n        if (\n            !Signatures.socVerify(\n                entryProof.socProof[0].signer, // signer Ethereum address to check against\n                entryProof.socProof[0].signature,\n                entryProof.socProof[0].identifier,\n                entryProof.socProof[0].chunkAddr\n            )\n        ) {\n            revert SocVerificationFailed(entryProof.socProof[0].chunkAddr);\n        }\n\n        if (\n            calculateSocAddress(entryProof.socProof[0].identifier, entryProof.socProof[0].signer) !=\n            entryProof.proveSegment\n        ) {\n            revert SocCalcNotMatching(entryProof.socProof[0].chunkAddr);\n        }\n    }\n\n    function stampFunction(ChunkInclusionProof calldata entryProof) internal view {\n        // authentic\n        (address batchOwner, uint8 batchDepth, uint8 bucketDepth, , , ) = PostageContract.batches(\n            entryProof.postageProof.postageId\n        );\n\n        // alive\n        if (batchOwner == address(0)) {\n            revert BatchDoesNotExist(entryProof.postageProof.postageId); // Batch does not exist or expired\n        }\n\n        uint32 postageIndex = getPostageIndex(entryProof.postageProof.index);\n        uint256 maxPostageIndex = postageStampIndexCount(batchDepth, bucketDepth);\n        // available\n        if (postageIndex >= maxPostageIndex) {\n            revert IndexOutsideSet(entryProof.postageProof.postageId);\n        }\n\n        // aligned\n        uint64 postageBucket = getPostageBucket(entryProof.postageProof.index);\n        uint64 addressBucket = addressToBucket(entryProof.proveSegment, bucketDepth);\n        if (postageBucket != addressBucket) {\n            revert BucketDiffers(entryProof.postageProof.postageId);\n        }\n\n        // authorized\n        if (\n            !Signatures.postageVerify(\n                batchOwner,\n                entryProof.postageProof.signature,\n                entryProof.proveSegment,\n                entryProof.postageProof.postageId,\n                entryProof.postageProof.index,\n                entryProof.postageProof.timeStamp\n            )\n        ) {\n            revert SigRecoveryFailed(entryProof.postageProof.postageId);\n        }\n    }\n\n    function addressToBucket(bytes32 swarmAddress, uint8 bucketDepth) internal pure returns (uint32) {\n        uint32 prefix = uint32(uint256(swarmAddress) >> (256 - 32));\n        return prefix >> (32 - bucketDepth);\n    }\n\n    function postageStampIndexCount(uint8 postageDepth, uint8 bucketDepth) internal pure returns (uint256) {\n        return 1 << (postageDepth - bucketDepth);\n    }\n\n    function getPostageIndex(uint64 signedIndex) internal pure returns (uint32) {\n        return uint32(signedIndex);\n    }\n\n    function getPostageBucket(uint64 signedIndex) internal pure returns (uint64) {\n        return uint32(signedIndex >> 32);\n    }\n\n    function calculateSocAddress(bytes32 identifier, address signer) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(identifier, signer));\n    }\n\n    function checkOrder(uint256 a, uint256 b, bytes32 trA1, bytes32 trA2, bytes32 trALast) internal pure {\n        if (a < b) {\n            if (uint256(trA1) >= uint256(trA2)) {\n                revert RandomElementCheckFailed();\n            }\n            if (uint256(trA2) >= uint256(trALast)) {\n                revert LastElementCheckFailed();\n            }\n        } else {\n            if (uint256(trA2) >= uint256(trA1)) {\n                revert RandomElementCheckFailed();\n            }\n            if (uint256(trA1) >= uint256(trALast)) {\n                revert LastElementCheckFailed();\n            }\n        }\n    }\n\n    function estimateSize(bytes32 trALast) internal view {\n        if (uint256(trALast) >= sampleMaxValue) {\n            revert ReserveCheckFailed(trALast);\n        }\n    }\n}\n"
    },
    "src/Staking.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.19;\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\n\n/**\n * @title Staking contract for the Swarm storage incentives\n * @author The Swarm Authors\n * @dev Allows users to stake tokens in order to be eligible for the Redistribution Schelling co-ordination game.\n * Stakes are not withdrawable unless the contract is paused, e.g. in the event of migration to a new staking\n * contract. Stakes are frozen or slashed by the Redistribution contract in response to violations of the\n * protocol.\n */\n\ncontract StakeRegistry is AccessControl, Pausable {\n    /**\n     * @dev Emitted when a stake is created or updated by `owner` of the `overlay` by `stakeamount`, during `lastUpdatedBlock`.\n     */\n    event StakeUpdated(bytes32 indexed overlay, uint256 stakeAmount, address owner, uint256 lastUpdatedBlock);\n\n    /**\n     * @dev Emitted when a stake for overlay `slashed` is slashed by `amount`.\n     */\n    event StakeSlashed(bytes32 slashed, uint256 amount);\n\n    /**\n     * @dev Emitted when a stake for overlay `frozen` for `time` blocks.\n     */\n    event StakeFrozen(bytes32 slashed, uint256 time);\n\n    struct Stake {\n        // Overlay of the node that is being staked\n        bytes32 overlay;\n        // Amount of tokens staked\n        uint256 stakeAmount;\n        // Owner of `overlay`\n        address owner;\n        // Block height the stake was updated\n        uint256 lastUpdatedBlockNumber;\n        // Used to indicate presents in stakes struct\n        bool isValue;\n    }\n\n    // Associate every stake id with overlay data.\n    mapping(bytes32 => Stake) public stakes;\n\n    // Role allowed to pause\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n    // Role allowed to freeze and slash entries\n    bytes32 public constant REDISTRIBUTOR_ROLE = keccak256(\"REDISTRIBUTOR_ROLE\");\n\n    // Swarm network ID\n    uint64 NetworkId;\n\n    // Address of the staked ERC20 token\n    address public bzzToken;\n\n    /**\n     * @param _bzzToken Address of the staked ERC20 token\n     * @param _NetworkId Swarm network ID\n     */\n    constructor(address _bzzToken, uint64 _NetworkId) {\n        NetworkId = _NetworkId;\n        bzzToken = _bzzToken;\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _setupRole(PAUSER_ROLE, msg.sender);\n    }\n\n    /**\n     * @dev Checks to see if `overlay` is frozen.\n     * @param overlay Overlay of staked overlay\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     */\n    function overlayNotFrozen(bytes32 overlay) internal view returns (bool) {\n        return stakes[overlay].lastUpdatedBlockNumber < block.number;\n    }\n\n    /**\n     * @dev Returns the current `stakeAmount` of `overlay`.\n     * @param overlay Overlay of node\n     */\n    function stakeOfOverlay(bytes32 overlay) public view returns (uint256) {\n        return stakes[overlay].stakeAmount;\n    }\n\n    /**\n     * @dev Returns the current usable `stakeAmount` of `overlay`.\n     * Checks whether the stake is currently frozen.\n     * @param overlay Overlay of node\n     */\n    function usableStakeOfOverlay(bytes32 overlay) public view returns (uint256) {\n        return overlayNotFrozen(overlay) ? stakes[overlay].stakeAmount : 0;\n    }\n\n    /**\n     * @dev Returns the `lastUpdatedBlockNumber` of `overlay`.\n     */\n    function lastUpdatedBlockNumberOfOverlay(bytes32 overlay) public view returns (uint256) {\n        return stakes[overlay].lastUpdatedBlockNumber;\n    }\n\n    /**\n     * @dev Returns the eth address of the owner of `overlay`.\n     * @param overlay Overlay of node\n     */\n    function ownerOfOverlay(bytes32 overlay) public view returns (address) {\n        return stakes[overlay].owner;\n    }\n\n    /**\n     * @dev Please both Endians 🥚.\n     * @param input Eth address used for overlay calculation.\n     */\n    function reverse(uint64 input) internal pure returns (uint64 v) {\n        v = input;\n\n        // swap bytes\n        v = ((v & 0xFF00FF00FF00FF00) >> 8) | ((v & 0x00FF00FF00FF00FF) << 8);\n\n        // swap 2-byte long pairs\n        v = ((v & 0xFFFF0000FFFF0000) >> 16) | ((v & 0x0000FFFF0000FFFF) << 16);\n\n        // swap 4-byte long pairs\n        v = (v >> 32) | (v << 32);\n    }\n\n    /**\n     * @notice Create a new stake or update an existing one.\n     * @dev At least `_initialBalancePerChunk*2^depth` number of tokens need to be preapproved for this contract.\n     * @param _owner Eth address used for overlay calculation.\n     * @param nonce Nonce that was used for overlay calculation.\n     * @param amount Deposited amount of ERC20 tokens.\n     */\n    function depositStake(address _owner, bytes32 nonce, uint256 amount) external whenNotPaused {\n        require(_owner == msg.sender, \"only owner can update stake\");\n\n        bytes32 overlay = keccak256(abi.encodePacked(_owner, reverse(NetworkId), nonce));\n\n        uint256 updatedAmount = amount;\n\n        if (stakes[overlay].isValue) {\n            require(overlayNotFrozen(overlay), \"overlay currently frozen\");\n            updatedAmount = amount + stakes[overlay].stakeAmount;\n        }\n\n        require(ERC20(bzzToken).transferFrom(msg.sender, address(this), amount), \"failed transfer\");\n\n        emit StakeUpdated(overlay, updatedAmount, _owner, block.number);\n\n        stakes[overlay] = Stake({\n            owner: _owner,\n            overlay: overlay,\n            stakeAmount: updatedAmount,\n            lastUpdatedBlockNumber: block.number,\n            isValue: true\n        });\n    }\n\n    /**\n     * @dev Withdraw stake only when the staking contract is paused,\n     * can only be called by the owner specific to the associated `overlay`\n     * @param overlay The overlay to withdraw from\n     * @param amount The amount of ERC20 tokens to be withdrawn\n     */\n    function withdrawFromStake(bytes32 overlay, uint256 amount) external whenPaused {\n        require(stakes[overlay].owner == msg.sender, \"only owner can withdraw stake\");\n        uint256 withDrawLimit = amount;\n        if (amount > stakes[overlay].stakeAmount) {\n            withDrawLimit = stakes[overlay].stakeAmount;\n        }\n\n        if (withDrawLimit < stakes[overlay].stakeAmount) {\n            stakes[overlay].stakeAmount -= withDrawLimit;\n            stakes[overlay].lastUpdatedBlockNumber = block.number;\n            require(ERC20(bzzToken).transfer(msg.sender, withDrawLimit), \"failed withdrawal\");\n        } else {\n            delete stakes[overlay];\n            require(ERC20(bzzToken).transfer(msg.sender, withDrawLimit), \"failed withdrawal\");\n        }\n    }\n\n    /**\n     * @dev Freeze an existing stake, can only be called by the redistributor\n     * @param overlay the overlay selected\n     * @param time penalty length in blocknumbers\n     */\n    function freezeDeposit(bytes32 overlay, uint256 time) external {\n        require(hasRole(REDISTRIBUTOR_ROLE, msg.sender), \"only redistributor can freeze stake\");\n\n        if (stakes[overlay].isValue) {\n            emit StakeFrozen(overlay, time);\n            stakes[overlay].lastUpdatedBlockNumber = block.number + time;\n        }\n    }\n\n    /**\n     * @dev Slash an existing stake, can only be called by the `redistributor`\n     * @param overlay the overlay selected\n     * @param amount the amount to be slashed\n     */\n    function slashDeposit(bytes32 overlay, uint256 amount) external {\n        require(hasRole(REDISTRIBUTOR_ROLE, msg.sender), \"only redistributor can slash stake\");\n        emit StakeSlashed(overlay, amount);\n        if (stakes[overlay].isValue) {\n            if (stakes[overlay].stakeAmount > amount) {\n                stakes[overlay].stakeAmount -= amount;\n                stakes[overlay].lastUpdatedBlockNumber = block.number;\n            } else {\n                delete stakes[overlay];\n            }\n        }\n    }\n\n    /**\n     * @dev Pause the contract. The contract is provably stopped by renouncing\n     the pauser role and the admin role after pausing, can only be called by the `PAUSER`\n     */\n    function pause() public {\n        require(hasRole(PAUSER_ROLE, msg.sender), \"only pauser can pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpause the contract, can only be called by the pauser when paused\n     */\n    function unPause() public {\n        require(hasRole(PAUSER_ROLE, msg.sender), \"only pauser can unpause\");\n        _unpause();\n    }\n}\n"
    },
    "src/TestToken.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\";\n\ncontract TestToken is ERC20PresetMinterPauser {\n    uint256 private _initialSupply;\n\n    constructor(string memory name, string memory symbol, uint256 initialSupply) ERC20PresetMinterPauser(name, symbol) {\n        _initialSupply = initialSupply;\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _mint(msg.sender, initialSupply);\n    }\n\n    // We use 16 decimals for BZZ/sBZZ token so we need to override it here\n    function decimals() public view virtual override returns (uint8) {\n        return 16;\n    }\n}\n"
    },
    "src/Util/ChunkProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nlibrary BMTChunk {\n    // max chunk payload size\n    uint256 public constant MAX_CHUNK_PAYLOAD_SIZE = 4096;\n    // segment byte size\n    uint256 public constant SEGMENT_SIZE = 32;\n\n    /**\n     * @notice          Changes the endianness of a uint64.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint64(uint64 _b) public pure returns (uint64) {\n        uint256 v = _b;\n\n        // swap bytes\n        v =\n            ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\n        // swap 2-byte long pairs\n        v =\n            ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\n        // swap 4-byte long pairs\n        v =\n            ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\n\n        return uint64(v);\n    }\n\n    /** Calculates the root hash from the provided inclusion proof segments and its corresponding segment index\n     * @param _proofSegments Proof segments.\n     * @param _proveSegment Segment to prove.\n     * @param _proveSegmentIndex Prove segment index\n     * @return _calculatedHash chunk hash\n     */\n    function rootHashFromInclusionProof(\n        bytes32[] memory _proofSegments,\n        bytes32 _proveSegment,\n        uint256 _proveSegmentIndex\n    ) internal pure returns (bytes32 _calculatedHash) {\n        _calculatedHash = _proveSegment;\n        for (uint256 i = 0; i < _proofSegments.length; i++) {\n            bool mergeFromRight = _proveSegmentIndex % 2 == 0;\n            _calculatedHash = mergeSegment(_calculatedHash, _proofSegments[i], mergeFromRight);\n            _proveSegmentIndex >>= 1;\n        }\n        return _calculatedHash;\n    }\n\n    /**\n     * Calculate the chunk address from the Binary Merkle Tree of the chunk data\n     *\n     * The BMT chunk address is the hash of the 8 byte span and the root\n     * hash of a binary Merkle tree (BMT) built on the 32-byte segments\n     * of the underlying data.\n     * @param _proofSegments Proof segments.\n     * @param _proveSegment Segment to prove.\n     * @param _proveSegmentIndex Prove segment index\n     * @param _chunkSpan chunk bytes length\n     * @return _chunkHash chunk hash\n     */\n    function chunkAddressFromInclusionProof(\n        bytes32[] memory _proofSegments,\n        bytes32 _proveSegment,\n        uint256 _proveSegmentIndex,\n        uint64 _chunkSpan\n    ) internal pure returns (bytes32) {\n        bytes32 rootHash = rootHashFromInclusionProof(_proofSegments, _proveSegment, _proveSegmentIndex);\n        return keccak256(abi.encodePacked(reverseUint64(_chunkSpan), rootHash));\n    }\n\n    function mergeSegment(\n        bytes32 _calculatedHash,\n        bytes32 _proofSegment,\n        bool mergeFromRight\n    ) internal pure returns (bytes32 res) {\n        if (mergeFromRight) {\n            res = keccak256(abi.encode(_calculatedHash, _proofSegment));\n        } else {\n            res = keccak256(abi.encode(_proofSegment, _calculatedHash));\n        }\n        return res;\n    }\n}\n"
    },
    "src/Util/Signatures.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nlibrary Signatures {\n    error InvalidSignatureLength();\n\n    /** Hash of the message to sign */\n    function getPostageMessageHash(\n        bytes32 _chunkAddr,\n        bytes32 _batchId,\n        uint64 _index,\n        uint64 _timeStamp\n    ) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_chunkAddr, _batchId, _index, _timeStamp));\n    }\n\n    function postageVerify(\n        address _signer, // signer Ethereum address to check against\n        bytes memory _signature,\n        bytes32 _chunkAddr,\n        bytes32 _postageId,\n        uint64 _index,\n        uint64 _timeStamp\n    ) internal pure returns (bool) {\n        bytes32 messageHash = getPostageMessageHash(_chunkAddr, _postageId, _index, _timeStamp);\n        bytes32 ethMessageHash = getEthSignedMessageHash(messageHash);\n\n        return recoverSigner(ethMessageHash, _signature) == _signer;\n    }\n\n    function getEthSignedMessageHash(bytes32 _messageHash) internal pure returns (bytes32) {\n        /*\n        Signature is produced by signing a keccak256 hash with the following format:\n        \"\\x19Ethereum Signed Message\\n\" + len(msg) + msg\n        */\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _messageHash));\n    }\n\n    function recoverSigner(\n        bytes32 _ethSignedMessageHash, // it has to be prefixed message: https://ethereum.stackexchange.com/questions/19582/does-ecrecover-in-solidity-expects-the-x19ethereum-signed-message-n-prefix/21037\n        bytes memory _signature\n    ) internal pure returns (address) {\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\n\n        return ecrecover(_ethSignedMessageHash, v, r, s);\n    }\n\n    function splitSignature(bytes memory sig) internal pure returns (bytes32 r_, bytes32 s_, uint8 v_) {\n        if (sig.length != 65) {\n            revert InvalidSignatureLength();\n        }\n\n        assembly {\n            /*\n            verbose explanation: https://ethereum.stackexchange.com/questions/135591/split-signature-function-in-solidity-by-example-docs\n            First 32 bytes stores the length of the signature\n            add(sig, 32) = pointer of sig + 32\n            effectively, skips first 32 bytes of signature\n            mload(p) loads next 32 bytes starting at the memory address p into memory\n            */\n\n            // first 32 bytes, after the length prefix\n            r_ := mload(add(sig, 32))\n            // second 32 bytes\n            s_ := mload(add(sig, 64))\n            // final byte (first byte of the next 32 bytes)\n            v_ := byte(0, mload(add(sig, 96)))\n        }\n\n        // implicitly return (r, s, v)\n    }\n\n    function getSocMessageHash(bytes32 _identifier, bytes32 _chunkAddr) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_identifier, _chunkAddr));\n    }\n\n    function socVerify(\n        address _signer, // signer Ethereum address to check against\n        bytes memory _signature,\n        bytes32 _identifier,\n        bytes32 _chunkAddr\n    ) internal pure returns (bool) {\n        bytes32 messageHash = getSocMessageHash(_identifier, _chunkAddr);\n        bytes32 ethMessageHash = getEthSignedMessageHash(messageHash);\n\n        return recoverSigner(ethMessageHash, _signature) == _signer;\n    }\n}\n"
    },
    "src/Util/TransformedChunkProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nlibrary TransformedBMTChunk {\n    // max chunk payload size\n    uint256 public constant MAX_CHUNK_PAYLOAD_SIZE = 4096;\n    // segment byte size\n    uint256 public constant SEGMENT_SIZE = 32;\n\n    /** Calculates the root hash from the provided inclusion proof segments and its corresponding segment index\n     * @param _proofSegments Proof segments.\n     * @param _proveSegment Segment to prove.\n     * @param _proveSegmentIndex Prove segment index\n     * @return _calculatedHash chunk hash\n     */\n    function transformedRootHashFromInclusionProof(\n        bytes32[] memory _proofSegments,\n        bytes32 _proveSegment,\n        uint256 _proveSegmentIndex,\n        bytes32 key\n    ) internal pure returns (bytes32 _calculatedHash) {\n        _calculatedHash = _proveSegment;\n        for (uint256 i = 0; i < _proofSegments.length; i++) {\n            bool mergeFromRight = _proveSegmentIndex % 2 == 0 ? true : false;\n            _calculatedHash = transformedMergeSegment(_calculatedHash, _proofSegments[i], mergeFromRight, key);\n            _proveSegmentIndex >>= 1;\n        }\n\n        return _calculatedHash;\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint64.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint64(uint64 _b) public pure returns (uint64) {\n        uint256 v = _b;\n\n        // swap bytes\n        v =\n            ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\n        // swap 2-byte long pairs\n        v =\n            ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\n        // swap 4-byte long pairs\n        v =\n            ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\n\n        return uint64(v);\n    }\n\n    /**\n     * Calculate the chunk address from the Binary Merkle Tree of the chunk data\n     *\n     * The BMT chunk address is the hash of the 8 byte span and the root\n     * hash of a binary Merkle tree (BMT) built on the 32-byte segments\n     * of the underlying data.\n     * @param _proofSegments Proof segments.\n     * @param _proveSegment Segment to prove.\n     * @param _proveSegmentIndex Prove segment index\n     * @param _chunkSpan chunk bytes length\n     * @return _chunkHash chunk hash\n     */\n    function transformedChunkAddressFromInclusionProof(\n        bytes32[] memory _proofSegments,\n        bytes32 _proveSegment,\n        uint256 _proveSegmentIndex,\n        uint64 _chunkSpan,\n        bytes32 key\n    ) internal pure returns (bytes32) {\n        bytes32 rootHash = transformedRootHashFromInclusionProof(\n            _proofSegments,\n            _proveSegment,\n            _proveSegmentIndex,\n            key\n        );\n        return keccak256(abi.encodePacked(key, reverseUint64(_chunkSpan), rootHash));\n    }\n\n    function transformedMergeSegment(\n        bytes32 _calculatedHash,\n        bytes32 _proofSegment,\n        bool mergeFromRight,\n        bytes32 key\n    ) internal pure returns (bytes32 res) {\n        if (mergeFromRight) {\n            res = keccak256(abi.encode(key, _calculatedHash, _proofSegment));\n        } else {\n            res = keccak256(abi.encode(key, _proofSegment, _calculatedHash));\n        }\n        return res;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}