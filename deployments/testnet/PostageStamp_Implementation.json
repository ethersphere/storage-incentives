{
  "address": "0xFE337DE44C84380E1CbA8a2B8F288d60e3914a35",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "batchId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "normalisedBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "depth",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "bucketDepth",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "immutableFlag",
          "type": "bool"
        }
      ],
      "name": "BatchCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "batchId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "newDepth",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "normalisedBalance",
          "type": "uint256"
        }
      ],
      "name": "BatchDepthIncrease",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "batchId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "topupAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "normalisedBalance",
          "type": "uint256"
        }
      ],
      "name": "BatchTopUp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "name": "PotWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "PriceUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_ORACLE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REDISTRIBUTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_batchId",
          "type": "bytes32"
        }
      ],
      "name": "batchBucketDepth",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_batchId",
          "type": "bytes32"
        }
      ],
      "name": "batchDepth",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_batchId",
          "type": "bytes32"
        }
      ],
      "name": "batchImmutableFlag",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_batchId",
          "type": "bytes32"
        }
      ],
      "name": "batchLastUpdatedBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_batchId",
          "type": "bytes32"
        }
      ],
      "name": "batchNormalisedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_batchId",
          "type": "bytes32"
        }
      ],
      "name": "batchOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "batches",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "depth",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "bucketDepth",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "immutableFlag",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "normalisedBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdatedBlockNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bzzToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_initialBalancePerChunk",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_depth",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_bucketDepth",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_batchId",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_immutable",
          "type": "bool"
        }
      ],
      "name": "copyBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_initialBalancePerChunk",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_depth",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_bucketDepth",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_immutable",
          "type": "bool"
        }
      ],
      "name": "createBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentTotalOutPayment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "expireLimited",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "expiredBatchesExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "firstBatchId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_batchId",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "_newDepth",
          "type": "uint8"
        }
      ],
      "name": "increaseDepth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "increment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bzzToken",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_minimumBucketDepth",
          "type": "uint8"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isBatchesTreeEmpty",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastExpiryBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdatedBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumBucketDepth",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumInitialBalancePerChunk",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumValidityBlocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_batchId",
          "type": "bytes32"
        }
      ],
      "name": "remainingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "setMinimumValidityBlocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "setPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_batchId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_topupAmountPerChunk",
          "type": "uint256"
        }
      ],
      "name": "topUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validChunkCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x55de339c83b9216db261f55548725ae911038f7e31b883fef66f4121ac30ce6f",
  "receipt": {
    "to": null,
    "from": "0xb1C7F17Ed88189Abf269Bf68A3B2Ed83C5276aAe",
    "contractAddress": "0xFE337DE44C84380E1CbA8a2B8F288d60e3914a35",
    "transactionIndex": 16,
    "gasUsed": "3894370",
    "logsBloom": "0x
    "blockHash": "0x3025e56736f41bf99b7e1e3d3198e941b7a7d36b07604f0fadd2f1439f9e88b8",
    "transactionHash": "0x55de339c83b9216db261f55548725ae911038f7e31b883fef66f4121ac30ce6f",
    "logs": [],
    "blockNumber": 8975817,
    "cumulativeGasUsed": "8977239",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "0b8428b7b21788ec0e6c55288d7fe507",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"normalisedBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"depth\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"bucketDepth\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"immutableFlag\",\"type\":\"bool\"}],\"name\":\"BatchCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newDepth\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"normalisedBalance\",\"type\":\"uint256\"}],\"name\":\"BatchDepthIncrease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"topupAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"normalisedBalance\",\"type\":\"uint256\"}],\"name\":\"BatchTopUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"PotWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_ORACLE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDISTRIBUTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"}],\"name\":\"batchBucketDepth\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"}],\"name\":\"batchDepth\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"}],\"name\":\"batchImmutableFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"}],\"name\":\"batchLastUpdatedBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"}],\"name\":\"batchNormalisedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"}],\"name\":\"batchOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"batches\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"depth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"bucketDepth\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"immutableFlag\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"normalisedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedBlockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bzzToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialBalancePerChunk\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_depth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_bucketDepth\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_immutable\",\"type\":\"bool\"}],\"name\":\"copyBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialBalancePerChunk\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_depth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_bucketDepth\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_immutable\",\"type\":\"bool\"}],\"name\":\"createBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTotalOutPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"expireLimited\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiredBatchesExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstBatchId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_newDepth\",\"type\":\"uint8\"}],\"name\":\"increaseDepth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bzzToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_minimumBucketDepth\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBatchesTreeEmpty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastExpiryBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdatedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumBucketDepth\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumInitialBalancePerChunk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumValidityBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"}],\"name\":\"remainingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMinimumValidityBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_topupAmountPerChunk\",\"type\":\"uint256\"}],\"name\":\"topUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validChunkCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"The Swarm Authors\",\"details\":\"The postage stamp contracts allows users to create and manage postage stamp batches. The current balance for each batch is stored ordered in descending order of normalised balance. Balance is normalised to be per chunk and the total spend since the contract was deployed, i.e. when a batch is bought, its per-chunk balance is supplemented with the current cost of storing one chunk since the beginning of time, as if the batch had existed since the contract's inception. During the _expiry_ process, each of these balances is checked against the _currentTotalOutPayment_, a similarly normalised figure that represents the current cost of storing one chunk since the beginning of time. A batch with a normalised balance less than _currentTotalOutPayment_ is treated as expired. The _currentTotalOutPayment_ is calculated using _totalOutPayment_ which is updated during _setPrice_ events so that the applicable per-chunk prices can be charged for the relevant periods of time. This can then be multiplied by the amount of chunks which are allowed to be stamped by each batch to get the actual cost of storage. The amount of chunks a batch can stamp is determined by the _bucketDepth_. A batch may store a maximum of 2^depth chunks. The global figure for the currently allowed chunks is tracked by _validChunkCount_ and updated during batch _expiry_ events.\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BatchCreated(bytes32,uint256,uint256,address,uint8,uint8,bool)\":{\"details\":\"Emitted when a new batch is created.\"},\"BatchDepthIncrease(bytes32,uint8,uint256)\":{\"details\":\"Emitted when the depth of an existing batch increases.\"},\"BatchTopUp(bytes32,uint256,uint256)\":{\"details\":\"Emitted when an existing batch is topped up.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"PriceUpdate(uint256)\":{\"details\":\"Emitted on every price update.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"copyBatch(address,uint256,uint8,uint8,bytes32,bool)\":{\"details\":\"At least `_initialBalancePerChunk*2^depth` tokens must be approved in the ERC20 token contract.\",\"params\":{\"_batchId\":\"BatchId being copied (from previous version contract data).\",\"_depth\":\"Initial depth of the new batch.\",\"_immutable\":\"Whether the batch is mutable.\",\"_initialBalancePerChunk\":\"Initial balance per chunk of the batch.\",\"_owner\":\"Owner of the new batch.\"}},\"createBatch(address,uint256,uint8,uint8,bytes32,bool)\":{\"details\":\"At least `_initialBalancePerChunk*2^depth` tokens must be approved in the ERC20 token contract.\",\"params\":{\"_depth\":\"Initial depth of the new batch.\",\"_immutable\":\"Whether the batch is mutable.\",\"_initialBalancePerChunk\":\"Initial balance per chunk.\",\"_nonce\":\"A random value used in the batch id derivation to allow multiple batches per owner.\",\"_owner\":\"Owner of the new batch.\"}},\"currentTotalOutPayment()\":{\"details\":\"Returns the total normalised all-time per chunk payout. Only Batches with a normalised balance greater than this are valid.\"},\"expireLimited(uint256)\":{\"details\":\"Can be used if reclaiming all expired batches would exceed the block gas limit, causing other contract method calls to fail.\",\"params\":{\"limit\":\"The maximum number of batches to expire.\"}},\"firstBatchId()\":{\"details\":\"If more than one batch id, return index at 0, if no batches, revert.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseDepth(bytes32,uint8)\":{\"details\":\"Can only be called by the owner of the batch.\",\"params\":{\"_batchId\":\"the id of an existing batch.\",\"_newDepth\":\"the new (larger than the previous one) depth for this batch.\"}},\"initialize(address,uint8)\":{\"params\":{\"_bzzToken\":\"The ERC20 token address to reference in this contract.\",\"_minimumBucketDepth\":\"The minimum bucket depth of batches that can be purchased.\"}},\"pause()\":{\"details\":\"Can only be called by the pauser when not paused. The contract can be provably stopped by renouncing the pauser role and the admin role once paused.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"remainingBalance(bytes32)\":{\"params\":{\"_batchId\":\"The id of an existing batch.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setPrice(uint256)\":{\"details\":\"Can only be called by the price oracle role.\",\"params\":{\"_price\":\"The new price.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"topUp(bytes32,uint256)\":{\"details\":\"At least `_topupAmountPerChunk*2^depth` tokens must be approved in the ERC20 token contract.\",\"params\":{\"_batchId\":\"The id of an existing batch.\",\"_topupAmountPerChunk\":\"The amount of additional tokens to add per chunk.\"}},\"unPause()\":{\"details\":\"Can only be called by the pauser role while paused.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"withdraw(address)\":{\"params\":{\"beneficiary\":\"Recieves the current total pot.\"}}},\"title\":\"PostageStamp contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"copyBatch(address,uint256,uint8,uint8,bytes32,bool)\":{\"notice\":\"Manually create a new batch when faciliatating migration, can only be called by the Admin role.\"},\"createBatch(address,uint256,uint8,uint8,bytes32,bool)\":{\"notice\":\"Create a new batch.\"},\"currentTotalOutPayment()\":{\"notice\":\"Total per-chunk cost since the contract's deployment.\"},\"expireLimited(uint256)\":{\"notice\":\"Reclaims a limited number of expired batches\"},\"expiredBatchesExist()\":{\"notice\":\"Indicates whether expired batches exist.\"},\"firstBatchId()\":{\"notice\":\"Get the first batch id ordered by ascending normalised balance.\"},\"increaseDepth(bytes32,uint8)\":{\"notice\":\"Increase the depth of an existing batch.\"},\"isBatchesTreeEmpty()\":{\"notice\":\"Return true if no batches exist\"},\"pause()\":{\"notice\":\"Pause the contract.\"},\"remainingBalance(bytes32)\":{\"notice\":\"Return the per chunk balance not yet used up.\"},\"setPrice(uint256)\":{\"notice\":\"Set a new price.\"},\"topUp(bytes32,uint256)\":{\"notice\":\"Top up an existing batch.\"},\"totalPot()\":{\"notice\":\"The current pot.\"},\"unPause()\":{\"notice\":\"Unpause the contract.\"},\"withdraw(address)\":{\"notice\":\"Withdraw the pot, authorised callers only.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/PostageStamp.sol\":\"PostageStamp\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.9._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0xb8d68221343ed784c7b76edb6a686cb65e49c476d9e22bb89a5c0c3947ff14db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x1599637b52d20dc3954cea44914b2a4a9a8a5caade58d9da947e0b6c9acc07ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/OrderStatisticsTree/HitchensOrderStatisticsTreeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/*\\nHitchens Order Statistics Tree v0.99\\n\\nA Solidity Red-Black Tree library to store and maintain a sorted data\\nstructure in a Red-Black binary search tree, with O(log 2n) insert, remove\\nand search time (and gas, approximately)\\n\\nhttps://github.com/rob-Hitchens/OrderStatisticsTree\\n\\nCopyright (c) Rob Hitchens. the MIT License\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n\\nSignificant portions from BokkyPooBahsRedBlackTreeLibrary,\\nhttps://github.com/bokkypoobah/BokkyPooBahsRedBlackTreeLibrary\\n\\nTHIS SOFTWARE IS NOT TESTED OR AUDITED. DO NOT USE FOR PRODUCTION.\\n*/\\n\\nlibrary HitchensOrderStatisticsTreeLib {\\n    uint private constant EMPTY = 0;\\n    struct Node {\\n        uint parent;\\n        uint left;\\n        uint right;\\n        bool red;\\n        bytes32[] keys;\\n        mapping(bytes32 => uint) keyMap;\\n        uint count;\\n    }\\n    struct Tree {\\n        uint root;\\n        mapping(uint => Node) nodes;\\n    }\\n\\n    function first(Tree storage self) internal view returns (uint _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].left != EMPTY) {\\n            _value = self.nodes[_value].left;\\n        }\\n    }\\n\\n    function exists(Tree storage self, uint value) internal view returns (bool _exists) {\\n        if (value == EMPTY) return false;\\n        if (value == self.root) return true;\\n        if (self.nodes[value].parent != EMPTY) return true;\\n        return false;\\n    }\\n\\n    function keyExists(Tree storage self, bytes32 key, uint value) internal view returns (bool _exists) {\\n        if (!exists(self, value)) return false;\\n        return self.nodes[value].keys[self.nodes[value].keyMap[key]] == key;\\n    }\\n\\n    function getNode(\\n        Tree storage self,\\n        uint value\\n    ) internal view returns (uint _parent, uint _left, uint _right, bool _red, uint keyCount, uint __count) {\\n        require(exists(self, value), \\\"OrderStatisticsTree(403) - Value does not exist.\\\");\\n        Node storage gn = self.nodes[value];\\n        return (gn.parent, gn.left, gn.right, gn.red, gn.keys.length, gn.keys.length + gn.count);\\n    }\\n\\n    function getNodeCount(Tree storage self, uint value) internal view returns (uint __count) {\\n        Node storage gn = self.nodes[value];\\n        return gn.keys.length + gn.count;\\n    }\\n\\n    function valueKeyAtIndex(Tree storage self, uint value, uint index) internal view returns (bytes32 _key) {\\n        require(exists(self, value), \\\"OrderStatisticsTree(404) - Value does not exist.\\\");\\n        return self.nodes[value].keys[index];\\n    }\\n\\n    function count(Tree storage self) internal view returns (uint _count) {\\n        return getNodeCount(self, self.root);\\n    }\\n\\n    /* We don't use this functionality, so it is commented out to make audit easier\\n\\n    function percentile(Tree storage self, uint value) internal view returns(uint _percentile) {\\n        uint denominator = count(self);\\n        uint numerator = rank(self, value);\\n        _percentile = ((uint(1000) * numerator)/denominator+(uint(5)))/uint(10);\\n    }\\n    function permil(Tree storage self, uint value) internal view returns(uint _permil) {\\n        uint denominator = count(self);\\n        uint numerator = rank(self, value);\\n        _permil = ((uint(10000) * numerator)/denominator+(uint(5)))/uint(10);\\n    }\\n    function atPercentile(Tree storage self, uint _percentile) internal view returns(uint _value) {\\n        uint findRank = (((_percentile * count(self))/uint(10)) + uint(5)) / uint(10);\\n        return atRank(self,findRank);\\n    }\\n    function atPermil(Tree storage self, uint _permil) internal view returns(uint _value) {\\n        uint findRank = (((_permil * count(self))/uint(100)) + uint(5)) / uint(10);\\n        return atRank(self,findRank);\\n    }\\n    function median(Tree storage self) internal view returns(uint value) {\\n        return atPercentile(self,50);\\n    }\\n    function below(Tree storage self, uint value) public view returns(uint _below) {\\n        if(count(self) > 0 && value > 0) _below = rank(self,value)-uint(1);\\n    }\\n    function above(Tree storage self, uint value) public view returns(uint _above) {\\n        if(count(self) > 0) _above = count(self)-rank(self,value);\\n    }\\n    function valueBelowEstimate(Tree storage self, uint estimate) public view returns(uint _below) {\\n        if(count(self) > 0 && estimate > 0) {\\n            uint  highestValue = last(self);\\n            uint  lowestValue = first(self);\\n            if(estimate < lowestValue) {\\n                return 0;\\n            }\\n            if(estimate >= highestValue) {\\n                return highestValue;\\n            }\\n            uint  rankOfValue = rank(self, estimate); // approximation\\n            _below = atRank(self, rankOfValue);\\n            if(_below > estimate) { // fix error in approximation\\n                rankOfValue--;\\n                _below = atRank(self, rankOfValue);\\n            }\\n        }\\n    }\\n    function valueAboveEstimate(Tree storage self, uint estimate) public view returns(uint _above) {\\n        if(count(self) > 0 && estimate > 0) {\\n            uint  highestValue = last(self);\\n            uint  lowestValue = first(self);\\n            if(estimate > highestValue) {\\n                return 0;\\n            }\\n            if(estimate <= lowestValue) {\\n                return lowestValue;\\n            }\\n            uint  rankOfValue = rank(self, estimate); // approximation\\n            _above = atRank(self, rankOfValue);\\n            if(_above < estimate) { // fix error in approximation\\n                rankOfValue++;\\n                _above = atRank(self, rankOfValue);\\n            }\\n        }\\n    }\\n    function rank(Tree storage self, uint value) internal view returns(uint _rank) {\\n        if(count(self) > 0) {\\n            bool finished;\\n            uint cursor = self.root;\\n            Node storage c = self.nodes[cursor];\\n            uint smaller = getNodeCount(self,c.left);\\n            while (!finished) {\\n                uint keyCount = c.keys.length;\\n                if(cursor == value) {\\n                    finished = true;\\n                } else {\\n                    if(cursor < value) {\\n                        cursor = c.right;\\n                        c = self.nodes[cursor];\\n                        smaller += keyCount + getNodeCount(self,c.left);\\n                    } else {\\n                        cursor = c.left;\\n                        c = self.nodes[cursor];\\n                        smaller -= (keyCount + getNodeCount(self,c.right));\\n                    }\\n                }\\n                if (!exists(self,cursor)) {\\n                    finished = true;\\n                }\\n            }\\n            return smaller + 1;\\n        }\\n    }\\n    function atRank(Tree storage self, uint _rank) internal view returns(uint _value) {\\n        bool finished;\\n        uint cursor = self.root;\\n        Node storage c = self.nodes[cursor];\\n        uint smaller = getNodeCount(self,c.left);\\n        while (!finished) {\\n            _value = cursor;\\n            c = self.nodes[cursor];\\n            uint keyCount = c.keys.length;\\n            if(smaller + 1 >= _rank && smaller + keyCount <= _rank) {\\n                _value = cursor;\\n                finished = true;\\n            } else {\\n                if(smaller + keyCount <= _rank) {\\n                    cursor = c.right;\\n                    c = self.nodes[cursor];\\n                    smaller += keyCount + getNodeCount(self,c.left);\\n                } else {\\n                    cursor = c.left;\\n                    c = self.nodes[cursor];\\n                    smaller -= (keyCount + getNodeCount(self,c.right));\\n                }\\n            }\\n            if (!exists(self,cursor)) {\\n                finished = true;\\n            }\\n        }\\n    }\\n*/\\n\\n    function insert(Tree storage self, bytes32 key, uint value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(405) - Value to insert cannot be zero\\\");\\n        require(\\n            !keyExists(self, key, value),\\n            \\\"OrderStatisticsTree(406) - Value and Key pair exists. Cannot be inserted again.\\\"\\n        );\\n        uint cursor;\\n        uint probe = self.root;\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (value < probe) {\\n                probe = self.nodes[probe].left;\\n            } else if (value > probe) {\\n                probe = self.nodes[probe].right;\\n            } else if (value == probe) {\\n                self.nodes[probe].keys.push(key);\\n                self.nodes[probe].keyMap[key] = self.nodes[probe].keys.length - uint(1);\\n                return;\\n            }\\n            self.nodes[cursor].count++;\\n        }\\n        Node storage nValue = self.nodes[value];\\n        nValue.parent = cursor;\\n        nValue.left = EMPTY;\\n        nValue.right = EMPTY;\\n        nValue.red = true;\\n        nValue.keys.push(key);\\n        nValue.keyMap[key] = nValue.keys.length - uint(1);\\n        if (cursor == EMPTY) {\\n            self.root = value;\\n        } else if (value < cursor) {\\n            self.nodes[cursor].left = value;\\n        } else {\\n            self.nodes[cursor].right = value;\\n        }\\n        insertFixup(self, value);\\n    }\\n\\n    function remove(Tree storage self, bytes32 key, uint value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(407) - Value to delete cannot be zero\\\");\\n        require(keyExists(self, key, value), \\\"OrderStatisticsTree(408) - Value to delete does not exist.\\\");\\n        Node storage nValue = self.nodes[value];\\n        uint rowToDelete = nValue.keyMap[key];\\n        bytes32 last = nValue.keys[nValue.keys.length - uint(1)];\\n        nValue.keys[rowToDelete] = last;\\n        nValue.keyMap[last] = rowToDelete;\\n        nValue.keys.pop();\\n        uint probe;\\n        uint cursor;\\n        if (nValue.keys.length == 0) {\\n            if (self.nodes[value].left == EMPTY || self.nodes[value].right == EMPTY) {\\n                cursor = value;\\n            } else {\\n                cursor = self.nodes[value].right;\\n                while (self.nodes[cursor].left != EMPTY) {\\n                    cursor = self.nodes[cursor].left;\\n                }\\n            }\\n            if (self.nodes[cursor].left != EMPTY) {\\n                probe = self.nodes[cursor].left;\\n            } else {\\n                probe = self.nodes[cursor].right;\\n            }\\n            uint cursorParent = self.nodes[cursor].parent;\\n            self.nodes[probe].parent = cursorParent;\\n            if (cursorParent != EMPTY) {\\n                if (cursor == self.nodes[cursorParent].left) {\\n                    self.nodes[cursorParent].left = probe;\\n                } else {\\n                    self.nodes[cursorParent].right = probe;\\n                }\\n            } else {\\n                self.root = probe;\\n            }\\n            bool doFixup = !self.nodes[cursor].red;\\n            if (cursor != value) {\\n                replaceParent(self, cursor, value);\\n                self.nodes[cursor].left = self.nodes[value].left;\\n                self.nodes[self.nodes[cursor].left].parent = cursor;\\n                self.nodes[cursor].right = self.nodes[value].right;\\n                self.nodes[self.nodes[cursor].right].parent = cursor;\\n                self.nodes[cursor].red = self.nodes[value].red;\\n                (cursor, value) = (value, cursor);\\n                fixCountRecurse(self, value);\\n            }\\n            if (doFixup) {\\n                removeFixup(self, probe);\\n            }\\n            fixCountRecurse(self, cursorParent);\\n            delete self.nodes[cursor];\\n        }\\n    }\\n\\n    function fixCountRecurse(Tree storage self, uint value) private {\\n        while (value != EMPTY) {\\n            self.nodes[value].count =\\n                getNodeCount(self, self.nodes[value].left) +\\n                getNodeCount(self, self.nodes[value].right);\\n            value = self.nodes[value].parent;\\n        }\\n    }\\n\\n    function treeMinimum(Tree storage self, uint value) private view returns (uint) {\\n        while (self.nodes[value].left != EMPTY) {\\n            value = self.nodes[value].left;\\n        }\\n        return value;\\n    }\\n\\n    function treeMaximum(Tree storage self, uint value) private view returns (uint) {\\n        while (self.nodes[value].right != EMPTY) {\\n            value = self.nodes[value].right;\\n        }\\n        return value;\\n    }\\n\\n    function rotateLeft(Tree storage self, uint value) private {\\n        uint cursor = self.nodes[value].right;\\n        uint parent = self.nodes[value].parent;\\n        uint cursorLeft = self.nodes[cursor].left;\\n        self.nodes[value].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].left) {\\n            self.nodes[parent].left = cursor;\\n        } else {\\n            self.nodes[parent].right = cursor;\\n        }\\n        self.nodes[cursor].left = value;\\n        self.nodes[value].parent = cursor;\\n        self.nodes[value].count =\\n            getNodeCount(self, self.nodes[value].left) +\\n            getNodeCount(self, self.nodes[value].right);\\n        self.nodes[cursor].count =\\n            getNodeCount(self, self.nodes[cursor].left) +\\n            getNodeCount(self, self.nodes[cursor].right);\\n    }\\n\\n    function rotateRight(Tree storage self, uint value) private {\\n        uint cursor = self.nodes[value].left;\\n        uint parent = self.nodes[value].parent;\\n        uint cursorRight = self.nodes[cursor].right;\\n        self.nodes[value].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].right) {\\n            self.nodes[parent].right = cursor;\\n        } else {\\n            self.nodes[parent].left = cursor;\\n        }\\n        self.nodes[cursor].right = value;\\n        self.nodes[value].parent = cursor;\\n        self.nodes[value].count =\\n            getNodeCount(self, self.nodes[value].left) +\\n            getNodeCount(self, self.nodes[value].right);\\n        self.nodes[cursor].count =\\n            getNodeCount(self, self.nodes[cursor].left) +\\n            getNodeCount(self, self.nodes[cursor].right);\\n    }\\n\\n    function insertFixup(Tree storage self, uint value) private {\\n        uint cursor;\\n        while (value != self.root && self.nodes[self.nodes[value].parent].red) {\\n            uint valueParent = self.nodes[value].parent;\\n            if (valueParent == self.nodes[self.nodes[valueParent].parent].left) {\\n                cursor = self.nodes[self.nodes[valueParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].right) {\\n                        value = valueParent;\\n                        rotateLeft(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateRight(self, self.nodes[valueParent].parent);\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[valueParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].left) {\\n                        value = valueParent;\\n                        rotateRight(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateLeft(self, self.nodes[valueParent].parent);\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(Tree storage self, uint a, uint b) private {\\n        uint bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(Tree storage self, uint value) private {\\n        uint cursor;\\n        while (value != self.root && !self.nodes[value].red) {\\n            uint valueParent = self.nodes[value].parent;\\n            if (value == self.nodes[valueParent].left) {\\n                cursor = self.nodes[valueParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateLeft(self, valueParent);\\n                    cursor = self.nodes[valueParent].right;\\n                }\\n                if (!self.nodes[self.nodes[cursor].left].red && !self.nodes[self.nodes[cursor].right].red) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor);\\n                        cursor = self.nodes[valueParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, valueParent);\\n                    value = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[valueParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateRight(self, valueParent);\\n                    cursor = self.nodes[valueParent].left;\\n                }\\n                if (!self.nodes[self.nodes[cursor].right].red && !self.nodes[self.nodes[cursor].left].red) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor);\\n                        cursor = self.nodes[valueParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, valueParent);\\n                    value = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[value].red = false;\\n    }\\n}\\n\",\"keccak256\":\"0x5440bafe35ec9284096bee26dd4b739c1d0f88ac56757b2572006659cc0c0910\",\"license\":\"MIT\"},\"src/PostageStamp.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.18;\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"./OrderStatisticsTree/HitchensOrderStatisticsTreeLib.sol\\\";\\n\\n/**\\n * @title PostageStamp contract\\n * @author The Swarm Authors\\n * @dev The postage stamp contracts allows users to create and manage postage stamp batches.\\n * The current balance for each batch is stored ordered in descending order of normalised balance.\\n * Balance is normalised to be per chunk and the total spend since the contract was deployed, i.e. when a batch\\n * is bought, its per-chunk balance is supplemented with the current cost of storing one chunk since the beginning of time,\\n * as if the batch had existed since the contract's inception. During the _expiry_ process, each of these balances is\\n * checked against the _currentTotalOutPayment_, a similarly normalised figure that represents the current cost of\\n * storing one chunk since the beginning of time. A batch with a normalised balance less than _currentTotalOutPayment_\\n * is treated as expired.\\n *\\n * The _currentTotalOutPayment_ is calculated using _totalOutPayment_ which is updated during _setPrice_ events so\\n * that the applicable per-chunk prices can be charged for the relevant periods of time. This can then be multiplied\\n * by the amount of chunks which are allowed to be stamped by each batch to get the actual cost of storage.\\n *\\n * The amount of chunks a batch can stamp is determined by the _bucketDepth_. A batch may store a maximum of 2^depth chunks.\\n * The global figure for the currently allowed chunks is tracked by _validChunkCount_ and updated during batch _expiry_ events.\\n */\\n\\ncontract PostageStamp is Initializable, UUPSUpgradeable, AccessControlUpgradeable, PausableUpgradeable {\\n    using HitchensOrderStatisticsTreeLib for HitchensOrderStatisticsTreeLib.Tree;\\n\\n    /**\\n     * @dev Emitted when a new batch is created.\\n     */\\n    event BatchCreated(\\n        bytes32 indexed batchId,\\n        uint256 totalAmount,\\n        uint256 normalisedBalance,\\n        address owner,\\n        uint8 depth,\\n        uint8 bucketDepth,\\n        bool immutableFlag\\n    );\\n\\n    event PotWithdrawn(address recipient, uint256 totalAmount);\\n\\n    /**\\n     * @dev Emitted when an existing batch is topped up.\\n     */\\n    event BatchTopUp(bytes32 indexed batchId, uint256 topupAmount, uint256 normalisedBalance);\\n\\n    /**\\n     * @dev Emitted when the depth of an existing batch increases.\\n     */\\n    event BatchDepthIncrease(bytes32 indexed batchId, uint8 newDepth, uint256 normalisedBalance);\\n\\n    /**\\n     *@dev Emitted on every price update.\\n     */\\n    event PriceUpdate(uint256 price);\\n\\n    struct Batch {\\n        // Owner of this batch (0 if not valid).\\n        address owner;\\n        // Current depth of this batch.\\n        uint8 depth;\\n        //\\n        uint8 bucketDepth;\\n        // Whether this batch is immutable.\\n        bool immutableFlag;\\n        // Normalised balance per chunk.\\n        uint256 normalisedBalance;\\n        //\\n        uint256 lastUpdatedBlockNumber;\\n    }\\n\\n    // Role allowed to increase totalOutPayment.\\n    bytes32 public constant PRICE_ORACLE_ROLE = keccak256(\\\"PRICE_ORACLE\\\");\\n    // Role allowed to pause\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    // Role allowed to withdraw the pot.\\n    bytes32 public constant REDISTRIBUTOR_ROLE = keccak256(\\\"REDISTRIBUTOR_ROLE\\\");\\n\\n    // Associate every batch id with batch data.\\n    mapping(bytes32 => Batch) public batches;\\n    // Store every batch id ordered by normalisedBalance.\\n    HitchensOrderStatisticsTreeLib.Tree tree;\\n\\n    // Address of the ERC20 token this contract references.\\n    address public bzzToken;\\n\\n    // Total out payment per chunk, at the blockheight of the last price change.\\n    uint256 private totalOutPayment;\\n\\n    // Minimum allowed depth of bucket.\\n    uint8 public minimumBucketDepth;\\n\\n    // Combined global chunk capacity of valid batches remaining at the blockheight expire() was last called.\\n    uint256 public validChunkCount;\\n\\n    // Lottery pot at last update.\\n    uint256 public pot;\\n    // blocks in 24 hours ~ 24 * 60 * 60 / 5 = 17280\\n    uint256 public minimumValidityBlocks;\\n    // Price from the last update.\\n    uint256 public lastPrice;\\n    // Block at which the last update occured.\\n    uint256 public lastUpdatedBlock;\\n    // Normalised balance at the blockheight expire() was last called.\\n    uint256 public lastExpiryBalance;\\n\\n    /**\\n     * @param _bzzToken The ERC20 token address to reference in this contract.\\n     * @param _minimumBucketDepth The minimum bucket depth of batches that can be purchased.\\n     */\\n\\n    // @dev no constructor in upgradable contracts. Instead we have initializers\\n\\n    function initialize(address _bzzToken, uint8 _minimumBucketDepth) public initializer {\\n        bzzToken = _bzzToken;\\n        minimumBucketDepth = _minimumBucketDepth;\\n        // Need to set default values here as state is in proxy\\n        minimumValidityBlocks = 11280;\\n        lastPrice = 0;\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(PAUSER_ROLE, msg.sender);\\n\\n        ///@dev as there is no constructor, we need to initialise the OwnableUpgradeable explicitly\\n        __AccessControl_init();\\n        __Pausable_init();\\n    }\\n\\n    function increment() public {\\n        minimumValidityBlocks++;\\n    }\\n\\n    ///@dev required by the OZ UUPS module\\n    function _authorizeUpgrade(address) internal override onlyRole(DEFAULT_ADMIN_ROLE) {}\\n\\n    function _msgSender() internal view override(ContextUpgradeable) returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view override(ContextUpgradeable) returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @notice Create a new batch.\\n     * @dev At least `_initialBalancePerChunk*2^depth` tokens must be approved in the ERC20 token contract.\\n     * @param _owner Owner of the new batch.\\n     * @param _initialBalancePerChunk Initial balance per chunk.\\n     * @param _depth Initial depth of the new batch.\\n     * @param _nonce A random value used in the batch id derivation to allow multiple batches per owner.\\n     * @param _immutable Whether the batch is mutable.\\n     */\\n    function createBatch(\\n        address _owner,\\n        uint256 _initialBalancePerChunk,\\n        uint8 _depth,\\n        uint8 _bucketDepth,\\n        bytes32 _nonce,\\n        bool _immutable\\n    ) external whenNotPaused {\\n        require(_owner != address(0), \\\"owner cannot be the zero address\\\");\\n        // bucket depth should be non-zero and smaller than the depth\\n        require(\\n            _bucketDepth != 0 && minimumBucketDepth <= _bucketDepth && _bucketDepth < _depth,\\n            \\\"invalid bucket depth\\\"\\n        );\\n        // derive batchId from msg.sender to ensure another party cannot use the same batch id and frontrun us.\\n        bytes32 batchId = keccak256(abi.encode(msg.sender, _nonce));\\n        require(batches[batchId].owner == address(0), \\\"batch already exists\\\");\\n        require(\\n            _initialBalancePerChunk >= minimumInitialBalancePerChunk(),\\n            \\\"insufficient initial balance for 24h minimum validity\\\"\\n        );\\n        // per chunk balance multiplied by the batch size in chunks must be transferred from the sender\\n        uint256 totalAmount = _initialBalancePerChunk * (1 << _depth);\\n        require(ERC20(bzzToken).transferFrom(msg.sender, address(this), totalAmount), \\\"failed transfer\\\");\\n\\n        // normalisedBalance is an absolute value per chunk, as if the batch had existed\\n        // since the block the contract was deployed, so we must supplement this batch's\\n        // _initialBalancePerChunk with the currentTotalOutPayment()\\n        uint256 normalisedBalance = currentTotalOutPayment() + (_initialBalancePerChunk);\\n\\n        //update validChunkCount to remove currently expired batches\\n        expireLimited(type(uint256).max);\\n\\n        //then add the chunks this batch will contribute\\n        validChunkCount += 1 << _depth;\\n\\n        batches[batchId] = Batch({\\n            owner: _owner,\\n            depth: _depth,\\n            bucketDepth: _bucketDepth,\\n            immutableFlag: _immutable,\\n            normalisedBalance: normalisedBalance,\\n            lastUpdatedBlockNumber: block.number\\n        });\\n\\n        require(normalisedBalance > 0, \\\"normalisedBalance cannot be zero\\\");\\n\\n        // insert into the ordered tree\\n        tree.insert(batchId, normalisedBalance);\\n\\n        emit BatchCreated(batchId, totalAmount, normalisedBalance, _owner, _depth, _bucketDepth, _immutable);\\n    }\\n\\n    /**\\n     * @notice Manually create a new batch when faciliatating migration, can only be called by the Admin role.\\n     * @dev At least `_initialBalancePerChunk*2^depth` tokens must be approved in the ERC20 token contract.\\n     * @param _owner Owner of the new batch.\\n     * @param _initialBalancePerChunk Initial balance per chunk of the batch.\\n     * @param _depth Initial depth of the new batch.\\n     * @param _batchId BatchId being copied (from previous version contract data).\\n     * @param _immutable Whether the batch is mutable.\\n     */\\n    function copyBatch(\\n        address _owner,\\n        uint256 _initialBalancePerChunk,\\n        uint8 _depth,\\n        uint8 _bucketDepth,\\n        bytes32 _batchId,\\n        bool _immutable\\n    ) external whenNotPaused {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"only administrator can use copy method\\\");\\n        require(_owner != address(0), \\\"owner cannot be the zero address\\\");\\n        require(_bucketDepth != 0 && _bucketDepth < _depth, \\\"invalid bucket depth\\\");\\n        require(batches[_batchId].owner == address(0), \\\"batch already exists\\\");\\n\\n        // per chunk balance multiplied by the batch size in chunks must be transferred from the sender\\n        uint256 totalAmount = _initialBalancePerChunk * (1 << _depth);\\n        require(ERC20(bzzToken).transferFrom(msg.sender, address(this), totalAmount), \\\"failed transfer\\\");\\n\\n        uint256 normalisedBalance = currentTotalOutPayment() + (_initialBalancePerChunk);\\n\\n        validChunkCount += 1 << _depth;\\n\\n        batches[_batchId] = Batch({\\n            owner: _owner,\\n            depth: _depth,\\n            bucketDepth: _bucketDepth,\\n            immutableFlag: _immutable,\\n            normalisedBalance: normalisedBalance,\\n            lastUpdatedBlockNumber: block.number\\n        });\\n\\n        require(normalisedBalance > 0, \\\"normalisedBalance cannot be zero\\\");\\n\\n        tree.insert(_batchId, normalisedBalance);\\n\\n        emit BatchCreated(_batchId, totalAmount, normalisedBalance, _owner, _depth, _bucketDepth, _immutable);\\n    }\\n\\n    /**\\n     * @notice Top up an existing batch.\\n     * @dev At least `_topupAmountPerChunk*2^depth` tokens must be approved in the ERC20 token contract.\\n     * @param _batchId The id of an existing batch.\\n     * @param _topupAmountPerChunk The amount of additional tokens to add per chunk.\\n     */\\n    function topUp(bytes32 _batchId, uint256 _topupAmountPerChunk) external whenNotPaused {\\n        Batch storage batch = batches[_batchId];\\n        require(batch.owner != address(0), \\\"batch does not exist or has expired\\\");\\n        require(batch.normalisedBalance > currentTotalOutPayment(), \\\"batch already expired\\\");\\n        require(batch.depth > minimumBucketDepth, \\\"batch too small to renew\\\");\\n        require(\\n            remainingBalance(_batchId) + (_topupAmountPerChunk) >= minimumInitialBalancePerChunk(),\\n            \\\"insufficient topped up balance for 24h minimum validity\\\"\\n        );\\n\\n        // per chunk balance multiplied by the batch size in chunks must be transferred from the sender\\n        uint256 totalAmount = _topupAmountPerChunk * (1 << batch.depth);\\n        require(ERC20(bzzToken).transferFrom(msg.sender, address(this), totalAmount), \\\"failed transfer\\\");\\n        // update by removing batch and then reinserting\\n        tree.remove(_batchId, batch.normalisedBalance);\\n        batch.normalisedBalance = batch.normalisedBalance + (_topupAmountPerChunk);\\n        tree.insert(_batchId, batch.normalisedBalance);\\n\\n        emit BatchTopUp(_batchId, totalAmount, batch.normalisedBalance);\\n    }\\n\\n    /**\\n     * @notice Increase the depth of an existing batch.\\n     * @dev Can only be called by the owner of the batch.\\n     * @param _batchId the id of an existing batch.\\n     * @param _newDepth the new (larger than the previous one) depth for this batch.\\n     */\\n    function increaseDepth(bytes32 _batchId, uint8 _newDepth) external whenNotPaused {\\n        Batch storage batch = batches[_batchId];\\n\\n        require(batch.owner == msg.sender, \\\"not batch owner\\\");\\n        require(minimumBucketDepth < _newDepth && batch.depth < _newDepth, \\\"depth not increasing\\\");\\n        require(!batch.immutableFlag, \\\"batch is immutable\\\");\\n        require(batch.normalisedBalance > currentTotalOutPayment(), \\\"batch already expired\\\");\\n\\n        uint8 depthChange = _newDepth - batch.depth;\\n        // divide by the change in batch size (2^depthChange)\\n        uint256 newRemainingBalance = remainingBalance(_batchId) / (1 << depthChange);\\n\\n        require(\\n            newRemainingBalance >= minimumInitialBalancePerChunk(),\\n            \\\"remaining balance after depth increase wouldn't meet 24h minimum validity\\\"\\n        );\\n        // expire batches up to current block before amending validChunkCount to include\\n        // the new chunks resultant of the depth increase\\n        expireLimited(type(uint256).max);\\n        validChunkCount += (1 << _newDepth) - (1 << batch.depth);\\n\\n        // update by removing batch and then reinserting\\n        tree.remove(_batchId, batch.normalisedBalance);\\n        batch.depth = _newDepth;\\n        batch.lastUpdatedBlockNumber = block.number;\\n\\n        batch.normalisedBalance = currentTotalOutPayment() + (newRemainingBalance);\\n        tree.insert(_batchId, batch.normalisedBalance);\\n\\n        emit BatchDepthIncrease(_batchId, _newDepth, batch.normalisedBalance);\\n    }\\n\\n    /**\\n     * @notice Return the per chunk balance not yet used up.\\n     * @param _batchId The id of an existing batch.\\n     */\\n    function remainingBalance(bytes32 _batchId) public view returns (uint256) {\\n        Batch storage batch = batches[_batchId];\\n        require(batch.owner != address(0), \\\"batch does not exist or expired\\\");\\n        if (batch.normalisedBalance <= currentTotalOutPayment()) {\\n            return 0;\\n        }\\n        return batch.normalisedBalance - currentTotalOutPayment();\\n    }\\n\\n    /**\\n     * @notice Set a new price.\\n     * @dev Can only be called by the price oracle role.\\n     * @param _price The new price.\\n     */\\n    function setPrice(uint256 _price) external {\\n        require(hasRole(PRICE_ORACLE_ROLE, msg.sender), \\\"only price oracle can set the price\\\");\\n\\n        // if there was a last price, add the outpayment since the last update\\n        // using the last price to _totalOutPayment_. if there was not a lastPrice,\\n        // the lastprice must have been zero.\\n        if (lastPrice != 0) {\\n            totalOutPayment = currentTotalOutPayment();\\n        }\\n\\n        lastPrice = _price;\\n        lastUpdatedBlock = block.number;\\n\\n        emit PriceUpdate(_price);\\n    }\\n\\n    function setMinimumValidityBlocks(uint256 _value) external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"only administrator can set minimum validity blocks\\\");\\n        minimumValidityBlocks = _value;\\n    }\\n\\n    /**\\n     * @notice Total per-chunk cost since the contract's deployment.\\n     * @dev Returns the total normalised all-time per chunk payout.\\n     * Only Batches with a normalised balance greater than this are valid.\\n     */\\n    function currentTotalOutPayment() public view returns (uint256) {\\n        uint256 blocks = block.number - lastUpdatedBlock;\\n        uint256 increaseSinceLastUpdate = lastPrice * (blocks);\\n        return totalOutPayment + (increaseSinceLastUpdate);\\n    }\\n\\n    function minimumInitialBalancePerChunk() public view returns (uint256) {\\n        return minimumValidityBlocks * lastPrice;\\n    }\\n\\n    /**\\n     * @notice Pause the contract.\\n     * @dev Can only be called by the pauser when not paused.\\n     * The contract can be provably stopped by renouncing the pauser role and the admin role once paused.\\n     */\\n    function pause() public {\\n        require(hasRole(PAUSER_ROLE, msg.sender), \\\"only pauser can pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpause the contract.\\n     * @dev Can only be called by the pauser role while paused.\\n     */\\n    function unPause() public {\\n        require(hasRole(PAUSER_ROLE, msg.sender), \\\"only pauser can unpause\\\");\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Return true if no batches exist\\n     */\\n    function isBatchesTreeEmpty() public view returns (bool) {\\n        return tree.count() == 0;\\n    }\\n\\n    /**\\n     * @notice Get the first batch id ordered by ascending normalised balance.\\n     * @dev If more than one batch id, return index at 0, if no batches, revert.\\n     */\\n    function firstBatchId() public view returns (bytes32) {\\n        uint256 val = tree.first();\\n        require(val > 0, \\\"no batches exist\\\");\\n        return tree.valueKeyAtIndex(val, 0);\\n    }\\n\\n    /**\\n     * @notice Reclaims a limited number of expired batches\\n     * @dev Can be used if reclaiming all expired batches would exceed the block gas limit, causing other\\n     * contract method calls to fail.\\n     * @param limit The maximum number of batches to expire.\\n     */\\n    function expireLimited(uint256 limit) public {\\n        // the lower bound of the normalised balance for which we will check if batches have expired\\n        uint256 leb = lastExpiryBalance;\\n        uint256 i;\\n        for (i = 0; i < limit; i++) {\\n            if (isBatchesTreeEmpty()) {\\n                lastExpiryBalance = currentTotalOutPayment();\\n                break;\\n            }\\n            // get the batch with the smallest normalised balance\\n            bytes32 fbi = firstBatchId();\\n            // if the batch with the smallest balance has not yet expired\\n            // we have already reached the end of the batches we need\\n            // to expire, so exit the loop\\n            if (remainingBalance(fbi) > 0) {\\n                // the upper bound of the normalised balance for which we will check if batches have expired\\n                // value is updated when there are no expired batches left\\n                lastExpiryBalance = currentTotalOutPayment();\\n                break;\\n            }\\n            // otherwise, the batch with the smallest balance has expired,\\n            // so we must remove the chunks this batch contributes to the global validChunkCount\\n            Batch storage batch = batches[fbi];\\n            uint256 batchSize = 1 << batch.depth;\\n            require(validChunkCount >= batchSize, \\\"insufficient valid chunk count\\\");\\n            validChunkCount -= batchSize;\\n            // since the batch expired _during_ the period we must add\\n            // remaining normalised payout for this batch only\\n            pot += batchSize * (batch.normalisedBalance - leb);\\n            tree.remove(fbi, batch.normalisedBalance);\\n            delete batches[fbi];\\n        }\\n        // then, for all batches that have _not_ expired during the period\\n        // add the total normalised payout of all batches\\n        // multiplied by the remaining total valid chunk count\\n        // to the pot for the period since the last expiry\\n\\n        require(lastExpiryBalance >= leb, \\\"current total outpayment should never decrease\\\");\\n\\n        // then, for all batches that have _not_ expired during the period\\n        // add the total normalised payout of all batches\\n        // multiplied by the remaining total valid chunk count\\n        // to the pot for the period since the last expiry\\n        pot += validChunkCount * (lastExpiryBalance - leb);\\n    }\\n\\n    /**\\n     * @notice Indicates whether expired batches exist.\\n     */\\n    function expiredBatchesExist() public view returns (bool) {\\n        if (isBatchesTreeEmpty()) {\\n            return false;\\n        }\\n        return (remainingBalance(firstBatchId()) <= 0);\\n    }\\n\\n    /**\\n     * @notice The current pot.\\n     */\\n    function totalPot() public returns (uint256) {\\n        expireLimited(type(uint256).max);\\n        uint256 balance = ERC20(bzzToken).balanceOf(address(this));\\n        return pot < balance ? pot : balance;\\n    }\\n\\n    /**\\n     * @notice Withdraw the pot, authorised callers only.\\n     * @param beneficiary Recieves the current total pot.\\n     */\\n\\n    function withdraw(address beneficiary) external {\\n        require(hasRole(REDISTRIBUTOR_ROLE, msg.sender), \\\"only redistributor can withdraw from the contract\\\");\\n        uint256 totalAmount = totalPot();\\n        require(ERC20(bzzToken).transfer(beneficiary, totalAmount), \\\"failed transfer\\\");\\n\\n        emit PotWithdrawn(beneficiary, totalAmount);\\n        pot = 0;\\n    }\\n\\n    function batchOwner(bytes32 _batchId) public view returns (address) {\\n        return batches[_batchId].owner;\\n    }\\n\\n    function batchDepth(bytes32 _batchId) public view returns (uint8) {\\n        return batches[_batchId].depth;\\n    }\\n\\n    function batchBucketDepth(bytes32 _batchId) public view returns (uint8) {\\n        return batches[_batchId].bucketDepth;\\n    }\\n\\n    function batchImmutableFlag(bytes32 _batchId) public view returns (bool) {\\n        return batches[_batchId].immutableFlag;\\n    }\\n\\n    function batchNormalisedBalance(bytes32 _batchId) public view returns (uint256) {\\n        return batches[_batchId].normalisedBalance;\\n    }\\n\\n    function batchLastUpdatedBlockNumber(bytes32 _batchId) public view returns (uint256) {\\n        return batches[_batchId].lastUpdatedBlockNumber;\\n    }\\n}\\n\",\"keccak256\":\"0x21543e5b5142918dec39483e6751689c65be0bb4a5cb241bfbb9c3778fd215fd\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b5060805161457b61004c60003960008181610eba01528181610efa015281816113290152818161136901526119cf015261457b6000f3fe6080604052600436106102935760003560e01c806381e508b91161015a578063b998902f116100c1578063dd483cfb1161007a578063dd483cfb146108b5578063df674385146108cc578063e63ab1e9146108fd578063ea612e1f1461091f578063f7b188a514610936578063f90ce5ba1461094b57600080fd5b8063b998902f1461074c578063c81e25ab14610780578063d09de08a14610828578063d547741f1461083d578063d71ba7c41461085d578063d968f44b1461087d57600080fd5b806391d148541161011357806391d1485414610688578063943b24b2146106a8578063a217fddf146106c8578063a6471a1d146106dd578063a81064ee14610711578063b67644b91461072c57600080fd5b806381e508b9146105e15780638456cb59146106125780638a5e8e32146106275780638b82547f1461063e578063906978421461065357806391b7f5ed1461066857600080fd5b806344beae8e116101fe57806351cff8d9116101b757806351cff8d91461053f5780635239af711461055f57806352d1902d1461057f5780635c975abb14610594578063628de877146105ac578063711bfa2b146105cc57600080fd5b806344beae8e1461048857806347aab79b146104c057806348652ce7146104e05780634ba2363a146105005780634f1ef2861461051757806351b17cd01461052a57600080fd5b806324b570a91161025057806324b570a9146103a85780632f2ff15d146103bd57806332ac57dd146103dd57806336568abe146104275780633659cfe614610447578063420fc4db1461046757600080fd5b806301ffc9a714610298578063053f14da146102cd5780631889b99b146102f257806318c8572f146103075780632182ddb114610329578063248a9ca314610378575b600080fd5b3480156102a457600080fd5b506102b86102b3366004613f20565b610962565b60405190151581526020015b60405180910390f35b3480156102d957600080fd5b506102e46101365481565b6040519081526020016102c4565b3480156102fe57600080fd5b506102b8610999565b34801561031357600080fd5b50610327610322366004613f80565b6109ac565b005b34801561033557600080fd5b50610360610344366004613fea565b600090815261012d60205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020016102c4565b34801561038457600080fd5b506102e4610393366004613fea565b600090815260c9602052604090206001015490565b3480156103b457600080fd5b506102e4610d70565b3480156103c957600080fd5b506103276103d8366004614003565b610e08565b3480156103e957600080fd5b506104156103f8366004613fea565b600090815261012d6020526040902054600160a81b900460ff1690565b60405160ff90911681526020016102c4565b34801561043357600080fd5b50610327610442366004614003565b610e32565b34801561045357600080fd5b5061032761046236600461402f565b610eb0565b34801561047357600080fd5b5061013054610360906001600160a01b031681565b34801561049457600080fd5b506104156104a3366004613fea565b600090815261012d6020526040902054600160a01b900460ff1690565b3480156104cc57600080fd5b506103276104db36600461404a565b610f8f565b3480156104ec57600080fd5b506103276104fb366004613fea565b6112a7565b34801561050c57600080fd5b506102e46101345481565b610327610525366004614083565b61131f565b34801561053657600080fd5b506102e46113eb565b34801561054b57600080fd5b5061032761055a36600461402f565b611428565b34801561056b57600080fd5b5061032761057a366004613f80565b6115a4565b34801561058b57600080fd5b506102e46119c2565b3480156105a057600080fd5b5060fb5460ff166102b8565b3480156105b857600080fd5b506103276105c7366004613fea565b611a75565b3480156105d857600080fd5b506102b8611c83565b3480156105ed57600080fd5b506102e46105fc366004613fea565b600090815261012d602052604090206002015490565b34801561061e57600080fd5b50610327611cac565b34801561063357600080fd5b506102e46101335481565b34801561064a57600080fd5b506102e4611d12565b34801561065f57600080fd5b506102e4611d73565b34801561067457600080fd5b50610327610683366004613fea565b611d8c565b34801561069457600080fd5b506102b86106a3366004614003565b611e65565b3480156106b457600080fd5b506103276106c3366004614145565b611e90565b3480156106d457600080fd5b506102e4600081565b3480156106e957600080fd5b506102e47f3e35b14a9f4fef84b59f9bdcd3044fc28783144b7e42bfb2cd075e6a02cb082881565b34801561071d57600080fd5b50610132546104159060ff1681565b34801561073857600080fd5b5061032761074736600461416f565b612007565b34801561075857600080fd5b506102e47fdd24a0f121e5ab7c3e97c63eaaf859e0b46792c3e0edfd86e2b3ad50f63011d881565b34801561078c57600080fd5b506107e861079b366004613fea565b61012d602052600090815260409020805460018201546002909201546001600160a01b0382169260ff600160a01b8404811693600160a81b8104821693600160b01b909104909116919086565b604080516001600160a01b0397909716875260ff9586166020880152939094169285019290925215156060840152608083015260a082015260c0016102c4565b34801561083457600080fd5b50610327612303565b34801561084957600080fd5b50610327610858366004614003565b61231b565b34801561086957600080fd5b506102e4610878366004613fea565b612340565b34801561088957600080fd5b506102b8610898366004613fea565b600090815261012d6020526040902054600160b01b900460ff1690565b3480156108c157600080fd5b506102e46101355481565b3480156108d857600080fd5b506102e46108e7366004613fea565b600090815261012d602052604090206001015490565b34801561090957600080fd5b506102e46000805160206144ff83398151915281565b34801561092b57600080fd5b506102e46101385481565b34801561094257600080fd5b506103276123df565b34801561095757600080fd5b506102e46101375481565b60006001600160e01b03198216637965db0b60e01b148061099357506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006109a661012e61244b565b15919050565b6109b461245b565b6109bf600033611e65565b610a1f5760405162461bcd60e51b815260206004820152602660248201527f6f6e6c792061646d696e6973747261746f722063616e2075736520636f7079206044820152651b595d1a1bd960d21b60648201526084015b60405180910390fd5b6001600160a01b038616610a755760405162461bcd60e51b815260206004820181905260248201527f6f776e65722063616e6e6f7420626520746865207a65726f20616464726573736044820152606401610a16565b60ff831615801590610a8c57508360ff168360ff16105b610acf5760405162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c840c4eac6d6cae840c8cae0e8d60631b6044820152606401610a16565b600082815261012d60205260409020546001600160a01b031615610b2c5760405162461bcd60e51b8152602060048201526014602482015273626174636820616c72656164792065786973747360601b6044820152606401610a16565b6000610b3e600160ff87161b876141a7565b610130546040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610b97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbb91906141be565b610bd75760405162461bcd60e51b8152600401610a16906141db565b600086610be26113eb565b610bec9190614204565b90508560ff166001901b6101336000828254610c089190614204565b90915550506040805160c0810182526001600160a01b03808b16825260ff808a1660208085019182528a831685870190815289151560608701908152608087018981524360a0890190815260008e815261012d90955298909320965187549451925191511515600160b01b0260ff60b01b19928716600160a81b029290921661ffff60a81b1993909616600160a01b026001600160a81b0319909516961695909517929092179190911691909117919091178255516001820155905160029091015580610d175760405162461bcd60e51b815260206004820181905260248201527f6e6f726d616c6973656442616c616e63652063616e6e6f74206265207a65726f6044820152606401610a16565b610d2461012e85836124a1565b837f9b088e2c89b322a3c1d81515e1c88db3d386d022926f0e2d0b9b5813b7413d5883838b8a8a89604051610d5e96959493929190614217565b60405180910390a25050505050505050565b6000610d7d600019611a75565b610130546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610dc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610deb9190614250565b9050806101345410610dfd5780610e02565b610134545b91505090565b600082815260c96020526040902060010154610e238161274d565b610e2d8383612757565b505050565b6001600160a01b0381163314610ea25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610a16565b610eac82826127dd565b5050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610ef85760405162461bcd60e51b8152600401610a1690614269565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610f416000805160206144df833981519152546001600160a01b031690565b6001600160a01b031614610f675760405162461bcd60e51b8152600401610a16906142b5565b610f7081612844565b60408051600080825260208201909252610f8c9183919061284f565b50565b610f9761245b565b600082815261012d6020526040902080546001600160a01b03163314610ff15760405162461bcd60e51b815260206004820152600f60248201526e3737ba103130ba31b41037bbb732b960891b6044820152606401610a16565b6101325460ff80841691161080156110165750805460ff808416600160a01b90920416105b6110595760405162461bcd60e51b81526020600482015260146024820152736465707468206e6f7420696e6372656173696e6760601b6044820152606401610a16565b8054600160b01b900460ff16156110a75760405162461bcd60e51b8152602060048201526012602482015271626174636820697320696d6d757461626c6560701b6044820152606401610a16565b6110af6113eb565b8160010154116110f95760405162461bcd60e51b815260206004820152601560248201527418985d18da08185b1c9958591e48195e1c1a5c9959605a1b6044820152606401610a16565b805460009061111290600160a01b900460ff1684614301565b90506000600160ff83161b61112686612340565b611130919061431a565b905061113a611d73565b8110156111c15760405162461bcd60e51b815260206004820152604960248201527f72656d61696e696e672062616c616e636520616674657220646570746820696e60448201527f63726561736520776f756c646e2774206d65657420323468206d696e696d756d6064820152682076616c696469747960b81b608482015260a401610a16565b6111cc600019611a75565b82546111ec90600160ff600160a01b909204821681901b9187161b61433c565b61013360008282546111fe9190614204565b909155505060018301546112179061012e9087906129ba565b825460ff60a01b1916600160a01b60ff8616021783554360028401558061123c6113eb565b6112469190614204565b6001840181905561125c9061012e9087906124a1565b60018301546040805160ff87168152602081019290925286917faf27998ec15e9d3809edad41aec1b5551d8412e71bd07c91611a0237ead1dc8e910160405180910390a25050505050565b6112b2600033611e65565b6113195760405162461bcd60e51b815260206004820152603260248201527f6f6e6c792061646d696e6973747261746f722063616e20736574206d696e696d604482015271756d2076616c696469747920626c6f636b7360701b6064820152608401610a16565b61013555565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036113675760405162461bcd60e51b8152600401610a1690614269565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166113b06000805160206144df833981519152546001600160a01b031690565b6001600160a01b0316146113d65760405162461bcd60e51b8152600401610a16906142b5565b6113df82612844565b610eac8282600161284f565b60008061013754436113fd919061433c565b90506000816101365461141091906141a7565b905080610131546114219190614204565b9250505090565b6114527f3e35b14a9f4fef84b59f9bdcd3044fc28783144b7e42bfb2cd075e6a02cb082833611e65565b6114b85760405162461bcd60e51b815260206004820152603160248201527f6f6e6c792072656469737472696275746f722063616e20776974686472617720604482015270199c9bdb481d1a194818dbdb9d1c9858dd607a1b6064820152608401610a16565b60006114c2610d70565b6101305460405163a9059cbb60e01b81526001600160a01b0385811660048301526024820184905292935091169063a9059cbb906044016020604051808303816000875af1158015611518573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153c91906141be565b6115585760405162461bcd60e51b8152600401610a16906141db565b604080516001600160a01b0384168152602081018390527ff5d8f9b1e7af440e1e7915f4693ccc004d1461a7dafd17ea7347d03decf298e1910160405180910390a15050600061013455565b6115ac61245b565b6001600160a01b0386166116025760405162461bcd60e51b815260206004820181905260248201527f6f776e65722063616e6e6f7420626520746865207a65726f20616464726573736044820152606401610a16565b60ff83161580159061161d57506101325460ff808516911611155b801561162e57508360ff168360ff16105b6116715760405162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c840c4eac6d6cae840c8cae0e8d60631b6044820152606401610a16565b6040805133602082015290810183905260009060600160408051601f198184030181529181528151602092830120600081815261012d9093529120549091506001600160a01b0316156116fd5760405162461bcd60e51b8152602060048201526014602482015273626174636820616c72656164792065786973747360601b6044820152606401610a16565b611705611d73565b8610156117725760405162461bcd60e51b815260206004820152603560248201527f696e73756666696369656e7420696e697469616c2062616c616e636520666f7260448201527420323468206d696e696d756d2076616c696469747960581b6064820152608401610a16565b6000611784600160ff88161b886141a7565b610130546040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd906064016020604051808303816000875af11580156117dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180191906141be565b61181d5760405162461bcd60e51b8152600401610a16906141db565b6000876118286113eb565b6118329190614204565b905061183f600019611a75565b8660ff166001901b61013360008282546118599190614204565b90915550506040805160c0810182526001600160a01b03808c16825260ff808b1660208085019182528b83168587019081528a151560608701908152608087018981524360a0890190815260008d815261012d90955298909320965187549451925191511515600160b01b0260ff60b01b19928716600160a81b029290921661ffff60a81b1993909616600160a01b026001600160a81b03199095169616959095179290921791909116919091179190911782555160018201559051600290910155806119685760405162461bcd60e51b815260206004820181905260248201527f6e6f726d616c6973656442616c616e63652063616e6e6f74206265207a65726f6044820152606401610a16565b61197561012e84836124a1565b827f9b088e2c89b322a3c1d81515e1c88db3d386d022926f0e2d0b9b5813b7413d5883838c8b8b8a6040516119af96959493929190614217565b60405180910390a2505050505050505050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611a625760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610a16565b506000805160206144df83398151915290565b6101385460005b82811015611be057611a8c610999565b15611aa257611a996113eb565b61013855611be0565b6000611aac611d12565b90506000611ab982612340565b1115611ad157611ac76113eb565b6101385550611be0565b600081815261012d602052604090208054610133546001600160a01b90920460ff169190911b90811115611b475760405162461bcd60e51b815260206004820152601e60248201527f696e73756666696369656e742076616c6964206368756e6b20636f756e7400006044820152606401610a16565b806101336000828254611b5a919061433c565b90915550506001820154611b6f90869061433c565b611b7990826141a7565b6101346000828254611b8b9190614204565b90915550506001820154611ba49061012e9085906129ba565b5050600090815261012d6020526040812080546001600160b81b0319168155600181018290556002015580611bd88161434f565b915050611a7c565b81610138541015611c4a5760405162461bcd60e51b815260206004820152602e60248201527f63757272656e7420746f74616c206f75747061796d656e742073686f756c642060448201526d6e6576657220646563726561736560901b6064820152608401610a16565b8161013854611c59919061433c565b61013354611c6791906141a7565b6101346000828254611c799190614204565b9091555050505050565b6000611c8d610999565b15611c985750600090565b6000611ca5610878611d12565b1115905090565b611cc46000805160206144ff83398151915233611e65565b611d085760405162461bcd60e51b81526020600482015260156024820152746f6e6c79207061757365722063616e20706175736560581b6044820152606401610a16565b611d10612db5565b565b600080611d2061012e612e0f565b905060008111611d655760405162461bcd60e51b815260206004820152601060248201526f1b9bc818985d18da195cc8195e1a5cdd60821b6044820152606401610a16565b610e0261012e826000612e56565b60006101365461013554611d8791906141a7565b905090565b611db67fdd24a0f121e5ab7c3e97c63eaaf859e0b46792c3e0edfd86e2b3ad50f63011d833611e65565b611e0e5760405162461bcd60e51b815260206004820152602360248201527f6f6e6c79207072696365206f7261636c652063616e207365742074686520707260448201526269636560e81b6064820152608401610a16565b6101365415611e2457611e1f6113eb565b610131555b61013681905543610137556040518181527fae46785019700e30375a5d7b4f91e32f8060ef085111f896ebf889450aa2ab5a9060200160405180910390a150565b600091825260c9602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600054610100900460ff1615808015611eb05750600054600160ff909116105b80611eca5750303b158015611eca575060005460ff166001145b611f2d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a16565b6000805460ff191660011790558015611f50576000805461ff0019166101001790555b61013080546001600160a01b0319166001600160a01b038516179055610132805460ff191660ff8416179055612c10610135556000610136819055611f959033612f00565b611fad6000805160206144ff83398151915233612f00565b611fb5612f0a565b611fbd612f31565b8015610e2d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b61200f61245b565b600082815261012d6020526040902080546001600160a01b03166120815760405162461bcd60e51b815260206004820152602360248201527f626174636820646f6573206e6f74206578697374206f722068617320657870696044820152621c995960ea1b6064820152608401610a16565b6120896113eb565b8160010154116120d35760405162461bcd60e51b815260206004820152601560248201527418985d18da08185b1c9958591e48195e1c1a5c9959605a1b6044820152606401610a16565b61013254815460ff918216600160a01b909104909116116121365760405162461bcd60e51b815260206004820152601860248201527f626174636820746f6f20736d616c6c20746f2072656e657700000000000000006044820152606401610a16565b61213e611d73565b8261214885612340565b6121529190614204565b10156121c65760405162461bcd60e51b815260206004820152603760248201527f696e73756666696369656e7420746f707065642075702062616c616e6365206660448201527f6f7220323468206d696e696d756d2076616c69646974790000000000000000006064820152608401610a16565b80546000906121e3906001600160a01b90910460ff161b846141a7565b610130546040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd906064016020604051808303816000875af115801561223c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226091906141be565b61227c5760405162461bcd60e51b8152600401610a16906141db565b60018201546122909061012e9086906129ba565b8282600101546122a09190614204565b600183018190556122b69061012e9086906124a1565b837faf5756c62d6c0722ef9be1f82bef97ab06ea5aea7f3eb8ad348422079f01d88d8284600101546040516122f5929190918252602082015260400190565b60405180910390a250505050565b61013580549060006123148361434f565b9190505550565b600082815260c960205260409020600101546123368161274d565b610e2d83836127dd565b600081815261012d6020526040812080546001600160a01b03166123a65760405162461bcd60e51b815260206004820152601f60248201527f626174636820646f6573206e6f74206578697374206f722065787069726564006044820152606401610a16565b6123ae6113eb565b8160010154116123c15750600092915050565b6123c96113eb565b81600101546123d8919061433c565b9392505050565b6123f76000805160206144ff83398151915233611e65565b6124435760405162461bcd60e51b815260206004820152601760248201527f6f6e6c79207061757365722063616e20756e70617573650000000000000000006044820152606401610a16565b611d10612f60565b6000610993828360000154612f99565b60fb5460ff1615611d105760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610a16565b806125145760405162461bcd60e51b815260206004820152603960248201527f4f7264657253746174697374696373547265652834303529202d2056616c756560448201527f20746f20696e736572742063616e6e6f74206265207a65726f000000000000006064820152608401610a16565b61251f838383612fc5565b156125aa5760405162461bcd60e51b815260206004820152604f60248201527f4f7264657253746174697374696373547265652834303629202d2056616c756560448201527f20616e64204b65792070616972206578697374732e2043616e6e6f742062652060648201526e34b739b2b93a32b21030b3b0b4b71760891b608482015260a401610a16565b82546000905b801561268e57809150808310156125da576000908152600180860160205260409091200154612665565b808311156125fb576000908152600185016020526040902060020154612665565b80830361266557600081815260018087016020908152604083206004018054808401825581855291842090910187905591839052905461263b919061433c565b60009182526001909501602090815260408083209583526005909501905292909220929092555050565b600082815260018601602052604081206006018054916126848361434f565b91905055506125b0565b600083815260018087016020908152604083208581558083018490556002810184905560038101805460ff19168417905560048101805480850182558186529290942090910187905591546126e3919061433c565b6000868152600583016020526040902055826127015783865561273b565b82841015612724576000838152600180880160205260409091200184905561273b565b600083815260018701602052604090206002018490555b612745868561302b565b505050505050565b610f8c8133613293565b6127618282611e65565b610eac57600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff191660011790556127993390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6127e78282611e65565b15610eac57600082815260c9602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610eac8161274d565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561288257610e2d836132ec565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156128dc575060408051601f3d908101601f191682019092526128d991810190614250565b60015b61293f5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610a16565b6000805160206144df83398151915281146129ae5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610a16565b50610e2d838383613388565b80612a2d5760405162461bcd60e51b815260206004820152603960248201527f4f7264657253746174697374696373547265652834303729202d2056616c756560448201527f20746f2064656c6574652063616e6e6f74206265207a65726f000000000000006064820152608401610a16565b612a38838383612fc5565b612aaa5760405162461bcd60e51b815260206004820152603a60248201527f4f7264657253746174697374696373547265652834303829202d2056616c756560448201527f20746f2064656c65746520646f6573206e6f742065786973742e0000000000006064820152608401610a16565b6000818152600180850160209081526040808420868552600581019092528320546004820180549294919391929091612ae29161433c565b81548110612af257612af2614368565b9060005260206000200154905080836004018381548110612b1557612b15614368565b6000918252602080832090910192909255828152600585019091526040902082905560048301805480612b4a57612b4a61437e565b600190038181906000526020600020016000905590556000808460040180549050600003612dab5760008681526001808a01602052604090912001541580612ba357506000868152600189016020526040902060020154155b15612baf575084612bf7565b5060008581526001880160205260409020600201545b60008181526001808a016020526040909120015415612bf7576000908152600180890160205260409091200154612bc5565b60008181526001808a016020526040909120015415612c2b5760008181526001808a01602052604090912001549150612c42565b600081815260018901602052604090206002015491505b60008181526001890160205260408082205484835291208190558015612cb25760008181526001808b01602052604090912001548203612c975760008181526001808b01602052604090912001839055612cb6565b600081815260018a0160205260409020600201839055612cb6565b8289555b600082815260018a01602052604090206003015460ff1615878314612d4957612ce08a848a6133b3565b600088815260018b8101602052604080832080830154878552828520938401819055845281842087905560028082015490840181905584529083208690556003908101549286905201805460ff191660ff9092161515919091179055919691612d498a89613429565b8015612d5957612d598a85613496565b612d638a83613429565b60008381526001808c01602052604082208281559081018290556002810182905560038101805460ff1916905590612d9e6004830182613eee565b6006820160009055505050505b5050505050505050565b612dbd61245b565b60fb805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612df23390565b6040516001600160a01b03909116815260200160405180910390a1565b805480612e1e57506000919050565b5b600081815260018084016020526040909120015415612e51576000908152600180830160205260409091200154612e1f565b919050565b6000612e6284846138af565b612ec75760405162461bcd60e51b815260206004820152603060248201527f4f7264657253746174697374696373547265652834303429202d2056616c756560448201526f103237b2b9903737ba1032bc34b9ba1760811b6064820152608401610a16565b60008381526001850160205260409020600401805483908110612eec57612eec614368565b906000526020600020015490509392505050565b610eac8282612757565b600054610100900460ff16611d105760405162461bcd60e51b8152600401610a1690614394565b600054610100900460ff16612f585760405162461bcd60e51b8152600401610a1690614394565b611d106138f5565b612f68613928565b60fb805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33612df2565b6000818152600183016020526040812060068101546004820154612fbd9190614204565b949350505050565b6000612fd184836138af565b612fdd575060006123d8565b60008281526001850160209081526040808320868452600581019092529091205460049091018054859290811061301657613016614368565b90600052602060002001541490509392505050565b60005b825482148015906130585750600082815260018401602052604080822054825290206003015460ff165b1561327157600082815260018085016020526040808320548084528184205484529220015481036131795760008181526001850160205260408082205482528082206002015480835291206003015490925060ff1615613100576000818152600180860160205260408083206003808201805460ff1990811690915587865283862082018054821690558254865292852001805490921690921790559082905254925061326b565b60008181526001850160205260409020600201548303613127578092506131278484613971565b50600082815260018085016020526040808320548084528184206003808201805460ff19908116909155825487529386200180549093169093179091559182905254613174908590613aee565b61326b565b6000818152600180860160205260408083205483528083209091015480835291206003015490925060ff16156131f7576000818152600180860160205260408083206003808201805460ff1990811690915587865283862082018054821690558254865292852001805490921690921790559082905254925061326b565b6000818152600180860160205260409091200154830361321e5780925061321e8484613aee565b50600082815260018085016020526040808320548084528184206003808201805460ff1990811690915582548752938620018054909316909317909155918290525461326b908590613971565b5061302e565b505080546000908152600190910160205260409020600301805460ff19169055565b61329d8282611e65565b610eac576132aa81613bce565b6132b5836020613be0565b6040516020016132c6929190614403565b60408051601f198184030181529082905262461bcd60e51b8252610a1691600401614478565b6001600160a01b0381163b6133595760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610a16565b6000805160206144df83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61339183613d7c565b60008251118061339e5750805b15610e2d576133ad8383613dbc565b50505050565b6000818152600184016020526040808220548483529120819055806133da578284556133ad565b6000818152600180860160205260409091200154820361340f57600081815260018086016020526040909120018390556133ad565b600090815260019390930160205250604090912060020155565b8015610eac57600081815260018301602052604090206002015461344e908390612f99565b600082815260018085016020526040909120015461346d908490612f99565b6134779190614204565b6000918252600183016020526040909120600681019190915554613429565b60005b825482148015906134be5750600082815260018401602052604090206003015460ff16155b1561389057600082815260018085016020526040808320548084529220015483036136b95760008181526001850160205260408082206002015480835291206003015490925060ff1615613561576000828152600180860160205260408083206003908101805460ff1990811690915585855291909320909201805490921617905561354a8482613971565b600081815260018501602052604090206002015491505b60008281526001808601602052604080832090910154825290206003015460ff161580156135ac5750600082815260018501602052604080822060020154825290206003015460ff16155b156135d957600082815260018581016020526040909120600301805460ff1916909117905591508161388a565b600082815260018501602052604080822060020154825290206003015460ff16613656576000828152600180860160205260408083208083015484529083206003908101805460ff199081169091559386905201805490921617905561363f8483613aee565b600081815260018501602052604090206002015491505b600081815260018501602052604080822060039081018054868552838520808401805460ff909316151560ff1993841617905582548216909255600290910154845291909220909101805490911690556136b08482613971565b8354925061388a565b6000818152600180860160205260408083209091015480835291206003015490925060ff1615613738576000828152600180860160205260408083206003908101805460ff199081169091558585529190932090920180549092161790556137218482613aee565b600081815260018086016020526040909120015491505b600082815260018501602052604080822060020154825290206003015460ff16158015613783575060008281526001808601602052604080832090910154825290206003015460ff16155b156137b057600082815260018581016020526040909120600301805460ff1916909117905591508161388a565b60008281526001808601602052604080832090910154825290206003015460ff1661382f57600082815260018086016020526040808320600281015484529083206003908101805460ff19908116909155938690520180549092161790556138188483613971565b600081815260018086016020526040909120015491505b60008181526001808601602052604080832060039081018054878652838620808401805460ff909316151560ff199384161790558254821690925593015484529220909101805490911690556138858482613aee565b835492505b50613499565b506000908152600190910160205260409020600301805460ff19169055565b6000816138be57506000610993565b825482036138ce57506001610993565b6000828152600184016020526040902054156138ec57506001610993565b50600092915050565b600054610100900460ff1661391c5760405162461bcd60e51b8152600401610a1690614394565b60fb805460ff19169055565b60fb5460ff16611d105760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610a16565b6000818152600180840160205260408083206002810180549154828652928520909301549385905291839055909180156139b957600081815260018601602052604090208490555b60008381526001860160205260409020829055816139d957828555613a25565b60008281526001808701602052604090912001548403613a0e5760008281526001808701602052604090912001839055613a25565b600082815260018601602052604090206002018390555b600083815260018087016020526040808320909101869055858252902083815560020154613a54908690612f99565b6000858152600180880160205260409091200154613a73908790612f99565b613a7d9190614204565b6000858152600187016020526040808220600601929092558481522060020154613aa8908690612f99565b6000848152600180880160205260409091200154613ac7908790612f99565b613ad19190614204565b600093845260019095016020525050604090206006019190915550565b60008181526001808401602052604080832091820180549254838552918420600201549385905283905590918015613b3457600081815260018601602052604090208490555b6000838152600186016020526040902082905581613b5457828555613ba0565b60008281526001860160205260409020600201548403613b895760008281526001860160205260409020600201839055613ba0565b600082815260018087016020526040909120018390555b6000838152600186016020526040808220600290810187905586835291208481550154613a54908690612f99565b60606109936001600160a01b03831660145b60606000613bef8360026141a7565b613bfa906002614204565b67ffffffffffffffff811115613c1257613c1261406d565b6040519080825280601f01601f191660200182016040528015613c3c576020820181803683370190505b509050600360fc1b81600081518110613c5757613c57614368565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613c8657613c86614368565b60200101906001600160f81b031916908160001a9053506000613caa8460026141a7565b613cb5906001614204565b90505b6001811115613d2d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613ce957613ce9614368565b1a60f81b828281518110613cff57613cff614368565b60200101906001600160f81b031916908160001a90535060049490941c93613d26816144ab565b9050613cb8565b5083156123d85760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a16565b613d85816132ec565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b613e245760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610a16565b600080846001600160a01b031684604051613e3f91906144c2565b600060405180830381855af49150503d8060008114613e7a576040519150601f19603f3d011682016040523d82523d6000602084013e613e7f565b606091505b5091509150613ea7828260405180606001604052806027815260200161451f60279139613eb0565b95945050505050565b60608315613ebf5750816123d8565b6123d88383815115613ed45781518083602001fd5b8060405162461bcd60e51b8152600401610a169190614478565b5080546000825590600052602060002090810190610f8c91905b80821115613f1c5760008155600101613f08565b5090565b600060208284031215613f3257600080fd5b81356001600160e01b0319811681146123d857600080fd5b80356001600160a01b0381168114612e5157600080fd5b803560ff81168114612e5157600080fd5b8015158114610f8c57600080fd5b60008060008060008060c08789031215613f9957600080fd5b613fa287613f4a565b955060208701359450613fb760408801613f61565b9350613fc560608801613f61565b92506080870135915060a0870135613fdc81613f72565b809150509295509295509295565b600060208284031215613ffc57600080fd5b5035919050565b6000806040838503121561401657600080fd5b8235915061402660208401613f4a565b90509250929050565b60006020828403121561404157600080fd5b6123d882613f4a565b6000806040838503121561405d57600080fd5b8235915061402660208401613f61565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561409657600080fd5b61409f83613f4a565b9150602083013567ffffffffffffffff808211156140bc57600080fd5b818501915085601f8301126140d057600080fd5b8135818111156140e2576140e261406d565b604051601f8201601f19908116603f0116810190838211818310171561410a5761410a61406d565b8160405282815288602084870101111561412357600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806040838503121561415857600080fd5b61416183613f4a565b915061402660208401613f61565b6000806040838503121561418257600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761099357610993614191565b6000602082840312156141d057600080fd5b81516123d881613f72565b6020808252600f908201526e3330b4b632b2103a3930b739b332b960891b604082015260600190565b8082018082111561099357610993614191565b95865260208601949094526001600160a01b0392909216604085015260ff9081166060850152166080830152151560a082015260c00190565b60006020828403121561426257600080fd5b5051919050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60ff828116828216039081111561099357610993614191565b60008261433757634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561099357610993614191565b60006001820161436157614361614191565b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b838110156143fa5781810151838201526020016143e2565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161443b8160178501602088016143df565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161446c8160288401602088016143df565b01602801949350505050565b60208152600082518060208401526144978160408501602087016143df565b601f01601f19169190910160400192915050565b6000816144ba576144ba614191565b506000190190565b600082516144d48184602087016143df565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212201b19156abf9463c6c6c8db85c5aca58d10820b5d3f7a36818152ffba05288c2364736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106102935760003560e01c806381e508b91161015a578063b998902f116100c1578063dd483cfb1161007a578063dd483cfb146108b5578063df674385146108cc578063e63ab1e9146108fd578063ea612e1f1461091f578063f7b188a514610936578063f90ce5ba1461094b57600080fd5b8063b998902f1461074c578063c81e25ab14610780578063d09de08a14610828578063d547741f1461083d578063d71ba7c41461085d578063d968f44b1461087d57600080fd5b806391d148541161011357806391d1485414610688578063943b24b2146106a8578063a217fddf146106c8578063a6471a1d146106dd578063a81064ee14610711578063b67644b91461072c57600080fd5b806381e508b9146105e15780638456cb59146106125780638a5e8e32146106275780638b82547f1461063e578063906978421461065357806391b7f5ed1461066857600080fd5b806344beae8e116101fe57806351cff8d9116101b757806351cff8d91461053f5780635239af711461055f57806352d1902d1461057f5780635c975abb14610594578063628de877146105ac578063711bfa2b146105cc57600080fd5b806344beae8e1461048857806347aab79b146104c057806348652ce7146104e05780634ba2363a146105005780634f1ef2861461051757806351b17cd01461052a57600080fd5b806324b570a91161025057806324b570a9146103a85780632f2ff15d146103bd57806332ac57dd146103dd57806336568abe146104275780633659cfe614610447578063420fc4db1461046757600080fd5b806301ffc9a714610298578063053f14da146102cd5780631889b99b146102f257806318c8572f146103075780632182ddb114610329578063248a9ca314610378575b600080fd5b3480156102a457600080fd5b506102b86102b3366004613f20565b610962565b60405190151581526020015b60405180910390f35b3480156102d957600080fd5b506102e46101365481565b6040519081526020016102c4565b3480156102fe57600080fd5b506102b8610999565b34801561031357600080fd5b50610327610322366004613f80565b6109ac565b005b34801561033557600080fd5b50610360610344366004613fea565b600090815261012d60205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020016102c4565b34801561038457600080fd5b506102e4610393366004613fea565b600090815260c9602052604090206001015490565b3480156103b457600080fd5b506102e4610d70565b3480156103c957600080fd5b506103276103d8366004614003565b610e08565b3480156103e957600080fd5b506104156103f8366004613fea565b600090815261012d6020526040902054600160a81b900460ff1690565b60405160ff90911681526020016102c4565b34801561043357600080fd5b50610327610442366004614003565b610e32565b34801561045357600080fd5b5061032761046236600461402f565b610eb0565b34801561047357600080fd5b5061013054610360906001600160a01b031681565b34801561049457600080fd5b506104156104a3366004613fea565b600090815261012d6020526040902054600160a01b900460ff1690565b3480156104cc57600080fd5b506103276104db36600461404a565b610f8f565b3480156104ec57600080fd5b506103276104fb366004613fea565b6112a7565b34801561050c57600080fd5b506102e46101345481565b610327610525366004614083565b61131f565b34801561053657600080fd5b506102e46113eb565b34801561054b57600080fd5b5061032761055a36600461402f565b611428565b34801561056b57600080fd5b5061032761057a366004613f80565b6115a4565b34801561058b57600080fd5b506102e46119c2565b3480156105a057600080fd5b5060fb5460ff166102b8565b3480156105b857600080fd5b506103276105c7366004613fea565b611a75565b3480156105d857600080fd5b506102b8611c83565b3480156105ed57600080fd5b506102e46105fc366004613fea565b600090815261012d602052604090206002015490565b34801561061e57600080fd5b50610327611cac565b34801561063357600080fd5b506102e46101335481565b34801561064a57600080fd5b506102e4611d12565b34801561065f57600080fd5b506102e4611d73565b34801561067457600080fd5b50610327610683366004613fea565b611d8c565b34801561069457600080fd5b506102b86106a3366004614003565b611e65565b3480156106b457600080fd5b506103276106c3366004614145565b611e90565b3480156106d457600080fd5b506102e4600081565b3480156106e957600080fd5b506102e47f3e35b14a9f4fef84b59f9bdcd3044fc28783144b7e42bfb2cd075e6a02cb082881565b34801561071d57600080fd5b50610132546104159060ff1681565b34801561073857600080fd5b5061032761074736600461416f565b612007565b34801561075857600080fd5b506102e47fdd24a0f121e5ab7c3e97c63eaaf859e0b46792c3e0edfd86e2b3ad50f63011d881565b34801561078c57600080fd5b506107e861079b366004613fea565b61012d602052600090815260409020805460018201546002909201546001600160a01b0382169260ff600160a01b8404811693600160a81b8104821693600160b01b909104909116919086565b604080516001600160a01b0397909716875260ff9586166020880152939094169285019290925215156060840152608083015260a082015260c0016102c4565b34801561083457600080fd5b50610327612303565b34801561084957600080fd5b50610327610858366004614003565b61231b565b34801561086957600080fd5b506102e4610878366004613fea565b612340565b34801561088957600080fd5b506102b8610898366004613fea565b600090815261012d6020526040902054600160b01b900460ff1690565b3480156108c157600080fd5b506102e46101355481565b3480156108d857600080fd5b506102e46108e7366004613fea565b600090815261012d602052604090206001015490565b34801561090957600080fd5b506102e46000805160206144ff83398151915281565b34801561092b57600080fd5b506102e46101385481565b34801561094257600080fd5b506103276123df565b34801561095757600080fd5b506102e46101375481565b60006001600160e01b03198216637965db0b60e01b148061099357506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006109a661012e61244b565b15919050565b6109b461245b565b6109bf600033611e65565b610a1f5760405162461bcd60e51b815260206004820152602660248201527f6f6e6c792061646d696e6973747261746f722063616e2075736520636f7079206044820152651b595d1a1bd960d21b60648201526084015b60405180910390fd5b6001600160a01b038616610a755760405162461bcd60e51b815260206004820181905260248201527f6f776e65722063616e6e6f7420626520746865207a65726f20616464726573736044820152606401610a16565b60ff831615801590610a8c57508360ff168360ff16105b610acf5760405162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c840c4eac6d6cae840c8cae0e8d60631b6044820152606401610a16565b600082815261012d60205260409020546001600160a01b031615610b2c5760405162461bcd60e51b8152602060048201526014602482015273626174636820616c72656164792065786973747360601b6044820152606401610a16565b6000610b3e600160ff87161b876141a7565b610130546040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610b97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbb91906141be565b610bd75760405162461bcd60e51b8152600401610a16906141db565b600086610be26113eb565b610bec9190614204565b90508560ff166001901b6101336000828254610c089190614204565b90915550506040805160c0810182526001600160a01b03808b16825260ff808a1660208085019182528a831685870190815289151560608701908152608087018981524360a0890190815260008e815261012d90955298909320965187549451925191511515600160b01b0260ff60b01b19928716600160a81b029290921661ffff60a81b1993909616600160a01b026001600160a81b0319909516961695909517929092179190911691909117919091178255516001820155905160029091015580610d175760405162461bcd60e51b815260206004820181905260248201527f6e6f726d616c6973656442616c616e63652063616e6e6f74206265207a65726f6044820152606401610a16565b610d2461012e85836124a1565b837f9b088e2c89b322a3c1d81515e1c88db3d386d022926f0e2d0b9b5813b7413d5883838b8a8a89604051610d5e96959493929190614217565b60405180910390a25050505050505050565b6000610d7d600019611a75565b610130546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610dc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610deb9190614250565b9050806101345410610dfd5780610e02565b610134545b91505090565b600082815260c96020526040902060010154610e238161274d565b610e2d8383612757565b505050565b6001600160a01b0381163314610ea25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610a16565b610eac82826127dd565b5050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610ef85760405162461bcd60e51b8152600401610a1690614269565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610f416000805160206144df833981519152546001600160a01b031690565b6001600160a01b031614610f675760405162461bcd60e51b8152600401610a16906142b5565b610f7081612844565b60408051600080825260208201909252610f8c9183919061284f565b50565b610f9761245b565b600082815261012d6020526040902080546001600160a01b03163314610ff15760405162461bcd60e51b815260206004820152600f60248201526e3737ba103130ba31b41037bbb732b960891b6044820152606401610a16565b6101325460ff80841691161080156110165750805460ff808416600160a01b90920416105b6110595760405162461bcd60e51b81526020600482015260146024820152736465707468206e6f7420696e6372656173696e6760601b6044820152606401610a16565b8054600160b01b900460ff16156110a75760405162461bcd60e51b8152602060048201526012602482015271626174636820697320696d6d757461626c6560701b6044820152606401610a16565b6110af6113eb565b8160010154116110f95760405162461bcd60e51b815260206004820152601560248201527418985d18da08185b1c9958591e48195e1c1a5c9959605a1b6044820152606401610a16565b805460009061111290600160a01b900460ff1684614301565b90506000600160ff83161b61112686612340565b611130919061431a565b905061113a611d73565b8110156111c15760405162461bcd60e51b815260206004820152604960248201527f72656d61696e696e672062616c616e636520616674657220646570746820696e60448201527f63726561736520776f756c646e2774206d65657420323468206d696e696d756d6064820152682076616c696469747960b81b608482015260a401610a16565b6111cc600019611a75565b82546111ec90600160ff600160a01b909204821681901b9187161b61433c565b61013360008282546111fe9190614204565b909155505060018301546112179061012e9087906129ba565b825460ff60a01b1916600160a01b60ff8616021783554360028401558061123c6113eb565b6112469190614204565b6001840181905561125c9061012e9087906124a1565b60018301546040805160ff87168152602081019290925286917faf27998ec15e9d3809edad41aec1b5551d8412e71bd07c91611a0237ead1dc8e910160405180910390a25050505050565b6112b2600033611e65565b6113195760405162461bcd60e51b815260206004820152603260248201527f6f6e6c792061646d696e6973747261746f722063616e20736574206d696e696d604482015271756d2076616c696469747920626c6f636b7360701b6064820152608401610a16565b61013555565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036113675760405162461bcd60e51b8152600401610a1690614269565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166113b06000805160206144df833981519152546001600160a01b031690565b6001600160a01b0316146113d65760405162461bcd60e51b8152600401610a16906142b5565b6113df82612844565b610eac8282600161284f565b60008061013754436113fd919061433c565b90506000816101365461141091906141a7565b905080610131546114219190614204565b9250505090565b6114527f3e35b14a9f4fef84b59f9bdcd3044fc28783144b7e42bfb2cd075e6a02cb082833611e65565b6114b85760405162461bcd60e51b815260206004820152603160248201527f6f6e6c792072656469737472696275746f722063616e20776974686472617720604482015270199c9bdb481d1a194818dbdb9d1c9858dd607a1b6064820152608401610a16565b60006114c2610d70565b6101305460405163a9059cbb60e01b81526001600160a01b0385811660048301526024820184905292935091169063a9059cbb906044016020604051808303816000875af1158015611518573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153c91906141be565b6115585760405162461bcd60e51b8152600401610a16906141db565b604080516001600160a01b0384168152602081018390527ff5d8f9b1e7af440e1e7915f4693ccc004d1461a7dafd17ea7347d03decf298e1910160405180910390a15050600061013455565b6115ac61245b565b6001600160a01b0386166116025760405162461bcd60e51b815260206004820181905260248201527f6f776e65722063616e6e6f7420626520746865207a65726f20616464726573736044820152606401610a16565b60ff83161580159061161d57506101325460ff808516911611155b801561162e57508360ff168360ff16105b6116715760405162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c840c4eac6d6cae840c8cae0e8d60631b6044820152606401610a16565b6040805133602082015290810183905260009060600160408051601f198184030181529181528151602092830120600081815261012d9093529120549091506001600160a01b0316156116fd5760405162461bcd60e51b8152602060048201526014602482015273626174636820616c72656164792065786973747360601b6044820152606401610a16565b611705611d73565b8610156117725760405162461bcd60e51b815260206004820152603560248201527f696e73756666696369656e7420696e697469616c2062616c616e636520666f7260448201527420323468206d696e696d756d2076616c696469747960581b6064820152608401610a16565b6000611784600160ff88161b886141a7565b610130546040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd906064016020604051808303816000875af11580156117dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180191906141be565b61181d5760405162461bcd60e51b8152600401610a16906141db565b6000876118286113eb565b6118329190614204565b905061183f600019611a75565b8660ff166001901b61013360008282546118599190614204565b90915550506040805160c0810182526001600160a01b03808c16825260ff808b1660208085019182528b83168587019081528a151560608701908152608087018981524360a0890190815260008d815261012d90955298909320965187549451925191511515600160b01b0260ff60b01b19928716600160a81b029290921661ffff60a81b1993909616600160a01b026001600160a81b03199095169616959095179290921791909116919091179190911782555160018201559051600290910155806119685760405162461bcd60e51b815260206004820181905260248201527f6e6f726d616c6973656442616c616e63652063616e6e6f74206265207a65726f6044820152606401610a16565b61197561012e84836124a1565b827f9b088e2c89b322a3c1d81515e1c88db3d386d022926f0e2d0b9b5813b7413d5883838c8b8b8a6040516119af96959493929190614217565b60405180910390a2505050505050505050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611a625760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610a16565b506000805160206144df83398151915290565b6101385460005b82811015611be057611a8c610999565b15611aa257611a996113eb565b61013855611be0565b6000611aac611d12565b90506000611ab982612340565b1115611ad157611ac76113eb565b6101385550611be0565b600081815261012d602052604090208054610133546001600160a01b90920460ff169190911b90811115611b475760405162461bcd60e51b815260206004820152601e60248201527f696e73756666696369656e742076616c6964206368756e6b20636f756e7400006044820152606401610a16565b806101336000828254611b5a919061433c565b90915550506001820154611b6f90869061433c565b611b7990826141a7565b6101346000828254611b8b9190614204565b90915550506001820154611ba49061012e9085906129ba565b5050600090815261012d6020526040812080546001600160b81b0319168155600181018290556002015580611bd88161434f565b915050611a7c565b81610138541015611c4a5760405162461bcd60e51b815260206004820152602e60248201527f63757272656e7420746f74616c206f75747061796d656e742073686f756c642060448201526d6e6576657220646563726561736560901b6064820152608401610a16565b8161013854611c59919061433c565b61013354611c6791906141a7565b6101346000828254611c799190614204565b9091555050505050565b6000611c8d610999565b15611c985750600090565b6000611ca5610878611d12565b1115905090565b611cc46000805160206144ff83398151915233611e65565b611d085760405162461bcd60e51b81526020600482015260156024820152746f6e6c79207061757365722063616e20706175736560581b6044820152606401610a16565b611d10612db5565b565b600080611d2061012e612e0f565b905060008111611d655760405162461bcd60e51b815260206004820152601060248201526f1b9bc818985d18da195cc8195e1a5cdd60821b6044820152606401610a16565b610e0261012e826000612e56565b60006101365461013554611d8791906141a7565b905090565b611db67fdd24a0f121e5ab7c3e97c63eaaf859e0b46792c3e0edfd86e2b3ad50f63011d833611e65565b611e0e5760405162461bcd60e51b815260206004820152602360248201527f6f6e6c79207072696365206f7261636c652063616e207365742074686520707260448201526269636560e81b6064820152608401610a16565b6101365415611e2457611e1f6113eb565b610131555b61013681905543610137556040518181527fae46785019700e30375a5d7b4f91e32f8060ef085111f896ebf889450aa2ab5a9060200160405180910390a150565b600091825260c9602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600054610100900460ff1615808015611eb05750600054600160ff909116105b80611eca5750303b158015611eca575060005460ff166001145b611f2d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a16565b6000805460ff191660011790558015611f50576000805461ff0019166101001790555b61013080546001600160a01b0319166001600160a01b038516179055610132805460ff191660ff8416179055612c10610135556000610136819055611f959033612f00565b611fad6000805160206144ff83398151915233612f00565b611fb5612f0a565b611fbd612f31565b8015610e2d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b61200f61245b565b600082815261012d6020526040902080546001600160a01b03166120815760405162461bcd60e51b815260206004820152602360248201527f626174636820646f6573206e6f74206578697374206f722068617320657870696044820152621c995960ea1b6064820152608401610a16565b6120896113eb565b8160010154116120d35760405162461bcd60e51b815260206004820152601560248201527418985d18da08185b1c9958591e48195e1c1a5c9959605a1b6044820152606401610a16565b61013254815460ff918216600160a01b909104909116116121365760405162461bcd60e51b815260206004820152601860248201527f626174636820746f6f20736d616c6c20746f2072656e657700000000000000006044820152606401610a16565b61213e611d73565b8261214885612340565b6121529190614204565b10156121c65760405162461bcd60e51b815260206004820152603760248201527f696e73756666696369656e7420746f707065642075702062616c616e6365206660448201527f6f7220323468206d696e696d756d2076616c69646974790000000000000000006064820152608401610a16565b80546000906121e3906001600160a01b90910460ff161b846141a7565b610130546040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd906064016020604051808303816000875af115801561223c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226091906141be565b61227c5760405162461bcd60e51b8152600401610a16906141db565b60018201546122909061012e9086906129ba565b8282600101546122a09190614204565b600183018190556122b69061012e9086906124a1565b837faf5756c62d6c0722ef9be1f82bef97ab06ea5aea7f3eb8ad348422079f01d88d8284600101546040516122f5929190918252602082015260400190565b60405180910390a250505050565b61013580549060006123148361434f565b9190505550565b600082815260c960205260409020600101546123368161274d565b610e2d83836127dd565b600081815261012d6020526040812080546001600160a01b03166123a65760405162461bcd60e51b815260206004820152601f60248201527f626174636820646f6573206e6f74206578697374206f722065787069726564006044820152606401610a16565b6123ae6113eb565b8160010154116123c15750600092915050565b6123c96113eb565b81600101546123d8919061433c565b9392505050565b6123f76000805160206144ff83398151915233611e65565b6124435760405162461bcd60e51b815260206004820152601760248201527f6f6e6c79207061757365722063616e20756e70617573650000000000000000006044820152606401610a16565b611d10612f60565b6000610993828360000154612f99565b60fb5460ff1615611d105760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610a16565b806125145760405162461bcd60e51b815260206004820152603960248201527f4f7264657253746174697374696373547265652834303529202d2056616c756560448201527f20746f20696e736572742063616e6e6f74206265207a65726f000000000000006064820152608401610a16565b61251f838383612fc5565b156125aa5760405162461bcd60e51b815260206004820152604f60248201527f4f7264657253746174697374696373547265652834303629202d2056616c756560448201527f20616e64204b65792070616972206578697374732e2043616e6e6f742062652060648201526e34b739b2b93a32b21030b3b0b4b71760891b608482015260a401610a16565b82546000905b801561268e57809150808310156125da576000908152600180860160205260409091200154612665565b808311156125fb576000908152600185016020526040902060020154612665565b80830361266557600081815260018087016020908152604083206004018054808401825581855291842090910187905591839052905461263b919061433c565b60009182526001909501602090815260408083209583526005909501905292909220929092555050565b600082815260018601602052604081206006018054916126848361434f565b91905055506125b0565b600083815260018087016020908152604083208581558083018490556002810184905560038101805460ff19168417905560048101805480850182558186529290942090910187905591546126e3919061433c565b6000868152600583016020526040902055826127015783865561273b565b82841015612724576000838152600180880160205260409091200184905561273b565b600083815260018701602052604090206002018490555b612745868561302b565b505050505050565b610f8c8133613293565b6127618282611e65565b610eac57600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff191660011790556127993390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6127e78282611e65565b15610eac57600082815260c9602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610eac8161274d565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561288257610e2d836132ec565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156128dc575060408051601f3d908101601f191682019092526128d991810190614250565b60015b61293f5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610a16565b6000805160206144df83398151915281146129ae5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610a16565b50610e2d838383613388565b80612a2d5760405162461bcd60e51b815260206004820152603960248201527f4f7264657253746174697374696373547265652834303729202d2056616c756560448201527f20746f2064656c6574652063616e6e6f74206265207a65726f000000000000006064820152608401610a16565b612a38838383612fc5565b612aaa5760405162461bcd60e51b815260206004820152603a60248201527f4f7264657253746174697374696373547265652834303829202d2056616c756560448201527f20746f2064656c65746520646f6573206e6f742065786973742e0000000000006064820152608401610a16565b6000818152600180850160209081526040808420868552600581019092528320546004820180549294919391929091612ae29161433c565b81548110612af257612af2614368565b9060005260206000200154905080836004018381548110612b1557612b15614368565b6000918252602080832090910192909255828152600585019091526040902082905560048301805480612b4a57612b4a61437e565b600190038181906000526020600020016000905590556000808460040180549050600003612dab5760008681526001808a01602052604090912001541580612ba357506000868152600189016020526040902060020154155b15612baf575084612bf7565b5060008581526001880160205260409020600201545b60008181526001808a016020526040909120015415612bf7576000908152600180890160205260409091200154612bc5565b60008181526001808a016020526040909120015415612c2b5760008181526001808a01602052604090912001549150612c42565b600081815260018901602052604090206002015491505b60008181526001890160205260408082205484835291208190558015612cb25760008181526001808b01602052604090912001548203612c975760008181526001808b01602052604090912001839055612cb6565b600081815260018a0160205260409020600201839055612cb6565b8289555b600082815260018a01602052604090206003015460ff1615878314612d4957612ce08a848a6133b3565b600088815260018b8101602052604080832080830154878552828520938401819055845281842087905560028082015490840181905584529083208690556003908101549286905201805460ff191660ff9092161515919091179055919691612d498a89613429565b8015612d5957612d598a85613496565b612d638a83613429565b60008381526001808c01602052604082208281559081018290556002810182905560038101805460ff1916905590612d9e6004830182613eee565b6006820160009055505050505b5050505050505050565b612dbd61245b565b60fb805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612df23390565b6040516001600160a01b03909116815260200160405180910390a1565b805480612e1e57506000919050565b5b600081815260018084016020526040909120015415612e51576000908152600180830160205260409091200154612e1f565b919050565b6000612e6284846138af565b612ec75760405162461bcd60e51b815260206004820152603060248201527f4f7264657253746174697374696373547265652834303429202d2056616c756560448201526f103237b2b9903737ba1032bc34b9ba1760811b6064820152608401610a16565b60008381526001850160205260409020600401805483908110612eec57612eec614368565b906000526020600020015490509392505050565b610eac8282612757565b600054610100900460ff16611d105760405162461bcd60e51b8152600401610a1690614394565b600054610100900460ff16612f585760405162461bcd60e51b8152600401610a1690614394565b611d106138f5565b612f68613928565b60fb805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33612df2565b6000818152600183016020526040812060068101546004820154612fbd9190614204565b949350505050565b6000612fd184836138af565b612fdd575060006123d8565b60008281526001850160209081526040808320868452600581019092529091205460049091018054859290811061301657613016614368565b90600052602060002001541490509392505050565b60005b825482148015906130585750600082815260018401602052604080822054825290206003015460ff165b1561327157600082815260018085016020526040808320548084528184205484529220015481036131795760008181526001850160205260408082205482528082206002015480835291206003015490925060ff1615613100576000818152600180860160205260408083206003808201805460ff1990811690915587865283862082018054821690558254865292852001805490921690921790559082905254925061326b565b60008181526001850160205260409020600201548303613127578092506131278484613971565b50600082815260018085016020526040808320548084528184206003808201805460ff19908116909155825487529386200180549093169093179091559182905254613174908590613aee565b61326b565b6000818152600180860160205260408083205483528083209091015480835291206003015490925060ff16156131f7576000818152600180860160205260408083206003808201805460ff1990811690915587865283862082018054821690558254865292852001805490921690921790559082905254925061326b565b6000818152600180860160205260409091200154830361321e5780925061321e8484613aee565b50600082815260018085016020526040808320548084528184206003808201805460ff1990811690915582548752938620018054909316909317909155918290525461326b908590613971565b5061302e565b505080546000908152600190910160205260409020600301805460ff19169055565b61329d8282611e65565b610eac576132aa81613bce565b6132b5836020613be0565b6040516020016132c6929190614403565b60408051601f198184030181529082905262461bcd60e51b8252610a1691600401614478565b6001600160a01b0381163b6133595760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610a16565b6000805160206144df83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61339183613d7c565b60008251118061339e5750805b15610e2d576133ad8383613dbc565b50505050565b6000818152600184016020526040808220548483529120819055806133da578284556133ad565b6000818152600180860160205260409091200154820361340f57600081815260018086016020526040909120018390556133ad565b600090815260019390930160205250604090912060020155565b8015610eac57600081815260018301602052604090206002015461344e908390612f99565b600082815260018085016020526040909120015461346d908490612f99565b6134779190614204565b6000918252600183016020526040909120600681019190915554613429565b60005b825482148015906134be5750600082815260018401602052604090206003015460ff16155b1561389057600082815260018085016020526040808320548084529220015483036136b95760008181526001850160205260408082206002015480835291206003015490925060ff1615613561576000828152600180860160205260408083206003908101805460ff1990811690915585855291909320909201805490921617905561354a8482613971565b600081815260018501602052604090206002015491505b60008281526001808601602052604080832090910154825290206003015460ff161580156135ac5750600082815260018501602052604080822060020154825290206003015460ff16155b156135d957600082815260018581016020526040909120600301805460ff1916909117905591508161388a565b600082815260018501602052604080822060020154825290206003015460ff16613656576000828152600180860160205260408083208083015484529083206003908101805460ff199081169091559386905201805490921617905561363f8483613aee565b600081815260018501602052604090206002015491505b600081815260018501602052604080822060039081018054868552838520808401805460ff909316151560ff1993841617905582548216909255600290910154845291909220909101805490911690556136b08482613971565b8354925061388a565b6000818152600180860160205260408083209091015480835291206003015490925060ff1615613738576000828152600180860160205260408083206003908101805460ff199081169091558585529190932090920180549092161790556137218482613aee565b600081815260018086016020526040909120015491505b600082815260018501602052604080822060020154825290206003015460ff16158015613783575060008281526001808601602052604080832090910154825290206003015460ff16155b156137b057600082815260018581016020526040909120600301805460ff1916909117905591508161388a565b60008281526001808601602052604080832090910154825290206003015460ff1661382f57600082815260018086016020526040808320600281015484529083206003908101805460ff19908116909155938690520180549092161790556138188483613971565b600081815260018086016020526040909120015491505b60008181526001808601602052604080832060039081018054878652838620808401805460ff909316151560ff199384161790558254821690925593015484529220909101805490911690556138858482613aee565b835492505b50613499565b506000908152600190910160205260409020600301805460ff19169055565b6000816138be57506000610993565b825482036138ce57506001610993565b6000828152600184016020526040902054156138ec57506001610993565b50600092915050565b600054610100900460ff1661391c5760405162461bcd60e51b8152600401610a1690614394565b60fb805460ff19169055565b60fb5460ff16611d105760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610a16565b6000818152600180840160205260408083206002810180549154828652928520909301549385905291839055909180156139b957600081815260018601602052604090208490555b60008381526001860160205260409020829055816139d957828555613a25565b60008281526001808701602052604090912001548403613a0e5760008281526001808701602052604090912001839055613a25565b600082815260018601602052604090206002018390555b600083815260018087016020526040808320909101869055858252902083815560020154613a54908690612f99565b6000858152600180880160205260409091200154613a73908790612f99565b613a7d9190614204565b6000858152600187016020526040808220600601929092558481522060020154613aa8908690612f99565b6000848152600180880160205260409091200154613ac7908790612f99565b613ad19190614204565b600093845260019095016020525050604090206006019190915550565b60008181526001808401602052604080832091820180549254838552918420600201549385905283905590918015613b3457600081815260018601602052604090208490555b6000838152600186016020526040902082905581613b5457828555613ba0565b60008281526001860160205260409020600201548403613b895760008281526001860160205260409020600201839055613ba0565b600082815260018087016020526040909120018390555b6000838152600186016020526040808220600290810187905586835291208481550154613a54908690612f99565b60606109936001600160a01b03831660145b60606000613bef8360026141a7565b613bfa906002614204565b67ffffffffffffffff811115613c1257613c1261406d565b6040519080825280601f01601f191660200182016040528015613c3c576020820181803683370190505b509050600360fc1b81600081518110613c5757613c57614368565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613c8657613c86614368565b60200101906001600160f81b031916908160001a9053506000613caa8460026141a7565b613cb5906001614204565b90505b6001811115613d2d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613ce957613ce9614368565b1a60f81b828281518110613cff57613cff614368565b60200101906001600160f81b031916908160001a90535060049490941c93613d26816144ab565b9050613cb8565b5083156123d85760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a16565b613d85816132ec565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b613e245760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610a16565b600080846001600160a01b031684604051613e3f91906144c2565b600060405180830381855af49150503d8060008114613e7a576040519150601f19603f3d011682016040523d82523d6000602084013e613e7f565b606091505b5091509150613ea7828260405180606001604052806027815260200161451f60279139613eb0565b95945050505050565b60608315613ebf5750816123d8565b6123d88383815115613ed45781518083602001fd5b8060405162461bcd60e51b8152600401610a169190614478565b5080546000825590600052602060002090810190610f8c91905b80821115613f1c5760008155600101613f08565b5090565b600060208284031215613f3257600080fd5b81356001600160e01b0319811681146123d857600080fd5b80356001600160a01b0381168114612e5157600080fd5b803560ff81168114612e5157600080fd5b8015158114610f8c57600080fd5b60008060008060008060c08789031215613f9957600080fd5b613fa287613f4a565b955060208701359450613fb760408801613f61565b9350613fc560608801613f61565b92506080870135915060a0870135613fdc81613f72565b809150509295509295509295565b600060208284031215613ffc57600080fd5b5035919050565b6000806040838503121561401657600080fd5b8235915061402660208401613f4a565b90509250929050565b60006020828403121561404157600080fd5b6123d882613f4a565b6000806040838503121561405d57600080fd5b8235915061402660208401613f61565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561409657600080fd5b61409f83613f4a565b9150602083013567ffffffffffffffff808211156140bc57600080fd5b818501915085601f8301126140d057600080fd5b8135818111156140e2576140e261406d565b604051601f8201601f19908116603f0116810190838211818310171561410a5761410a61406d565b8160405282815288602084870101111561412357600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806040838503121561415857600080fd5b61416183613f4a565b915061402660208401613f61565b6000806040838503121561418257600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761099357610993614191565b6000602082840312156141d057600080fd5b81516123d881613f72565b6020808252600f908201526e3330b4b632b2103a3930b739b332b960891b604082015260600190565b8082018082111561099357610993614191565b95865260208601949094526001600160a01b0392909216604085015260ff9081166060850152166080830152151560a082015260c00190565b60006020828403121561426257600080fd5b5051919050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60ff828116828216039081111561099357610993614191565b60008261433757634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561099357610993614191565b60006001820161436157614361614191565b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b838110156143fa5781810151838201526020016143e2565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161443b8160178501602088016143df565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161446c8160288401602088016143df565b01602801949350505050565b60208152600082518060208401526144978160408501602087016143df565b601f01601f19169190910160400192915050565b6000816144ba576144ba614191565b506000190190565b600082516144d48184602087016143df565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212201b19156abf9463c6c6c8db85c5aca58d10820b5d3f7a36818152ffba05288c2364736f6c63430008120033",
  "devdoc": {
    "author": "The Swarm Authors",
    "details": "The postage stamp contracts allows users to create and manage postage stamp batches. The current balance for each batch is stored ordered in descending order of normalised balance. Balance is normalised to be per chunk and the total spend since the contract was deployed, i.e. when a batch is bought, its per-chunk balance is supplemented with the current cost of storing one chunk since the beginning of time, as if the batch had existed since the contract's inception. During the _expiry_ process, each of these balances is checked against the _currentTotalOutPayment_, a similarly normalised figure that represents the current cost of storing one chunk since the beginning of time. A batch with a normalised balance less than _currentTotalOutPayment_ is treated as expired. The _currentTotalOutPayment_ is calculated using _totalOutPayment_ which is updated during _setPrice_ events so that the applicable per-chunk prices can be charged for the relevant periods of time. This can then be multiplied by the amount of chunks which are allowed to be stamped by each batch to get the actual cost of storage. The amount of chunks a batch can stamp is determined by the _bucketDepth_. A batch may store a maximum of 2^depth chunks. The global figure for the currently allowed chunks is tracked by _validChunkCount_ and updated during batch _expiry_ events.",
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "BatchCreated(bytes32,uint256,uint256,address,uint8,uint8,bool)": {
        "details": "Emitted when a new batch is created."
      },
      "BatchDepthIncrease(bytes32,uint8,uint256)": {
        "details": "Emitted when the depth of an existing batch increases."
      },
      "BatchTopUp(bytes32,uint256,uint256)": {
        "details": "Emitted when an existing batch is topped up."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is changed."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "PriceUpdate(uint256)": {
        "details": "Emitted on every price update."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "copyBatch(address,uint256,uint8,uint8,bytes32,bool)": {
        "details": "At least `_initialBalancePerChunk*2^depth` tokens must be approved in the ERC20 token contract.",
        "params": {
          "_batchId": "BatchId being copied (from previous version contract data).",
          "_depth": "Initial depth of the new batch.",
          "_immutable": "Whether the batch is mutable.",
          "_initialBalancePerChunk": "Initial balance per chunk of the batch.",
          "_owner": "Owner of the new batch."
        }
      },
      "createBatch(address,uint256,uint8,uint8,bytes32,bool)": {
        "details": "At least `_initialBalancePerChunk*2^depth` tokens must be approved in the ERC20 token contract.",
        "params": {
          "_depth": "Initial depth of the new batch.",
          "_immutable": "Whether the batch is mutable.",
          "_initialBalancePerChunk": "Initial balance per chunk.",
          "_nonce": "A random value used in the batch id derivation to allow multiple batches per owner.",
          "_owner": "Owner of the new batch."
        }
      },
      "currentTotalOutPayment()": {
        "details": "Returns the total normalised all-time per chunk payout. Only Batches with a normalised balance greater than this are valid."
      },
      "expireLimited(uint256)": {
        "details": "Can be used if reclaiming all expired batches would exceed the block gas limit, causing other contract method calls to fail.",
        "params": {
          "limit": "The maximum number of batches to expire."
        }
      },
      "firstBatchId()": {
        "details": "If more than one batch id, return index at 0, if no batches, revert."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "increaseDepth(bytes32,uint8)": {
        "details": "Can only be called by the owner of the batch.",
        "params": {
          "_batchId": "the id of an existing batch.",
          "_newDepth": "the new (larger than the previous one) depth for this batch."
        }
      },
      "initialize(address,uint8)": {
        "params": {
          "_bzzToken": "The ERC20 token address to reference in this contract.",
          "_minimumBucketDepth": "The minimum bucket depth of batches that can be purchased."
        }
      },
      "pause()": {
        "details": "Can only be called by the pauser when not paused. The contract can be provably stopped by renouncing the pauser role and the admin role once paused."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "remainingBalance(bytes32)": {
        "params": {
          "_batchId": "The id of an existing batch."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setPrice(uint256)": {
        "details": "Can only be called by the price oracle role.",
        "params": {
          "_price": "The new price."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "topUp(bytes32,uint256)": {
        "details": "At least `_topupAmountPerChunk*2^depth` tokens must be approved in the ERC20 token contract.",
        "params": {
          "_batchId": "The id of an existing batch.",
          "_topupAmountPerChunk": "The amount of additional tokens to add per chunk."
        }
      },
      "unPause()": {
        "details": "Can only be called by the pauser role while paused."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "withdraw(address)": {
        "params": {
          "beneficiary": "Recieves the current total pot."
        }
      }
    },
    "title": "PostageStamp contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "copyBatch(address,uint256,uint8,uint8,bytes32,bool)": {
        "notice": "Manually create a new batch when faciliatating migration, can only be called by the Admin role."
      },
      "createBatch(address,uint256,uint8,uint8,bytes32,bool)": {
        "notice": "Create a new batch."
      },
      "currentTotalOutPayment()": {
        "notice": "Total per-chunk cost since the contract's deployment."
      },
      "expireLimited(uint256)": {
        "notice": "Reclaims a limited number of expired batches"
      },
      "expiredBatchesExist()": {
        "notice": "Indicates whether expired batches exist."
      },
      "firstBatchId()": {
        "notice": "Get the first batch id ordered by ascending normalised balance."
      },
      "increaseDepth(bytes32,uint8)": {
        "notice": "Increase the depth of an existing batch."
      },
      "isBatchesTreeEmpty()": {
        "notice": "Return true if no batches exist"
      },
      "pause()": {
        "notice": "Pause the contract."
      },
      "remainingBalance(bytes32)": {
        "notice": "Return the per chunk balance not yet used up."
      },
      "setPrice(uint256)": {
        "notice": "Set a new price."
      },
      "topUp(bytes32,uint256)": {
        "notice": "Top up an existing batch."
      },
      "totalPot()": {
        "notice": "The current pot."
      },
      "unPause()": {
        "notice": "Unpause the contract."
      },
      "withdraw(address)": {
        "notice": "Withdraw the pot, authorised callers only."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 811,
        "contract": "src/PostageStamp.sol:PostageStamp",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 814,
        "contract": "src/PostageStamp.sol:PostageStamp",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 793,
        "contract": "src/PostageStamp.sol:PostageStamp",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1108,
        "contract": "src/PostageStamp.sol:PostageStamp",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1561,
        "contract": "src/PostageStamp.sol:PostageStamp",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1840,
        "contract": "src/PostageStamp.sol:PostageStamp",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "src/PostageStamp.sol:PostageStamp",
        "label": "_roles",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 334,
        "contract": "src/PostageStamp.sol:PostageStamp",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1130,
        "contract": "src/PostageStamp.sol:PostageStamp",
        "label": "_paused",
        "offset": 0,
        "slot": "251",
        "type": "t_bool"
      },
      {
        "astId": 1235,
        "contract": "src/PostageStamp.sol:PostageStamp",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5561,
        "contract": "src/PostageStamp.sol:PostageStamp",
        "label": "batches",
        "offset": 0,
        "slot": "301",
        "type": "t_mapping(t_bytes32,t_struct(Batch)5541_storage)"
      },
      {
        "astId": 5564,
        "contract": "src/PostageStamp.sol:PostageStamp",
        "label": "tree",
        "offset": 0,
        "slot": "302",
        "type": "t_struct(Tree)3461_storage"
      },
      {
        "astId": 5566,
        "contract": "src/PostageStamp.sol:PostageStamp",
        "label": "bzzToken",
        "offset": 0,
        "slot": "304",
        "type": "t_address"
      },
      {
        "astId": 5568,
        "contract": "src/PostageStamp.sol:PostageStamp",
        "label": "totalOutPayment",
        "offset": 0,
        "slot": "305",
        "type": "t_uint256"
      },
      {
        "astId": 5570,
        "contract": "src/PostageStamp.sol:PostageStamp",
        "label": "minimumBucketDepth",
        "offset": 0,
        "slot": "306",
        "type": "t_uint8"
      },
      {
        "astId": 5572,
        "contract": "src/PostageStamp.sol:PostageStamp",
        "label": "validChunkCount",
        "offset": 0,
        "slot": "307",
        "type": "t_uint256"
      },
      {
        "astId": 5574,
        "contract": "src/PostageStamp.sol:PostageStamp",
        "label": "pot",
        "offset": 0,
        "slot": "308",
        "type": "t_uint256"
      },
      {
        "astId": 5576,
        "contract": "src/PostageStamp.sol:PostageStamp",
        "label": "minimumValidityBlocks",
        "offset": 0,
        "slot": "309",
        "type": "t_uint256"
      },
      {
        "astId": 5578,
        "contract": "src/PostageStamp.sol:PostageStamp",
        "label": "lastPrice",
        "offset": 0,
        "slot": "310",
        "type": "t_uint256"
      },
      {
        "astId": 5580,
        "contract": "src/PostageStamp.sol:PostageStamp",
        "label": "lastUpdatedBlock",
        "offset": 0,
        "slot": "311",
        "type": "t_uint256"
      },
      {
        "astId": 5582,
        "contract": "src/PostageStamp.sol:PostageStamp",
        "label": "lastExpiryBalance",
        "offset": 0,
        "slot": "312",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(Batch)5541_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct PostageStamp.Batch)",
        "numberOfBytes": "32",
        "value": "t_struct(Batch)5541_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Node)3453_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct HitchensOrderStatisticsTreeLib.Node)",
        "numberOfBytes": "32",
        "value": "t_struct(Node)3453_storage"
      },
      "t_struct(Batch)5541_storage": {
        "encoding": "inplace",
        "label": "struct PostageStamp.Batch",
        "members": [
          {
            "astId": 5530,
            "contract": "src/PostageStamp.sol:PostageStamp",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5532,
            "contract": "src/PostageStamp.sol:PostageStamp",
            "label": "depth",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 5534,
            "contract": "src/PostageStamp.sol:PostageStamp",
            "label": "bucketDepth",
            "offset": 21,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 5536,
            "contract": "src/PostageStamp.sol:PostageStamp",
            "label": "immutableFlag",
            "offset": 22,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5538,
            "contract": "src/PostageStamp.sol:PostageStamp",
            "label": "normalisedBalance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5540,
            "contract": "src/PostageStamp.sol:PostageStamp",
            "label": "lastUpdatedBlockNumber",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Node)3453_storage": {
        "encoding": "inplace",
        "label": "struct HitchensOrderStatisticsTreeLib.Node",
        "members": [
          {
            "astId": 3437,
            "contract": "src/PostageStamp.sol:PostageStamp",
            "label": "parent",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3439,
            "contract": "src/PostageStamp.sol:PostageStamp",
            "label": "left",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3441,
            "contract": "src/PostageStamp.sol:PostageStamp",
            "label": "right",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3443,
            "contract": "src/PostageStamp.sol:PostageStamp",
            "label": "red",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 3446,
            "contract": "src/PostageStamp.sol:PostageStamp",
            "label": "keys",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3450,
            "contract": "src/PostageStamp.sol:PostageStamp",
            "label": "keyMap",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_bytes32,t_uint256)"
          },
          {
            "astId": 3452,
            "contract": "src/PostageStamp.sol:PostageStamp",
            "label": "count",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "src/PostageStamp.sol:PostageStamp",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "src/PostageStamp.sol:PostageStamp",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Tree)3461_storage": {
        "encoding": "inplace",
        "label": "struct HitchensOrderStatisticsTreeLib.Tree",
        "members": [
          {
            "astId": 3455,
            "contract": "src/PostageStamp.sol:PostageStamp",
            "label": "root",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3460,
            "contract": "src/PostageStamp.sol:PostageStamp",
            "label": "nodes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(Node)3453_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}