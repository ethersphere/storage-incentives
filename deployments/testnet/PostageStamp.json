{
  "address": "0x74A21593321dDb9a1dB2ae0718e1a0F20D8896Fd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bzzToken",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_minimumBucketDepth",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AdministratorOnly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BatchDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BatchExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BatchExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BatchTooSmall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DepthNotIncreasing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficienChunkCount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDepth",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoBatchesExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotBatchOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyPauser",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRedistributor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceOracleOnly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TotalOutpaymentDecreased",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ValueCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ValueDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ValueKeyPairExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroBalance",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "batchId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "normalisedBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "depth",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "bucketDepth",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "immutableFlag",
          "type": "bool"
        }
      ],
      "name": "BatchCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "batchId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "newDepth",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "normalisedBalance",
          "type": "uint256"
        }
      ],
      "name": "BatchDepthIncrease",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "batchId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "topupAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "normalisedBalance",
          "type": "uint256"
        }
      ],
      "name": "BatchTopUp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "name": "PotWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "PriceUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_ORACLE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REDISTRIBUTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_batchId",
          "type": "bytes32"
        }
      ],
      "name": "batchBucketDepth",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_batchId",
          "type": "bytes32"
        }
      ],
      "name": "batchDepth",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_batchId",
          "type": "bytes32"
        }
      ],
      "name": "batchImmutableFlag",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_batchId",
          "type": "bytes32"
        }
      ],
      "name": "batchLastUpdatedBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_batchId",
          "type": "bytes32"
        }
      ],
      "name": "batchNormalisedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_batchId",
          "type": "bytes32"
        }
      ],
      "name": "batchOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "batches",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "depth",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "bucketDepth",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "immutableFlag",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "normalisedBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdatedBlockNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bzzToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_initialBalancePerChunk",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_depth",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_bucketDepth",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_batchId",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_immutable",
          "type": "bool"
        }
      ],
      "name": "copyBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_initialBalancePerChunk",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_depth",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_bucketDepth",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_immutable",
          "type": "bool"
        }
      ],
      "name": "createBatch",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentTotalOutPayment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "expireLimited",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "expiredBatchesExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "firstBatchId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_batchId",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "_newDepth",
          "type": "uint8"
        }
      ],
      "name": "increaseDepth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isBatchesTreeEmpty",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastExpiryBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastPrice",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdatedBlock",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumBucketDepth",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumInitialBalancePerChunk",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumValidityBlocks",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_batchId",
          "type": "bytes32"
        }
      ],
      "name": "remainingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_value",
          "type": "uint64"
        }
      ],
      "name": "setMinimumValidityBlocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "setPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_batchId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_topupAmountPerChunk",
          "type": "uint256"
        }
      ],
      "name": "topUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validChunkCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x085deda803d3522b6aa7b190956446da24c1097b846038e3a81a123a68cef094",
  "receipt": {
    "to": null,
    "from": "0xb1C7F17Ed88189Abf269Bf68A3B2Ed83C5276aAe",
    "contractAddress": "0x74A21593321dDb9a1dB2ae0718e1a0F20D8896Fd",
    "transactionIndex": 49,
    "gasUsed": "3200816",
    "logsBloom": "0x
    "blockHash": "0x53e90071156385d81bc1e18bb6a8eb75dfbb52e8f007adec68ccd0651cc74ffd",
    "transactionHash": "0x085deda803d3522b6aa7b190956446da24c1097b846038e3a81a123a68cef094",
    "logs": [
      {
        "transactionIndex": 49,
        "blockNumber": 10115409,
        "transactionHash": "0x085deda803d3522b6aa7b190956446da24c1097b846038e3a81a123a68cef094",
        "address": "0x74A21593321dDb9a1dB2ae0718e1a0F20D8896Fd",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b1c7f17ed88189abf269bf68a3b2ed83c5276aae",
          "0x000000000000000000000000b1c7f17ed88189abf269bf68a3b2ed83c5276aae"
        ],
        "data": "0x",
        "logIndex": 32,
        "blockHash": "0x53e90071156385d81bc1e18bb6a8eb75dfbb52e8f007adec68ccd0651cc74ffd"
      },
      {
        "transactionIndex": 49,
        "blockNumber": 10115409,
        "transactionHash": "0x085deda803d3522b6aa7b190956446da24c1097b846038e3a81a123a68cef094",
        "address": "0x74A21593321dDb9a1dB2ae0718e1a0F20D8896Fd",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
          "0x000000000000000000000000b1c7f17ed88189abf269bf68a3b2ed83c5276aae",
          "0x000000000000000000000000b1c7f17ed88189abf269bf68a3b2ed83c5276aae"
        ],
        "data": "0x",
        "logIndex": 33,
        "blockHash": "0x53e90071156385d81bc1e18bb6a8eb75dfbb52e8f007adec68ccd0651cc74ffd"
      }
    ],
    "blockNumber": 10115409,
    "cumulativeGasUsed": "11361475",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2ac3c1d3e24b45c6c310534bc2dd84b5ed576335",
    16
  ],
  "numDeployments": 3,
  "solcInputHash": "345b71f92bd2c949d71481775225dec8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bzzToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_minimumBucketDepth\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AdministratorOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BatchDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BatchExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BatchExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BatchTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepthNotIncreasing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficienChunkCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDepth\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoBatchesExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotBatchOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPauser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRedistributor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceOracleOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TotalOutpaymentDecreased\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ValueCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ValueDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ValueKeyPairExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroBalance\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"normalisedBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"depth\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"bucketDepth\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"immutableFlag\",\"type\":\"bool\"}],\"name\":\"BatchCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newDepth\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"normalisedBalance\",\"type\":\"uint256\"}],\"name\":\"BatchDepthIncrease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"topupAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"normalisedBalance\",\"type\":\"uint256\"}],\"name\":\"BatchTopUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"PotWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_ORACLE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDISTRIBUTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"}],\"name\":\"batchBucketDepth\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"}],\"name\":\"batchDepth\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"}],\"name\":\"batchImmutableFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"}],\"name\":\"batchLastUpdatedBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"}],\"name\":\"batchNormalisedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"}],\"name\":\"batchOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"batches\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"depth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"bucketDepth\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"immutableFlag\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"normalisedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedBlockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bzzToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialBalancePerChunk\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_depth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_bucketDepth\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_immutable\",\"type\":\"bool\"}],\"name\":\"copyBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialBalancePerChunk\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_depth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_bucketDepth\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_immutable\",\"type\":\"bool\"}],\"name\":\"createBatch\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTotalOutPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"expireLimited\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiredBatchesExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstBatchId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_newDepth\",\"type\":\"uint8\"}],\"name\":\"increaseDepth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBatchesTreeEmpty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastExpiryBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPrice\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdatedBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumBucketDepth\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumInitialBalancePerChunk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumValidityBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"}],\"name\":\"remainingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_value\",\"type\":\"uint64\"}],\"name\":\"setMinimumValidityBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_topupAmountPerChunk\",\"type\":\"uint256\"}],\"name\":\"topUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validChunkCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"The Swarm Authors\",\"details\":\"The postage stamp contracts allows users to create and manage postage stamp batches. The current balance for each batch is stored ordered in descending order of normalised balance. Balance is normalised to be per chunk and the total spend since the contract was deployed, i.e. when a batch is bought, its per-chunk balance is supplemented with the current cost of storing one chunk since the beginning of time, as if the batch had existed since the contract's inception. During the _expiry_ process, each of these balances is checked against the _currentTotalOutPayment_, a similarly normalised figure that represents the current cost of storing one chunk since the beginning of time. A batch with a normalised balance less than _currentTotalOutPayment_ is treated as expired. The _currentTotalOutPayment_ is calculated using _totalOutPayment_ which is updated during _setPrice_ events so that the applicable per-chunk prices can be charged for the relevant periods of time. This can then be multiplied by the amount of chunks which are allowed to be stamped by each batch to get the actual cost of storage. The amount of chunks a batch can stamp is determined by the _bucketDepth_. A batch may store a maximum of 2^depth chunks. The global figure for the currently allowed chunks is tracked by _validChunkCount_ and updated during batch _expiry_ events.\",\"events\":{\"BatchCreated(bytes32,uint256,uint256,address,uint8,uint8,bool)\":{\"details\":\"Emitted when a new batch is created.\"},\"BatchDepthIncrease(bytes32,uint8,uint256)\":{\"details\":\"Emitted when the depth of an existing batch increases.\"},\"BatchTopUp(bytes32,uint256,uint256)\":{\"details\":\"Emitted when an existing batch is topped up.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"PotWithdrawn(address,uint256)\":{\"details\":\"Emitted when an pot is Withdrawn.\"},\"PriceUpdate(uint256)\":{\"details\":\"Emitted on every price update.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_bzzToken\":\"The ERC20 token address to reference in this contract.\",\"_minimumBucketDepth\":\"The minimum bucket depth of batches that can be purchased.\"}},\"copyBatch(address,uint256,uint8,uint8,bytes32,bool)\":{\"details\":\"At least `_initialBalancePerChunk*2^depth` tokens must be approved in the ERC20 token contract.\",\"params\":{\"_batchId\":\"BatchId being copied (from previous version contract data).\",\"_depth\":\"Initial depth of the new batch.\",\"_immutable\":\"Whether the batch is mutable.\",\"_initialBalancePerChunk\":\"Initial balance per chunk of the batch.\",\"_owner\":\"Owner of the new batch.\"}},\"createBatch(address,uint256,uint8,uint8,bytes32,bool)\":{\"details\":\"At least `_initialBalancePerChunk*2^depth` tokens must be approved in the ERC20 token contract.\",\"params\":{\"_depth\":\"Initial depth of the new batch.\",\"_immutable\":\"Whether the batch is mutable.\",\"_initialBalancePerChunk\":\"Initial balance per chunk.\",\"_nonce\":\"A random value used in the batch id derivation to allow multiple batches per owner.\",\"_owner\":\"Owner of the new batch.\"}},\"currentTotalOutPayment()\":{\"details\":\"Returns the total normalised all-time per chunk payout. Only Batches with a normalised balance greater than this are valid.\"},\"expireLimited(uint256)\":{\"details\":\"Can be used if reclaiming all expired batches would exceed the block gas limit, causing other contract method calls to fail.\",\"params\":{\"limit\":\"The maximum number of batches to expire.\"}},\"firstBatchId()\":{\"details\":\"If more than one batch id, return index at 0, if no batches, revert.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseDepth(bytes32,uint8)\":{\"details\":\"Can only be called by the owner of the batch.\",\"params\":{\"_batchId\":\"the id of an existing batch.\",\"_newDepth\":\"the new (larger than the previous one) depth for this batch.\"}},\"pause()\":{\"details\":\"Can only be called by the pauser when not paused. The contract can be provably stopped by renouncing the pauser role and the admin role once paused.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"remainingBalance(bytes32)\":{\"params\":{\"_batchId\":\"The id of an existing batch.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setPrice(uint256)\":{\"details\":\"Can only be called by the price oracle role.\",\"params\":{\"_price\":\"The new price.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"topUp(bytes32,uint256)\":{\"details\":\"At least `_topupAmountPerChunk*2^depth` tokens must be approved in the ERC20 token contract.\",\"params\":{\"_batchId\":\"The id of an existing batch.\",\"_topupAmountPerChunk\":\"The amount of additional tokens to add per chunk.\"}},\"unPause()\":{\"details\":\"Can only be called by the pauser role while paused.\"},\"withdraw(address)\":{\"params\":{\"beneficiary\":\"Recieves the current total pot.\"}}},\"title\":\"PostageStamp contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"copyBatch(address,uint256,uint8,uint8,bytes32,bool)\":{\"notice\":\"Manually create a new batch when facilitating migration, can only be called by the Admin role.\"},\"createBatch(address,uint256,uint8,uint8,bytes32,bool)\":{\"notice\":\"Create a new batch.\"},\"currentTotalOutPayment()\":{\"notice\":\"Total per-chunk cost since the contract's deployment.\"},\"expireLimited(uint256)\":{\"notice\":\"Reclaims a limited number of expired batches\"},\"expiredBatchesExist()\":{\"notice\":\"Indicates whether expired batches exist.\"},\"firstBatchId()\":{\"notice\":\"Get the first batch id ordered by ascending normalised balance.\"},\"increaseDepth(bytes32,uint8)\":{\"notice\":\"Increase the depth of an existing batch.\"},\"isBatchesTreeEmpty()\":{\"notice\":\"Return true if no batches exist\"},\"pause()\":{\"notice\":\"Pause the contract.\"},\"remainingBalance(bytes32)\":{\"notice\":\"Return the per chunk balance not yet used up.\"},\"setPrice(uint256)\":{\"notice\":\"Set a new price.\"},\"topUp(bytes32,uint256)\":{\"notice\":\"Top up an existing batch.\"},\"totalPot()\":{\"notice\":\"The current pot.\"},\"unPause()\":{\"notice\":\"Unpause the contract.\"},\"withdraw(address)\":{\"notice\":\"Withdraw the pot, authorised callers only.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/PostageStamp.sol\":\"PostageStamp\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"src/OrderStatisticsTree/HitchensOrderStatisticsTreeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/*\\nHitchens Order Statistics Tree v0.99\\n\\nA Solidity Red-Black Tree library to store and maintain a sorted data\\nstructure in a Red-Black binary search tree, with O(log 2n) insert, remove\\nand search time (and gas, approximately)\\n\\nhttps://github.com/rob-Hitchens/OrderStatisticsTree\\n\\nCopyright (c) Rob Hitchens. the MIT License\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n\\nSignificant portions from BokkyPooBahsRedBlackTreeLibrary,\\nhttps://github.com/bokkypoobah/BokkyPooBahsRedBlackTreeLibrary\\n\\nTHIS SOFTWARE IS NOT TESTED OR AUDITED. DO NOT USE FOR PRODUCTION.\\n*/\\n\\nlibrary HitchensOrderStatisticsTreeLib {\\n    uint private constant EMPTY = 0;\\n    struct Node {\\n        uint parent;\\n        uint left;\\n        uint right;\\n        bool red;\\n        bytes32[] keys;\\n        mapping(bytes32 => uint) keyMap;\\n        uint count;\\n    }\\n    struct Tree {\\n        uint root;\\n        mapping(uint => Node) nodes;\\n    }\\n\\n    error ValueDoesNotExist(); // Provided value doesn't exist in the tree.\\n    error ValueCannotBeZero(); // Value to insert cannot be zero\\n    error ValueKeyPairExists(); // Value and Key pair exists. Cannot be inserted again.\\n\\n    function first(Tree storage self) internal view returns (uint _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].left != EMPTY) {\\n            _value = self.nodes[_value].left;\\n        }\\n    }\\n\\n    function exists(Tree storage self, uint value) internal view returns (bool _exists) {\\n        if (value == EMPTY) return false;\\n        if (value == self.root) return true;\\n        if (self.nodes[value].parent != EMPTY) return true;\\n        return false;\\n    }\\n\\n    function keyExists(Tree storage self, bytes32 key, uint value) internal view returns (bool _exists) {\\n        if (!exists(self, value)) return false;\\n        return self.nodes[value].keys[self.nodes[value].keyMap[key]] == key;\\n    }\\n\\n    function getNode(\\n        Tree storage self,\\n        uint value\\n    ) internal view returns (uint _parent, uint _left, uint _right, bool _red, uint keyCount, uint __count) {\\n        if (!exists(self, value)) {\\n            revert ValueDoesNotExist();\\n        }\\n\\n        Node storage gn = self.nodes[value];\\n        return (gn.parent, gn.left, gn.right, gn.red, gn.keys.length, gn.keys.length + gn.count);\\n    }\\n\\n    function getNodeCount(Tree storage self, uint value) internal view returns (uint __count) {\\n        Node storage gn = self.nodes[value];\\n        return gn.keys.length + gn.count;\\n    }\\n\\n    function valueKeyAtIndex(Tree storage self, uint value, uint index) internal view returns (bytes32 _key) {\\n        if (!exists(self, value)) {\\n            revert ValueDoesNotExist();\\n        }\\n        return self.nodes[value].keys[index];\\n    }\\n\\n    function count(Tree storage self) internal view returns (uint _count) {\\n        return getNodeCount(self, self.root);\\n    }\\n\\n    /* We don't use this functionality, so it is commented out to make audit easier\\n\\n    function percentile(Tree storage self, uint value) internal view returns(uint _percentile) {\\n        uint denominator = count(self);\\n        uint numerator = rank(self, value);\\n        _percentile = ((uint(1000) * numerator)/denominator+(uint(5)))/uint(10);\\n    }\\n    function permil(Tree storage self, uint value) internal view returns(uint _permil) {\\n        uint denominator = count(self);\\n        uint numerator = rank(self, value);\\n        _permil = ((uint(10000) * numerator)/denominator+(uint(5)))/uint(10);\\n    }\\n    function atPercentile(Tree storage self, uint _percentile) internal view returns(uint _value) {\\n        uint findRank = (((_percentile * count(self))/uint(10)) + uint(5)) / uint(10);\\n        return atRank(self,findRank);\\n    }\\n    function atPermil(Tree storage self, uint _permil) internal view returns(uint _value) {\\n        uint findRank = (((_permil * count(self))/uint(100)) + uint(5)) / uint(10);\\n        return atRank(self,findRank);\\n    }\\n    function median(Tree storage self) internal view returns(uint value) {\\n        return atPercentile(self,50);\\n    }\\n    function below(Tree storage self, uint value) public view returns(uint _below) {\\n        if(count(self) > 0 && value > 0) _below = rank(self,value)-uint(1);\\n    }\\n    function above(Tree storage self, uint value) public view returns(uint _above) {\\n        if(count(self) > 0) _above = count(self)-rank(self,value);\\n    }\\n    function valueBelowEstimate(Tree storage self, uint estimate) public view returns(uint _below) {\\n        if(count(self) > 0 && estimate > 0) {\\n            uint  highestValue = last(self);\\n            uint  lowestValue = first(self);\\n            if(estimate < lowestValue) {\\n                return 0;\\n            }\\n            if(estimate >= highestValue) {\\n                return highestValue;\\n            }\\n            uint  rankOfValue = rank(self, estimate); // approximation\\n            _below = atRank(self, rankOfValue);\\n            if(_below > estimate) { // fix error in approximation\\n                rankOfValue--;\\n                _below = atRank(self, rankOfValue);\\n            }\\n        }\\n    }\\n    function valueAboveEstimate(Tree storage self, uint estimate) public view returns(uint _above) {\\n        if(count(self) > 0 && estimate > 0) {\\n            uint  highestValue = last(self);\\n            uint  lowestValue = first(self);\\n            if(estimate > highestValue) {\\n                return 0;\\n            }\\n            if(estimate <= lowestValue) {\\n                return lowestValue;\\n            }\\n            uint  rankOfValue = rank(self, estimate); // approximation\\n            _above = atRank(self, rankOfValue);\\n            if(_above < estimate) { // fix error in approximation\\n                rankOfValue++;\\n                _above = atRank(self, rankOfValue);\\n            }\\n        }\\n    }\\n    function rank(Tree storage self, uint value) internal view returns(uint _rank) {\\n        if(count(self) > 0) {\\n            bool finished;\\n            uint cursor = self.root;\\n            Node storage c = self.nodes[cursor];\\n            uint smaller = getNodeCount(self,c.left);\\n            while (!finished) {\\n                uint keyCount = c.keys.length;\\n                if(cursor == value) {\\n                    finished = true;\\n                } else {\\n                    if(cursor < value) {\\n                        cursor = c.right;\\n                        c = self.nodes[cursor];\\n                        smaller += keyCount + getNodeCount(self,c.left);\\n                    } else {\\n                        cursor = c.left;\\n                        c = self.nodes[cursor];\\n                        smaller -= (keyCount + getNodeCount(self,c.right));\\n                    }\\n                }\\n                if (!exists(self,cursor)) {\\n                    finished = true;\\n                }\\n            }\\n            return smaller + 1;\\n        }\\n    }\\n    function atRank(Tree storage self, uint _rank) internal view returns(uint _value) {\\n        bool finished;\\n        uint cursor = self.root;\\n        Node storage c = self.nodes[cursor];\\n        uint smaller = getNodeCount(self,c.left);\\n        while (!finished) {\\n            _value = cursor;\\n            c = self.nodes[cursor];\\n            uint keyCount = c.keys.length;\\n            if(smaller + 1 >= _rank && smaller + keyCount <= _rank) {\\n                _value = cursor;\\n                finished = true;\\n            } else {\\n                if(smaller + keyCount <= _rank) {\\n                    cursor = c.right;\\n                    c = self.nodes[cursor];\\n                    smaller += keyCount + getNodeCount(self,c.left);\\n                } else {\\n                    cursor = c.left;\\n                    c = self.nodes[cursor];\\n                    smaller -= (keyCount + getNodeCount(self,c.right));\\n                }\\n            }\\n            if (!exists(self,cursor)) {\\n                finished = true;\\n            }\\n        }\\n    }\\n*/\\n\\n    function insert(Tree storage self, bytes32 key, uint value) internal {\\n        if (value == EMPTY) {\\n            revert ValueCannotBeZero();\\n        }\\n        if (keyExists(self, key, value)) {\\n            revert ValueKeyPairExists();\\n        }\\n        uint cursor;\\n        uint probe = self.root;\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (value < probe) {\\n                probe = self.nodes[probe].left;\\n            } else if (value > probe) {\\n                probe = self.nodes[probe].right;\\n            } else if (value == probe) {\\n                self.nodes[probe].keys.push(key);\\n                self.nodes[probe].keyMap[key] = self.nodes[probe].keys.length - uint(1);\\n                return;\\n            }\\n            self.nodes[cursor].count++;\\n        }\\n        Node storage nValue = self.nodes[value];\\n        nValue.parent = cursor;\\n        nValue.left = EMPTY;\\n        nValue.right = EMPTY;\\n        nValue.red = true;\\n        nValue.keys.push(key);\\n        nValue.keyMap[key] = nValue.keys.length - uint(1);\\n        if (cursor == EMPTY) {\\n            self.root = value;\\n        } else if (value < cursor) {\\n            self.nodes[cursor].left = value;\\n        } else {\\n            self.nodes[cursor].right = value;\\n        }\\n        insertFixup(self, value);\\n    }\\n\\n    function remove(Tree storage self, bytes32 key, uint value) internal {\\n        if (value == EMPTY) {\\n            revert ValueCannotBeZero();\\n        }\\n        if (!keyExists(self, key, value)) {\\n            revert ValueDoesNotExist();\\n        }\\n\\n        Node storage nValue = self.nodes[value];\\n        uint rowToDelete = nValue.keyMap[key];\\n        bytes32 last = nValue.keys[nValue.keys.length - uint(1)];\\n        nValue.keys[rowToDelete] = last;\\n        nValue.keyMap[last] = rowToDelete;\\n        nValue.keys.pop();\\n\\n        uint probe;\\n        uint cursor;\\n\\n        if (nValue.keys.length == 0) {\\n            if (self.nodes[value].left == EMPTY || self.nodes[value].right == EMPTY) {\\n                cursor = value;\\n            } else {\\n                cursor = self.nodes[value].right;\\n                while (self.nodes[cursor].left != EMPTY) {\\n                    cursor = self.nodes[cursor].left;\\n                }\\n            }\\n\\n            if (self.nodes[cursor].left != EMPTY) {\\n                probe = self.nodes[cursor].left;\\n            } else {\\n                probe = self.nodes[cursor].right;\\n            }\\n\\n            uint cursorParent = self.nodes[cursor].parent;\\n            self.nodes[probe].parent = cursorParent;\\n\\n            if (cursorParent != EMPTY) {\\n                if (cursor == self.nodes[cursorParent].left) {\\n                    self.nodes[cursorParent].left = probe;\\n                } else {\\n                    self.nodes[cursorParent].right = probe;\\n                }\\n            } else {\\n                self.root = probe;\\n            }\\n\\n            bool doFixup = !self.nodes[cursor].red;\\n\\n            if (cursor != value) {\\n                replaceParent(self, cursor, value);\\n                self.nodes[cursor].left = self.nodes[value].left;\\n                self.nodes[self.nodes[cursor].left].parent = cursor;\\n                self.nodes[cursor].right = self.nodes[value].right;\\n                self.nodes[self.nodes[cursor].right].parent = cursor;\\n                self.nodes[cursor].red = self.nodes[value].red;\\n                (cursor, value) = (value, cursor);\\n                fixCountRecurse(self, value);\\n            }\\n\\n            if (doFixup) {\\n                removeFixup(self, probe);\\n            }\\n\\n            fixCountRecurse(self, cursorParent);\\n            delete self.nodes[cursor];\\n        }\\n    }\\n\\n    function fixCountRecurse(Tree storage self, uint value) private {\\n        while (value != EMPTY) {\\n            self.nodes[value].count =\\n                getNodeCount(self, self.nodes[value].left) +\\n                getNodeCount(self, self.nodes[value].right);\\n            value = self.nodes[value].parent;\\n        }\\n    }\\n\\n    function treeMinimum(Tree storage self, uint value) private view returns (uint) {\\n        while (self.nodes[value].left != EMPTY) {\\n            value = self.nodes[value].left;\\n        }\\n        return value;\\n    }\\n\\n    function treeMaximum(Tree storage self, uint value) private view returns (uint) {\\n        while (self.nodes[value].right != EMPTY) {\\n            value = self.nodes[value].right;\\n        }\\n        return value;\\n    }\\n\\n    function rotateLeft(Tree storage self, uint value) private {\\n        uint cursor = self.nodes[value].right;\\n        uint parent = self.nodes[value].parent;\\n        uint cursorLeft = self.nodes[cursor].left;\\n        self.nodes[value].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].left) {\\n            self.nodes[parent].left = cursor;\\n        } else {\\n            self.nodes[parent].right = cursor;\\n        }\\n        self.nodes[cursor].left = value;\\n        self.nodes[value].parent = cursor;\\n        self.nodes[value].count =\\n            getNodeCount(self, self.nodes[value].left) +\\n            getNodeCount(self, self.nodes[value].right);\\n        self.nodes[cursor].count =\\n            getNodeCount(self, self.nodes[cursor].left) +\\n            getNodeCount(self, self.nodes[cursor].right);\\n    }\\n\\n    function rotateRight(Tree storage self, uint value) private {\\n        uint cursor = self.nodes[value].left;\\n        uint parent = self.nodes[value].parent;\\n        uint cursorRight = self.nodes[cursor].right;\\n        self.nodes[value].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].right) {\\n            self.nodes[parent].right = cursor;\\n        } else {\\n            self.nodes[parent].left = cursor;\\n        }\\n        self.nodes[cursor].right = value;\\n        self.nodes[value].parent = cursor;\\n        self.nodes[value].count =\\n            getNodeCount(self, self.nodes[value].left) +\\n            getNodeCount(self, self.nodes[value].right);\\n        self.nodes[cursor].count =\\n            getNodeCount(self, self.nodes[cursor].left) +\\n            getNodeCount(self, self.nodes[cursor].right);\\n    }\\n\\n    function insertFixup(Tree storage self, uint value) private {\\n        uint cursor;\\n        while (value != self.root && self.nodes[self.nodes[value].parent].red) {\\n            uint valueParent = self.nodes[value].parent;\\n            if (valueParent == self.nodes[self.nodes[valueParent].parent].left) {\\n                cursor = self.nodes[self.nodes[valueParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].right) {\\n                        value = valueParent;\\n                        rotateLeft(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateRight(self, self.nodes[valueParent].parent);\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[valueParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].left) {\\n                        value = valueParent;\\n                        rotateRight(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateLeft(self, self.nodes[valueParent].parent);\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(Tree storage self, uint a, uint b) private {\\n        uint bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(Tree storage self, uint value) private {\\n        uint cursor;\\n        while (value != self.root && !self.nodes[value].red) {\\n            uint valueParent = self.nodes[value].parent;\\n            if (value == self.nodes[valueParent].left) {\\n                cursor = self.nodes[valueParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateLeft(self, valueParent);\\n                    cursor = self.nodes[valueParent].right;\\n                }\\n                if (!self.nodes[self.nodes[cursor].left].red && !self.nodes[self.nodes[cursor].right].red) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor);\\n                        cursor = self.nodes[valueParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, valueParent);\\n                    value = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[valueParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateRight(self, valueParent);\\n                    cursor = self.nodes[valueParent].left;\\n                }\\n                if (!self.nodes[self.nodes[cursor].right].red && !self.nodes[self.nodes[cursor].left].red) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor);\\n                        cursor = self.nodes[valueParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, valueParent);\\n                    value = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[value].red = false;\\n    }\\n}\\n\",\"keccak256\":\"0x3d13491ca535051ff9d923b284f6b633c660a4d110804e4a3e965dfaa59024b8\",\"license\":\"MIT\"},\"src/PostageStamp.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.19;\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./OrderStatisticsTree/HitchensOrderStatisticsTreeLib.sol\\\";\\n\\n/**\\n * @title PostageStamp contract\\n * @author The Swarm Authors\\n * @dev The postage stamp contracts allows users to create and manage postage stamp batches.\\n * The current balance for each batch is stored ordered in descending order of normalised balance.\\n * Balance is normalised to be per chunk and the total spend since the contract was deployed, i.e. when a batch\\n * is bought, its per-chunk balance is supplemented with the current cost of storing one chunk since the beginning of time,\\n * as if the batch had existed since the contract's inception. During the _expiry_ process, each of these balances is\\n * checked against the _currentTotalOutPayment_, a similarly normalised figure that represents the current cost of\\n * storing one chunk since the beginning of time. A batch with a normalised balance less than _currentTotalOutPayment_\\n * is treated as expired.\\n *\\n * The _currentTotalOutPayment_ is calculated using _totalOutPayment_ which is updated during _setPrice_ events so\\n * that the applicable per-chunk prices can be charged for the relevant periods of time. This can then be multiplied\\n * by the amount of chunks which are allowed to be stamped by each batch to get the actual cost of storage.\\n *\\n * The amount of chunks a batch can stamp is determined by the _bucketDepth_. A batch may store a maximum of 2^depth chunks.\\n * The global figure for the currently allowed chunks is tracked by _validChunkCount_ and updated during batch _expiry_ events.\\n */\\n\\ncontract PostageStamp is AccessControl, Pausable {\\n    using HitchensOrderStatisticsTreeLib for HitchensOrderStatisticsTreeLib.Tree;\\n\\n    // ----------------------------- State variables ------------------------------\\n\\n    // Address of the ERC20 token this contract references.\\n    address public bzzToken;\\n\\n    // Minimum allowed depth of bucket.\\n    uint8 public minimumBucketDepth;\\n\\n    // Role allowed to increase totalOutPayment.\\n    bytes32 public immutable PRICE_ORACLE_ROLE;\\n\\n    // Role allowed to pause\\n    bytes32 public immutable PAUSER_ROLE;\\n    // Role allowed to withdraw the pot.\\n    bytes32 public immutable REDISTRIBUTOR_ROLE;\\n\\n    // Associate every batch id with batch data.\\n    mapping(bytes32 => Batch) public batches;\\n    // Store every batch id ordered by normalisedBalance.\\n    HitchensOrderStatisticsTreeLib.Tree tree;\\n\\n    // Total out payment per chunk, at the blockheight of the last price change.\\n    uint256 private totalOutPayment;\\n\\n    // Combined global chunk capacity of valid batches remaining at the blockheight expire() was last called.\\n    uint256 public validChunkCount;\\n\\n    // Lottery pot at last update.\\n    uint256 public pot;\\n\\n    // Normalised balance at the blockheight expire() was last called.\\n    uint256 public lastExpiryBalance;\\n\\n    // Price from the last update.\\n    uint64 public lastPrice;\\n\\n    // blocks in 24 hours ~ 24 * 60 * 60 / 5 = 17280\\n    uint64 public minimumValidityBlocks = 17280;\\n\\n    // Block at which the last update occured.\\n    uint64 public lastUpdatedBlock;\\n\\n    // ----------------------------- Type declarations ------------------------------\\n\\n    struct Batch {\\n        // Owner of this batch (0 if not valid).\\n        address owner;\\n        // Current depth of this batch.\\n        uint8 depth;\\n        // Bucket depth defined in this batch\\n        uint8 bucketDepth;\\n        // Whether this batch is immutable.\\n        bool immutableFlag;\\n        // Normalised balance per chunk.\\n        uint256 normalisedBalance;\\n        // When was this batch last updated\\n        uint256 lastUpdatedBlockNumber;\\n    }\\n\\n    // ----------------------------- Events ------------------------------\\n\\n    /**\\n     * @dev Emitted when a new batch is created.\\n     */\\n    event BatchCreated(\\n        bytes32 indexed batchId,\\n        uint256 totalAmount,\\n        uint256 normalisedBalance,\\n        address owner,\\n        uint8 depth,\\n        uint8 bucketDepth,\\n        bool immutableFlag\\n    );\\n\\n    /**\\n     * @dev Emitted when an pot is Withdrawn.\\n     */\\n    event PotWithdrawn(address recipient, uint256 totalAmount);\\n\\n    /**\\n     * @dev Emitted when an existing batch is topped up.\\n     */\\n    event BatchTopUp(bytes32 indexed batchId, uint256 topupAmount, uint256 normalisedBalance);\\n\\n    /**\\n     * @dev Emitted when the depth of an existing batch increases.\\n     */\\n    event BatchDepthIncrease(bytes32 indexed batchId, uint8 newDepth, uint256 normalisedBalance);\\n\\n    /**\\n     *@dev Emitted on every price update.\\n     */\\n    event PriceUpdate(uint256 price);\\n\\n    // ----------------------------- Errors ------------------------------\\n\\n    error ZeroAddress(); // Owner cannot be the zero address\\n    error InvalidDepth(); // Invalid bucket depth\\n    error BatchExists(); // Batch already exists\\n    error InsufficientBalance(); // Insufficient initial balance for 24h minimum validity\\n    error TransferFailed(); // Failed transfer of BZZ tokens\\n    error ZeroBalance(); // NormalisedBalance cannot be zero\\n    error AdministratorOnly(); // Only administrator can use copy method\\n    error BatchDoesNotExist(); // Batch does not exist or has expired\\n    error BatchExpired(); // Batch already expired\\n    error BatchTooSmall(); // Batch too small to renew\\n    error NotBatchOwner(); // Not batch owner\\n    error DepthNotIncreasing(); // Depth not increasing\\n    error PriceOracleOnly(); // Only price oracle can set the price\\n    error InsufficienChunkCount(); // Insufficient valid chunk count\\n    error TotalOutpaymentDecreased(); // Current total outpayment should never decrease\\n    error NoBatchesExist(); // There are no batches\\n    error OnlyPauser(); // Only Pauser role can pause or unpause contracts\\n    error OnlyRedistributor(); // Only redistributor role can withdraw from the contract\\n\\n    // ----------------------------- CONSTRUCTOR ------------------------------\\n\\n    /**\\n     * @param _bzzToken The ERC20 token address to reference in this contract.\\n     * @param _minimumBucketDepth The minimum bucket depth of batches that can be purchased.\\n     */\\n    constructor(address _bzzToken, uint8 _minimumBucketDepth) {\\n        bzzToken = _bzzToken;\\n        minimumBucketDepth = _minimumBucketDepth;\\n        PRICE_ORACLE_ROLE = keccak256(\\\"PRICE_ORACLE_ROLE\\\");\\n        PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n        REDISTRIBUTOR_ROLE = keccak256(\\\"REDISTRIBUTOR_ROLE\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(PAUSER_ROLE, msg.sender);\\n    }\\n\\n    ////////////////////////////////////////\\n    //            STATE CHANGING          //\\n    ////////////////////////////////////////\\n\\n    /**\\n     * @notice Create a new batch.\\n     * @dev At least `_initialBalancePerChunk*2^depth` tokens must be approved in the ERC20 token contract.\\n     * @param _owner Owner of the new batch.\\n     * @param _initialBalancePerChunk Initial balance per chunk.\\n     * @param _depth Initial depth of the new batch.\\n     * @param _nonce A random value used in the batch id derivation to allow multiple batches per owner.\\n     * @param _immutable Whether the batch is mutable.\\n     */\\n    function createBatch(\\n        address _owner,\\n        uint256 _initialBalancePerChunk,\\n        uint8 _depth,\\n        uint8 _bucketDepth,\\n        bytes32 _nonce,\\n        bool _immutable\\n    ) external whenNotPaused returns (bytes32) {\\n        if (_owner == address(0)) {\\n            revert ZeroAddress();\\n        }\\n\\n        if (_bucketDepth == 0 || _bucketDepth < minimumBucketDepth || _bucketDepth >= _depth) {\\n            revert InvalidDepth();\\n        }\\n\\n        bytes32 batchId = keccak256(abi.encode(msg.sender, _nonce));\\n        if (batches[batchId].owner != address(0)) {\\n            revert BatchExists();\\n        }\\n\\n        if (_initialBalancePerChunk < minimumInitialBalancePerChunk()) {\\n            revert InsufficientBalance();\\n        }\\n\\n        uint256 totalAmount = _initialBalancePerChunk * (1 << _depth);\\n        if (!ERC20(bzzToken).transferFrom(msg.sender, address(this), totalAmount)) {\\n            revert TransferFailed();\\n        }\\n\\n        uint256 normalisedBalance = currentTotalOutPayment() + (_initialBalancePerChunk);\\n        if (normalisedBalance == 0) {\\n            revert ZeroBalance();\\n        }\\n\\n        expireLimited(type(uint256).max);\\n        validChunkCount += 1 << _depth;\\n\\n        batches[batchId] = Batch({\\n            owner: _owner,\\n            depth: _depth,\\n            bucketDepth: _bucketDepth,\\n            immutableFlag: _immutable,\\n            normalisedBalance: normalisedBalance,\\n            lastUpdatedBlockNumber: block.number\\n        });\\n\\n        tree.insert(batchId, normalisedBalance);\\n\\n        emit BatchCreated(batchId, totalAmount, normalisedBalance, _owner, _depth, _bucketDepth, _immutable);\\n\\n        return batchId;\\n    }\\n\\n    /**\\n     * @notice Manually create a new batch when facilitating migration, can only be called by the Admin role.\\n     * @dev At least `_initialBalancePerChunk*2^depth` tokens must be approved in the ERC20 token contract.\\n     * @param _owner Owner of the new batch.\\n     * @param _initialBalancePerChunk Initial balance per chunk of the batch.\\n     * @param _depth Initial depth of the new batch.\\n     * @param _batchId BatchId being copied (from previous version contract data).\\n     * @param _immutable Whether the batch is mutable.\\n     */\\n    function copyBatch(\\n        address _owner,\\n        uint256 _initialBalancePerChunk,\\n        uint8 _depth,\\n        uint8 _bucketDepth,\\n        bytes32 _batchId,\\n        bool _immutable\\n    ) external whenNotPaused {\\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) {\\n            revert AdministratorOnly();\\n        }\\n\\n        if (_owner == address(0)) {\\n            revert ZeroAddress();\\n        }\\n\\n        if (_bucketDepth == 0 || _bucketDepth >= _depth) {\\n            revert InvalidDepth();\\n        }\\n\\n        if (batches[_batchId].owner != address(0)) {\\n            revert BatchExists();\\n        }\\n\\n        uint256 totalAmount = _initialBalancePerChunk * (1 << _depth);\\n        if (!ERC20(bzzToken).transferFrom(msg.sender, address(this), totalAmount)) {\\n            revert TransferFailed();\\n        }\\n\\n        uint256 normalisedBalance = currentTotalOutPayment() + (_initialBalancePerChunk);\\n        if (normalisedBalance == 0) {\\n            revert ZeroBalance();\\n        }\\n\\n        //update validChunkCount to remove currently expired batches\\n        expireLimited(type(uint256).max);\\n\\n        validChunkCount += 1 << _depth;\\n\\n        batches[_batchId] = Batch({\\n            owner: _owner,\\n            depth: _depth,\\n            bucketDepth: _bucketDepth,\\n            immutableFlag: _immutable,\\n            normalisedBalance: normalisedBalance,\\n            lastUpdatedBlockNumber: block.number\\n        });\\n\\n        tree.insert(_batchId, normalisedBalance);\\n\\n        emit BatchCreated(_batchId, totalAmount, normalisedBalance, _owner, _depth, _bucketDepth, _immutable);\\n    }\\n\\n    /**\\n     * @notice Top up an existing batch.\\n     * @dev At least `_topupAmountPerChunk*2^depth` tokens must be approved in the ERC20 token contract.\\n     * @param _batchId The id of an existing batch.\\n     * @param _topupAmountPerChunk The amount of additional tokens to add per chunk.\\n     */\\n    function topUp(bytes32 _batchId, uint256 _topupAmountPerChunk) external whenNotPaused {\\n        Batch memory batch = batches[_batchId];\\n\\n        if (batch.owner == address(0)) {\\n            revert BatchDoesNotExist();\\n        }\\n\\n        if (batch.normalisedBalance <= currentTotalOutPayment()) {\\n            revert BatchExpired();\\n        }\\n\\n        if (batch.depth <= minimumBucketDepth) {\\n            revert BatchTooSmall();\\n        }\\n\\n        if (remainingBalance(_batchId) + (_topupAmountPerChunk) < minimumInitialBalancePerChunk()) {\\n            revert InsufficientBalance();\\n        }\\n\\n        // per chunk balance multiplied by the batch size in chunks must be transferred from the sender\\n        uint256 totalAmount = _topupAmountPerChunk * (1 << batch.depth);\\n        if (!ERC20(bzzToken).transferFrom(msg.sender, address(this), totalAmount)) {\\n            revert TransferFailed();\\n        }\\n\\n        // update by removing batch and then reinserting\\n        tree.remove(_batchId, batch.normalisedBalance);\\n        batch.normalisedBalance = batch.normalisedBalance + (_topupAmountPerChunk);\\n        tree.insert(_batchId, batch.normalisedBalance);\\n\\n        batches[_batchId].normalisedBalance = batch.normalisedBalance;\\n        emit BatchTopUp(_batchId, totalAmount, batch.normalisedBalance);\\n    }\\n\\n    /**\\n     * @notice Increase the depth of an existing batch.\\n     * @dev Can only be called by the owner of the batch.\\n     * @param _batchId the id of an existing batch.\\n     * @param _newDepth the new (larger than the previous one) depth for this batch.\\n     */\\n    function increaseDepth(bytes32 _batchId, uint8 _newDepth) external whenNotPaused {\\n        Batch memory batch = batches[_batchId];\\n\\n        if (batch.owner != msg.sender) {\\n            revert NotBatchOwner();\\n        }\\n\\n        if (!(minimumBucketDepth < _newDepth && batch.depth < _newDepth)) {\\n            revert DepthNotIncreasing();\\n        }\\n\\n        if (batch.normalisedBalance <= currentTotalOutPayment()) {\\n            revert BatchExpired();\\n        }\\n\\n        uint8 depthChange = _newDepth - batch.depth;\\n        uint256 newRemainingBalance = remainingBalance(_batchId) / (1 << depthChange);\\n\\n        if (newRemainingBalance < minimumInitialBalancePerChunk()) {\\n            revert InsufficientBalance();\\n        }\\n\\n        expireLimited(type(uint256).max);\\n        validChunkCount += (1 << _newDepth) - (1 << batch.depth);\\n        tree.remove(_batchId, batch.normalisedBalance);\\n        batches[_batchId].depth = _newDepth;\\n        batches[_batchId].lastUpdatedBlockNumber = block.number;\\n\\n        batch.normalisedBalance = currentTotalOutPayment() + newRemainingBalance;\\n        batches[_batchId].normalisedBalance = batch.normalisedBalance;\\n        tree.insert(_batchId, batch.normalisedBalance);\\n\\n        emit BatchDepthIncrease(_batchId, _newDepth, batch.normalisedBalance);\\n    }\\n\\n    /**\\n     * @notice Set a new price.\\n     * @dev Can only be called by the price oracle role.\\n     * @param _price The new price.\\n     */\\n    function setPrice(uint256 _price) external {\\n        if (!hasRole(PRICE_ORACLE_ROLE, msg.sender)) {\\n            revert PriceOracleOnly();\\n        }\\n\\n        if (lastPrice != 0) {\\n            totalOutPayment = currentTotalOutPayment();\\n        }\\n\\n        lastPrice = uint64(_price);\\n        lastUpdatedBlock = uint64(block.number);\\n\\n        emit PriceUpdate(_price);\\n    }\\n\\n    function setMinimumValidityBlocks(uint64 _value) external {\\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) {\\n            revert AdministratorOnly();\\n        }\\n\\n        minimumValidityBlocks = _value;\\n    }\\n\\n    /**\\n     * @notice Reclaims a limited number of expired batches\\n     * @dev Can be used if reclaiming all expired batches would exceed the block gas limit, causing other\\n     * contract method calls to fail.\\n     * @param limit The maximum number of batches to expire.\\n     */\\n    function expireLimited(uint256 limit) public {\\n        // the lower bound of the normalised balance for which we will check if batches have expired\\n        uint256 _lastExpiryBalance = lastExpiryBalance;\\n        uint256 i;\\n        for (i; i < limit; ) {\\n            if (isBatchesTreeEmpty()) {\\n                lastExpiryBalance = currentTotalOutPayment();\\n                break;\\n            }\\n            // get the batch with the smallest normalised balance\\n            bytes32 fbi = firstBatchId();\\n            // if the batch with the smallest balance has not yet expired\\n            // we have already reached the end of the batches we need\\n            // to expire, so exit the loop\\n            if (remainingBalance(fbi) > 0) {\\n                // the upper bound of the normalised balance for which we will check if batches have expired\\n                // value is updated when there are no expired batches left\\n                lastExpiryBalance = currentTotalOutPayment();\\n                break;\\n            }\\n            // otherwise, the batch with the smallest balance has expired,\\n            // so we must remove the chunks this batch contributes to the global validChunkCount\\n            Batch memory batch = batches[fbi];\\n            uint256 batchSize = 1 << batch.depth;\\n\\n            if (validChunkCount < batchSize) {\\n                revert InsufficienChunkCount();\\n            }\\n            validChunkCount -= batchSize;\\n            // since the batch expired _during_ the period we must add\\n            // remaining normalised payout for this batch only\\n            pot += batchSize * (batch.normalisedBalance - _lastExpiryBalance);\\n            tree.remove(fbi, batch.normalisedBalance);\\n            delete batches[fbi];\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        // then, for all batches that have _not_ expired during the period\\n        // add the total normalised payout of all batches\\n        // multiplied by the remaining total valid chunk count\\n        // to the pot for the period since the last expiry\\n\\n        if (lastExpiryBalance < _lastExpiryBalance) {\\n            revert TotalOutpaymentDecreased();\\n        }\\n\\n        // then, for all batches that have _not_ expired during the period\\n        // add the total normalised payout of all batches\\n        // multiplied by the remaining total valid chunk count\\n        // to the pot for the period since the last expiry\\n        pot += validChunkCount * (lastExpiryBalance - _lastExpiryBalance);\\n    }\\n\\n    /**\\n     * @notice The current pot.\\n     */\\n    function totalPot() public returns (uint256) {\\n        expireLimited(type(uint256).max);\\n        uint256 balance = ERC20(bzzToken).balanceOf(address(this));\\n        return pot < balance ? pot : balance;\\n    }\\n\\n    /**\\n     * @notice Withdraw the pot, authorised callers only.\\n     * @param beneficiary Recieves the current total pot.\\n     */\\n\\n    function withdraw(address beneficiary) external {\\n        if (!hasRole(REDISTRIBUTOR_ROLE, msg.sender)) {\\n            revert OnlyRedistributor();\\n        }\\n\\n        uint256 totalAmount = totalPot();\\n        if (!ERC20(bzzToken).transfer(beneficiary, totalAmount)) {\\n            revert TransferFailed();\\n        }\\n\\n        emit PotWithdrawn(beneficiary, totalAmount);\\n        pot = 0;\\n    }\\n\\n    /**\\n     * @notice Pause the contract.\\n     * @dev Can only be called by the pauser when not paused.\\n     * The contract can be provably stopped by renouncing the pauser role and the admin role once paused.\\n     */\\n    function pause() public {\\n        if (!hasRole(PAUSER_ROLE, msg.sender)) {\\n            revert OnlyPauser();\\n        }\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpause the contract.\\n     * @dev Can only be called by the pauser role while paused.\\n     */\\n    function unPause() public {\\n        if (!hasRole(PAUSER_ROLE, msg.sender)) {\\n            revert OnlyPauser();\\n        }\\n\\n        _unpause();\\n    }\\n\\n    ////////////////////////////////////////\\n    //            STATE READING           //\\n    ////////////////////////////////////////\\n\\n    /**\\n     * @notice Total per-chunk cost since the contract's deployment.\\n     * @dev Returns the total normalised all-time per chunk payout.\\n     * Only Batches with a normalised balance greater than this are valid.\\n     */\\n    function currentTotalOutPayment() public view returns (uint256) {\\n        uint256 blocks = block.number - lastUpdatedBlock;\\n        uint256 increaseSinceLastUpdate = lastPrice * (blocks);\\n        return totalOutPayment + (increaseSinceLastUpdate);\\n    }\\n\\n    function minimumInitialBalancePerChunk() public view returns (uint256) {\\n        return minimumValidityBlocks * lastPrice;\\n    }\\n\\n    /**\\n     * @notice Return the per chunk balance not yet used up.\\n     * @param _batchId The id of an existing batch.\\n     */\\n    function remainingBalance(bytes32 _batchId) public view returns (uint256) {\\n        Batch memory batch = batches[_batchId];\\n\\n        if (batch.owner == address(0)) {\\n            revert BatchDoesNotExist(); // Batch does not exist or expired\\n        }\\n\\n        if (batch.normalisedBalance <= currentTotalOutPayment()) {\\n            return 0;\\n        }\\n\\n        return batch.normalisedBalance - currentTotalOutPayment();\\n    }\\n\\n    /**\\n     * @notice Indicates whether expired batches exist.\\n     */\\n    function expiredBatchesExist() public view returns (bool) {\\n        if (isBatchesTreeEmpty()) {\\n            return false;\\n        }\\n        return (remainingBalance(firstBatchId()) <= 0);\\n    }\\n\\n    /**\\n     * @notice Return true if no batches exist\\n     */\\n    function isBatchesTreeEmpty() public view returns (bool) {\\n        return tree.count() == 0;\\n    }\\n\\n    /**\\n     * @notice Get the first batch id ordered by ascending normalised balance.\\n     * @dev If more than one batch id, return index at 0, if no batches, revert.\\n     */\\n    function firstBatchId() public view returns (bytes32) {\\n        uint256 val = tree.first();\\n        if (val == 0) {\\n            revert NoBatchesExist();\\n        }\\n        return tree.valueKeyAtIndex(val, 0);\\n    }\\n\\n    function batchOwner(bytes32 _batchId) public view returns (address) {\\n        return batches[_batchId].owner;\\n    }\\n\\n    function batchDepth(bytes32 _batchId) public view returns (uint8) {\\n        return batches[_batchId].depth;\\n    }\\n\\n    function batchBucketDepth(bytes32 _batchId) public view returns (uint8) {\\n        return batches[_batchId].bucketDepth;\\n    }\\n\\n    function batchImmutableFlag(bytes32 _batchId) public view returns (bool) {\\n        return batches[_batchId].immutableFlag;\\n    }\\n\\n    function batchNormalisedBalance(bytes32 _batchId) public view returns (uint256) {\\n        return batches[_batchId].normalisedBalance;\\n    }\\n\\n    function batchLastUpdatedBlockNumber(bytes32 _batchId) public view returns (uint256) {\\n        return batches[_batchId].lastUpdatedBlockNumber;\\n    }\\n}\\n\",\"keccak256\":\"0x0e55340aa9a37b3f3c7c66e37ee26bbafa2ce5416f233d59067a0441aaf2df7f\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "The Swarm Authors",
    "details": "The postage stamp contracts allows users to create and manage postage stamp batches. The current balance for each batch is stored ordered in descending order of normalised balance. Balance is normalised to be per chunk and the total spend since the contract was deployed, i.e. when a batch is bought, its per-chunk balance is supplemented with the current cost of storing one chunk since the beginning of time, as if the batch had existed since the contract's inception. During the _expiry_ process, each of these balances is checked against the _currentTotalOutPayment_, a similarly normalised figure that represents the current cost of storing one chunk since the beginning of time. A batch with a normalised balance less than _currentTotalOutPayment_ is treated as expired. The _currentTotalOutPayment_ is calculated using _totalOutPayment_ which is updated during _setPrice_ events so that the applicable per-chunk prices can be charged for the relevant periods of time. This can then be multiplied by the amount of chunks which are allowed to be stamped by each batch to get the actual cost of storage. The amount of chunks a batch can stamp is determined by the _bucketDepth_. A batch may store a maximum of 2^depth chunks. The global figure for the currently allowed chunks is tracked by _validChunkCount_ and updated during batch _expiry_ events.",
    "events": {
      "BatchCreated(bytes32,uint256,uint256,address,uint8,uint8,bool)": {
        "details": "Emitted when a new batch is created."
      },
      "BatchDepthIncrease(bytes32,uint8,uint256)": {
        "details": "Emitted when the depth of an existing batch increases."
      },
      "BatchTopUp(bytes32,uint256,uint256)": {
        "details": "Emitted when an existing batch is topped up."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "PotWithdrawn(address,uint256)": {
        "details": "Emitted when an pot is Withdrawn."
      },
      "PriceUpdate(uint256)": {
        "details": "Emitted on every price update."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_bzzToken": "The ERC20 token address to reference in this contract.",
          "_minimumBucketDepth": "The minimum bucket depth of batches that can be purchased."
        }
      },
      "copyBatch(address,uint256,uint8,uint8,bytes32,bool)": {
        "details": "At least `_initialBalancePerChunk*2^depth` tokens must be approved in the ERC20 token contract.",
        "params": {
          "_batchId": "BatchId being copied (from previous version contract data).",
          "_depth": "Initial depth of the new batch.",
          "_immutable": "Whether the batch is mutable.",
          "_initialBalancePerChunk": "Initial balance per chunk of the batch.",
          "_owner": "Owner of the new batch."
        }
      },
      "createBatch(address,uint256,uint8,uint8,bytes32,bool)": {
        "details": "At least `_initialBalancePerChunk*2^depth` tokens must be approved in the ERC20 token contract.",
        "params": {
          "_depth": "Initial depth of the new batch.",
          "_immutable": "Whether the batch is mutable.",
          "_initialBalancePerChunk": "Initial balance per chunk.",
          "_nonce": "A random value used in the batch id derivation to allow multiple batches per owner.",
          "_owner": "Owner of the new batch."
        }
      },
      "currentTotalOutPayment()": {
        "details": "Returns the total normalised all-time per chunk payout. Only Batches with a normalised balance greater than this are valid."
      },
      "expireLimited(uint256)": {
        "details": "Can be used if reclaiming all expired batches would exceed the block gas limit, causing other contract method calls to fail.",
        "params": {
          "limit": "The maximum number of batches to expire."
        }
      },
      "firstBatchId()": {
        "details": "If more than one batch id, return index at 0, if no batches, revert."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "increaseDepth(bytes32,uint8)": {
        "details": "Can only be called by the owner of the batch.",
        "params": {
          "_batchId": "the id of an existing batch.",
          "_newDepth": "the new (larger than the previous one) depth for this batch."
        }
      },
      "pause()": {
        "details": "Can only be called by the pauser when not paused. The contract can be provably stopped by renouncing the pauser role and the admin role once paused."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "remainingBalance(bytes32)": {
        "params": {
          "_batchId": "The id of an existing batch."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setPrice(uint256)": {
        "details": "Can only be called by the price oracle role.",
        "params": {
          "_price": "The new price."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "topUp(bytes32,uint256)": {
        "details": "At least `_topupAmountPerChunk*2^depth` tokens must be approved in the ERC20 token contract.",
        "params": {
          "_batchId": "The id of an existing batch.",
          "_topupAmountPerChunk": "The amount of additional tokens to add per chunk."
        }
      },
      "unPause()": {
        "details": "Can only be called by the pauser role while paused."
      },
      "withdraw(address)": {
        "params": {
          "beneficiary": "Recieves the current total pot."
        }
      }
    },
    "title": "PostageStamp contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "copyBatch(address,uint256,uint8,uint8,bytes32,bool)": {
        "notice": "Manually create a new batch when facilitating migration, can only be called by the Admin role."
      },
      "createBatch(address,uint256,uint8,uint8,bytes32,bool)": {
        "notice": "Create a new batch."
      },
      "currentTotalOutPayment()": {
        "notice": "Total per-chunk cost since the contract's deployment."
      },
      "expireLimited(uint256)": {
        "notice": "Reclaims a limited number of expired batches"
      },
      "expiredBatchesExist()": {
        "notice": "Indicates whether expired batches exist."
      },
      "firstBatchId()": {
        "notice": "Get the first batch id ordered by ascending normalised balance."
      },
      "increaseDepth(bytes32,uint8)": {
        "notice": "Increase the depth of an existing batch."
      },
      "isBatchesTreeEmpty()": {
        "notice": "Return true if no batches exist"
      },
      "pause()": {
        "notice": "Pause the contract."
      },
      "remainingBalance(bytes32)": {
        "notice": "Return the per chunk balance not yet used up."
      },
      "setPrice(uint256)": {
        "notice": "Set a new price."
      },
      "topUp(bytes32,uint256)": {
        "notice": "Top up an existing batch."
      },
      "totalPot()": {
        "notice": "The current pot."
      },
      "unPause()": {
        "notice": "Unpause the contract."
      },
      "withdraw(address)": {
        "notice": "Withdraw the pot, authorised callers only."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "src/PostageStamp.sol:PostageStamp",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 556,
        "contract": "src/PostageStamp.sol:PostageStamp",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 5326,
        "contract": "src/PostageStamp.sol:PostageStamp",
        "label": "bzzToken",
        "offset": 1,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5328,
        "contract": "src/PostageStamp.sol:PostageStamp",
        "label": "minimumBucketDepth",
        "offset": 21,
        "slot": "1",
        "type": "t_uint8"
      },
      {
        "astId": 5339,
        "contract": "src/PostageStamp.sol:PostageStamp",
        "label": "batches",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(Batch)5370_storage)"
      },
      {
        "astId": 5342,
        "contract": "src/PostageStamp.sol:PostageStamp",
        "label": "tree",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Tree)3295_storage"
      },
      {
        "astId": 5344,
        "contract": "src/PostageStamp.sol:PostageStamp",
        "label": "totalOutPayment",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 5346,
        "contract": "src/PostageStamp.sol:PostageStamp",
        "label": "validChunkCount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 5348,
        "contract": "src/PostageStamp.sol:PostageStamp",
        "label": "pot",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 5350,
        "contract": "src/PostageStamp.sol:PostageStamp",
        "label": "lastExpiryBalance",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 5352,
        "contract": "src/PostageStamp.sol:PostageStamp",
        "label": "lastPrice",
        "offset": 0,
        "slot": "9",
        "type": "t_uint64"
      },
      {
        "astId": 5355,
        "contract": "src/PostageStamp.sol:PostageStamp",
        "label": "minimumValidityBlocks",
        "offset": 8,
        "slot": "9",
        "type": "t_uint64"
      },
      {
        "astId": 5357,
        "contract": "src/PostageStamp.sol:PostageStamp",
        "label": "lastUpdatedBlock",
        "offset": 16,
        "slot": "9",
        "type": "t_uint64"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(Batch)5370_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct PostageStamp.Batch)",
        "numberOfBytes": "32",
        "value": "t_struct(Batch)5370_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Node)3287_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct HitchensOrderStatisticsTreeLib.Node)",
        "numberOfBytes": "32",
        "value": "t_struct(Node)3287_storage"
      },
      "t_struct(Batch)5370_storage": {
        "encoding": "inplace",
        "label": "struct PostageStamp.Batch",
        "members": [
          {
            "astId": 5359,
            "contract": "src/PostageStamp.sol:PostageStamp",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5361,
            "contract": "src/PostageStamp.sol:PostageStamp",
            "label": "depth",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 5363,
            "contract": "src/PostageStamp.sol:PostageStamp",
            "label": "bucketDepth",
            "offset": 21,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 5365,
            "contract": "src/PostageStamp.sol:PostageStamp",
            "label": "immutableFlag",
            "offset": 22,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5367,
            "contract": "src/PostageStamp.sol:PostageStamp",
            "label": "normalisedBalance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5369,
            "contract": "src/PostageStamp.sol:PostageStamp",
            "label": "lastUpdatedBlockNumber",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Node)3287_storage": {
        "encoding": "inplace",
        "label": "struct HitchensOrderStatisticsTreeLib.Node",
        "members": [
          {
            "astId": 3271,
            "contract": "src/PostageStamp.sol:PostageStamp",
            "label": "parent",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3273,
            "contract": "src/PostageStamp.sol:PostageStamp",
            "label": "left",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3275,
            "contract": "src/PostageStamp.sol:PostageStamp",
            "label": "right",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3277,
            "contract": "src/PostageStamp.sol:PostageStamp",
            "label": "red",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 3280,
            "contract": "src/PostageStamp.sol:PostageStamp",
            "label": "keys",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3284,
            "contract": "src/PostageStamp.sol:PostageStamp",
            "label": "keyMap",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_bytes32,t_uint256)"
          },
          {
            "astId": 3286,
            "contract": "src/PostageStamp.sol:PostageStamp",
            "label": "count",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "src/PostageStamp.sol:PostageStamp",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "src/PostageStamp.sol:PostageStamp",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Tree)3295_storage": {
        "encoding": "inplace",
        "label": "struct HitchensOrderStatisticsTreeLib.Tree",
        "members": [
          {
            "astId": 3289,
            "contract": "src/PostageStamp.sol:PostageStamp",
            "label": "root",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3294,
            "contract": "src/PostageStamp.sol:PostageStamp",
            "label": "nodes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(Node)3287_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}